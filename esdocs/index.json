[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "public/CsoundAudioNode.js",
    "content": "/**\n * C S O U N D\n *\n * L I C E N S E\n *\n * This software is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n *\n */\n \n// import csound_audio_processor_module from 'CsoundAudioProcessor.js';\n\nclass CsoundAudioNode extends AudioWorkletNode {\n    resolveCleanup(result) {\n        return result;\n    }\n    resolveCompileCsdText(result) {\n        this.message_callback(\"[\" + window.performance.now() + \" resolveCompileCsdText with: \" + result + \", \" + this + \"]\\n\");\n        return result;\n    }\n    resolveCompileOrc(result) {\n        return result;\n    }\n    resolveGetControlChannel(result) {\n        return result;\n    }\n    resolveGetFileData(result) {\n        return result;\n    }\n    resolveReadScore(result) {\n        return result;\n    }\n    resolveReset() {\n        return;\n    }\n    resolveStop() {\n        return;\n    }\n    async onMessage(event) {\n            let data = event.data;\n            switch(data[0]) {\n                case \"Message\":\n                    if (this.message_callback != null) {\n                        this.message_callback(data[1]);\n                    } else {\n                        console.log(data[1]);\n                    }\n                    break;\n                // Some Csound API calls should be serializable, i.e. \n                // synchronous. These cases resolve promises (above) from those calls.\n                case \"CleanupResult\":\n                    // this.message_callback(\"[\" + window.performance.now() + \" Received CleanupResult with: \" + data[1] + \".]\\n\");\n                    this.resolveCleanup(data[1]);\n                    break;\n                case \"CompileOrcResult\":\n                    // this.message_callback(\"[\" + window.performance.now() + \" Received CompileOrcResult with: \" + data[1] + \".]\\n\");\n                    this.resolveCompileOrc(data[1]);\n                    break;\n                case \"CompileCsdTextResult\":\n                    // this.message_callback(\"[\" + window.performance.now() + \" Received CompileCsdTextResult with: \" + data[1] + \".]\\n\");\n                    this.resolveCompileCsdText(data[1]);\n                    break;\n                case \"GetControlChannelResult\":\n                     // this.message_callback(\"[\" + window.performance.now() + \" Received GetControlChannelResult with: \" + data[1] + \".]\\n\");\n                    this.resolveGetControlChannel(data[1]);\n                    break;\n                case \"GetFileDataResult\":\n                    this.resolveGetFileData(data[1]);\n                    break;\n                case \"GetScoreTimeResult\":\n                     // this.message_callback(\"[\" + window.performance.now() + \" Received GetScoreTimeResult with: \" + data[1] + \".]\\n\");\n                    this.resolveGetScoreTime(data[1]);\n                    break;\n                case \"IsPlayingResult\":\n                    // this.message_callback(\"[\" + window.performance.now() + \" Received IsPlayingResult with: \" + data[1] + \".]\\n\");\n                    this.resolveIsPlaying(this.is_playing);\n                    break;\n                case \"ReadScoreResult\":\n                    // this.message_callback(\"[\" + window.performance.now() + \" Received ReadScoreResult with: \" + data[1] + \".]\\n\");\n                    this.resolveReadScore(data[1]);\n                    break;\n                case \"ResetResult\":\n                    // this.message_callback(\"[\" + window.performance.now() + \" Received ResetResult.]\\n\");\n                    this.resolveReset();\n                    break;\n                case \"StopResult\":\n                    // this.message_callback(\"[\" + window.performance.now() + \" Received StopResult.]\\n\");\n                    this.resolveStop();\n                    break;\n            };\n    };\n    constructor(context, message_callback_, options) {\n        options = options || {};\n        options.numberOfInputs  = 1;\n        options.numberOfOutputs = 1;\n        options.outputChannelCount = [context.destination.channelCount];\n        super(context, 'csound-audio-processor', options);\n        this.message_callback = message_callback_;\n        this.message_callback(\"CsoundAudioNode constructor...\\n\");\n        this.reset_();\n        this.CompileCsdTextPromise = null;\n        this.CompileOrcPromise = null;\n        this.IsPlayingPromise = null;\n        this.StopPromise = null;\n        this.CleanupPromise = null;\n        this.GetFileDataPromise = null;\n        this.GetScoreTimePromise = null;\n        this.GetGetControlChannelPromise = null;\n        this.ReadScorePromise = null;\n        this.ResetPromise = null;\n        this.port.onmessage = this.onMessage.bind(this);\n        this.port.start();\n    }\n    reset_() {\n        this.is_playing = false;\n        this.is_realtime = false;\n        this.userMediaAudioInputNode = null;\n        this.input = null;\n        this.output = null;\n    }\n    \n    // NOTE: All class member function names, i.e. the actual Csound API, \n    // are declared and defined both in initial caps (as in C++), and in camel \n    // case (for compatibility with CsoundObj). If CsoundObj has a member \n    // function that is needed here and that has a different name, it should \n    // get an alias or an implementation here.\n\n    async Cleanup() {\n        // this.message_callback(\"[\" + window.performance.now() + \" Cleanup.]\\n\");\n        let promise = new Promise((resolve, reject) => {\n            // Not exactly intuitive!\n            this.resolveCleanup = resolve;\n            this.port.postMessage([\"Cleanup\"]);\n        });\n        let result = await promise;\n        // this.message_callback(\"[\" + window.performance.now() + \" Cleanup resolved with: \" + result + \".]\\n\");\n        return result;\n    };\n    async cleanup() {\n       // this.message_callback(\"[\" + window.performance.now() + \" Cleanup.]\\n\");\n        let promise = new Promise((resolve, reject) => {\n            // Not exactly intuitive!\n            this.resolveCleanup = resolve;\n            this.port.postMessage([\"Cleanup\"]);\n        });\n        let result = await promise;\n        // this.message_callback(\"[\" + window.performance.now() + \" Cleanup resolved with: \" + result + \".]\\n\");\n        return result;\n    };\n    CompileCsd(filename) {\n        this.port.postMessage([\"CompileCsd\", filename]);\n    };\n    compileCsd(filename) {\n        this.compileCsd(filename);\n    };\n    async CompileCsdText(csd) {\n        // this.message_callback(\"[\" + window.performance.now() + \" CompileCsdText.]\\n\");\n        let promise = new Promise((resolve, reject) => {\n            // Not exactly intuitive!\n            this.resolveCompileCsdText = resolve;\n            this.port.postMessage([\"CompileCsdText\", csd]);\n        });\n        let result = await promise;\n        // this.message_callback(\"[\" + window.performance.now() + \" CompileCsdText resolved with: \" + result + \".]\\n\");\n        return result;\n    };\n    async compileCsdText(csd) {\n        // this.message_callback(\"[\" + window.performance.now() + \" CompileCsdText.]\\n\");\n        let promise = new Promise((resolve, reject) => {\n            // Not exactly intuitive!\n            this.resolveCompileCsdText = resolve;\n            this.port.postMessage([\"CompileCsdText\", csd]);\n        });\n        let result = await promise;\n        // this.message_callback(\"[\" + window.performance.now() + \" CompileCsdText resolved with: \" + result + \".]\\n\");\n        return result;\n    };\n    async CompileOrc(orc) {\n        // this.message_callback(\"[\" + window.performance.now() + \" CompileOrc.]\\n\");\n        let promise = new Promise((resolve, reject) => {\n            // Not exactly intuitive!\n            this.resolveCompileOrc = resolve;\n            this.port.postMessage([\"CompileOrc\", orc]);\n        });\n        let result = await promise;\n        // this.message_callback(\"[\" + window.performance.now() + \" CompileOrc resolved with: \" + result + \".]\\n\");\n        return result;\n    };\n    async compileOrc(orc) {\n        // this.message_callback(\"[\" + window.performance.now() + \" CompileOrc.]\\n\");\n        let promise = new Promise((resolve, reject) => {\n            // Not exactly intuitive!\n            this.resolveCompileOrc = resolve;\n            this.port.postMessage([\"CompileOrc\", orc]);\n        });\n        let result = await promise;\n        // this.message_callback(\"[\" + window.performance.now() + \" CompileOrc resolved with: \" + result + \".]\\n\");\n        return result;\n    };\n    Destroy() {\n        this.port.postMessage([\"Destroy\"]);\n    };\n    destroy() {\n        this.Destroy();\n    };\n    EvalCode(code) {\n        this.port.postMessage([\"EvalCode\", code]);\n    };\n    evalCode(code) {\n        this.EvalCode(code);\n    };\n    Get0dBFS() {\n        this.port.postMessage([\"Get0dBFS\"]);\n    };\n    get0dBFS() {\n        this.Get0dBFS();\n    }\n    GetAPIVersion() {\n        this.port.postMessage([\"GetAPIVersion\"]);\n    };\n    getAPIVersion() {\n        this.GetAPIVersion();\n    };\n    async GetControlChannel(name) {\n        // this.message_callback(\"[\" + window.performance.now() + \" GetControlChannel.]\\n\");\n        let promise = new Promise((resolve, reject) => {\n            // Not exactly intuitive!\n            this.resolveGetControlChannel = resolve;\n            this.port.postMessage([\"GetControlChannel\", name]);\n        });\n        let result = await promise;\n        // this.message_callback(\"[\" + window.performance.now() + \" GetControlChannel resolved with: \" + result + \".]\\n\");\n        return result;    \n    };\n    async getControlChannel(name) {\n        this.GetControlChannel(name);\n    };\n    async GetFileData(filename) {\n        // this.message_callback(\"[\" + window.performance.now() + \" GetControlChannel.]\\n\");\n        let promise = new Promise((resolve, reject) => {\n            // Not exactly intuitive!\n            this.resolveGetFileData = resolve;\n            this.port.postMessage([\"GetFileData\", filename]);\n        });\n        let result = await promise;\n        // this.message_callback(\"[\" + window.performance.now() + \" GetControlChannel resolved with: \" + result + \".]\\n\");\n        return result;    \n    };\n    async getFileData(name) {\n        this.GetFileData(name);\n    };\n    GetCurrentTimeSamples() {\n        this.port.postMessage([\"GetCurrentTimeSamples\"]);\n    };\n    getCurrentTimeSamples() {\n        this.GetCurrentTimeSamples();\n    };\n    GetEnv(name) {\n        this.port.postMessage([\"GetEnv\", name]);\n    };\n    getEnv(name) {\n        this.GetEnv();\n    };\n    GetInputName() {\n        this.port.postMessage([\"GetInputName\"]);\n    };\n    getInputName() {\n        this.GetInputName();\n    };\n    GetKsmps() {\n        this.port.postMessage([\"GetKsmps\"]);\n    };\n    getKsmps() {\n        this.GetKsmps();\n    };\n    GetNchnls() {\n        this.port.postMessage([\"GetNchnls\"]);\n    };\n    getNchnls() {\n        this.GetNchnls();\n    };\n    GetNchnlsInput() {\n        this.port.postMessage([\"GetNchnlsInput\"]);\n    };\n    getNchnlsInput() {\n        this.GetNchnlsInput();\n    };\n    GetOutputName() {\n        this.port.postMessage([\"GetOutputName\"]);\n    };\n    getOutputName() {\n        this.GetOutputName();\n    };\n    GetScoreOffsetSeconds() {\n        this.port.postMessage([\"GetScoreOffsetSeconds\"]);\n    };\n    getScoreOffsetSeconds() {\n        this.GetScoreOffsetSeconds();\n    };\n    async GetScoreTime() {\n        // this.message_callback(\"[\" + window.performance.now() + \" GetScoreTime.]\\n\");\n        let promise = new Promise((resolve, reject) => {\n            // Not exactly intuitive!\n            this.resolveGetScoreTime = resolve;\n            this.port.postMessage([\"GetScoreTime\"]);\n        });\n        let result = await promise;\n        // this.message_callback(\"[\" + window.performance.now() + \" GetScoreTime resolved with: \" + result + \".]\\n\");\n        return result;\n    };\n    async getScoreTime() {\n        this.GetScoreTime();\n    };\n    GetSr() {\n        this.port.postMessage([\"GetSr\"]);\n    };\n    getSr() {\n        this.GetSr();\n    };\n    GetStringChannel(name) {\n        this.port.postMessage([\"GetStringChannel\", name]);\n    };\n    getStringChannel(name) {\n        this.GetStringChannel();\n    };\n    GetVersion() {\n        this.port.postMessage([\"GetVersion\"]);\n    };\n    getVersion() {\n        this.GetVersion();\n    };\n    InputMessage(text) {\n        this.port.postMessage([\"InputMessage\", text]);\n    };\n    inputMessage(text) {\n        this.InputMessage(text);\n    };\n    async IsPlaying() {\n        // this.message_callback(\"[\" + window.performance.now() + \" IsPlaying.]\\n\");\n        let promise = new Promise((resolve, reject) => {\n            // Not exactly intuitive!\n            this.resolveIsPlaying = resolve;\n            this.port.postMessage([\"IsPlaying\"]);\n        });\n        let result = await promise;\n        // this.message_callback(\"[\" + window.performance.now() + \" IsPlaying resolved with: \" + result + \".]\\n\");\n        return result;\n    };\n    isPlaying() {\n        this.IsPlaying();\n    };\n    IsScorePending() {\n        this.port.postMessage([\"IsScorePending\"]);\n    };\n    isScorePending() {\n        this.IsScorePending();\n    };\n    KillInstance(p1, insname, mode, release) {\n        this.port.postMessage([\"KillInstance\", p1, insname, mode, release]);\n    };\n    killInstance(p1, insname, mode, release) {\n        this.KillInstance(p1, insname, mode, release);\n    };\n    Message(text) {\n        this.port.postMessage([\"Message\", text]);\n    };\n    message(text) {\n        this.Message(text);\n    };\n    Perform() {\n        // this.message_callback(\"[\" + window.performance.now() + \" Perform.]\\n\");\n        this.port.postMessage([\"Perform\"]);\n    };\n    perform() {\n        this.Perform();\n    };\n    /**\n     * Because AudioWorklet messages are asynchronous, a sequence \n     * of method calls cannot be guaranteed to execute in proper order. \n     * Hence, this helper.\n     */\n    PerformCsd(options, csd) {\n        this.port.postMessage([\"PerformCsd\", options, csd]);\n    }\n    performCsd(options, csd) {\n        this.PerformCsd(options, csd);\n    };\n    /**\n     * Because AudioWorklet messages are asynchronous, a sequence \n     * of method calls cannot be guaranteed to execute in proper order. \n     * Hence, this helper.\n     */\n    PerformOrc(options, orc, sco) {\n        this.port.postMessage([\"PerformOrc\", options, orc, sco]);\n    };\n    performOrc(options, orc, sco) {\n        this.PerformOrc(options, orc, sco);\n    };\n    async ReadScore(score) {\n        // this.message_callback(\"[\" + window.performance.now() + \" ReadScore.]\\n\");\n        let promise = new Promise((resolve, reject) => {\n            // Not exactly intuitive!\n            this.resolveReadScore = resolve;\n            this.port.postMessage([\"ReadScore\", score]);\n        });\n        let result = await promise;\n        // this.message_callback(\"[\" + window.performance.now() + \" ReadScore resolved with: \" + result + \".]\\n\");\n        return result;\n    };\n    async readScore(score) {\n        // this.message_callback(\"[\" + window.performance.now() + \" ReadScore.]\\n\");\n        let promise = new Promise((resolve, reject) => {\n            // Not exactly intuitive!\n            this.resolveReadScore = resolve;\n            this.port.postMessage([\"ReadScore\", score]);\n        });\n        let result = await promise;\n        // this.message_callback(\"[\" + window.performance.now() + \" ReadScore resolved with: \" + result + \".]\\n\");\n        return result;\n    }\n    async Reset() {\n        // this.message_callback(\"[\" + window.performance.now() + \" Reset.]\\n\");\n        let promise = new Promise((resolve, reject) => {\n            // Not exactly intuitive!\n            this.resolveReset = resolve;\n            this.port.postMessage([\"Reset\"]);\n        });\n        await promise;\n        // this.message_callback(\"[\" + window.performance.now() + \" Reset resolved.]\\n\");\n    };\n    async reset() {\n        // this.message_callback(\"[\" + window.performance.now() + \" Reset.]\\n\");\n        let promise = new Promise((resolve, reject) => {\n            // Not exactly intuitive!\n            this.resolveReset = resolve;\n            this.port.postMessage([\"Reset\"]);\n        });\n        await promise;\n        // this.message_callback(\"[\" + window.performance.now() + \" Reset resolved.]\\n\");\n    };\n    RewindScore() {\n        this.port.postMessage([\"RewindScore\"]);\n    };\n    SetControlChannel(name, value) {\n        this.port.postMessage([\"SetControlChannel\", name, value]);\n    };\n    SetGlobalEnv(name, value) {\n        this.port.postMessage([\"SetGlobalEnv\", name, value]);\n    };\n    SetInput(name) {\n        this.input = name;\n        this.port.postMessage([\"SetInput\", name]);\n    };\n    SetMessageCallback(message_callback_) {\n        this.message_callback = message_callback_;\n    }\n    SetOption(option) {\n        if (option.startsWith(\"-odac\")) {\n            this.output = option.substr(2);\n        }\n        if (option.startsWith(\"-iadc\")) {\n            this.input = option.substr(2);\n        }\n        this.port.postMessage([\"SetOption\", option]);\n    };\n    SetOutput(name, type, format) {\n        this.output = name;\n        this.port.postMessage([\"SetOutput\", name, type, format]);\n    };\n    SetScoreOffsetSeconds(seconds) {\n        this.port.postMessage([\"SetScoreOffsetSeconds\", seconds]);\n    };\n    SetScorePending(is_pending) {\n        this.port.postMessage([\"SetScorePending\", is_pending]);\n    };\n    SetStringChannel(name, value) {\n        this.port.postMessage([\"SetStringChannel\", name, value]);\n    };\n    /**\n     * Starts the Csound performance with or without any connection to the \n     * Web Audio signal flow graph. Such connections may be created in the \n     * usual manner for constructing Web Audio graphs, either before, or \n     * after, calling StartNode.\n     */\n    StartNode() {\n        // this.message_callback(\"[\" + window.performance.now() + \" StartNode.]\\n\");\n        try {\n            this.port.postMessage([\"Start\"]);\n            this.is_playing = true;\n            this.message_callback(\"is_playing...\\n\");\n        } catch (e) {\n            this.message_callback(e);\n        }\n    }\n    startNode() {\n        this.StartNode();\n    }\n    /**\n     * First connects to the default WebAudio output and the WebAudio \n     * context's media source input, if it exists, and the MIDI input, \n     * if it exists, then starts the Csound performance. Wiring into the Web \n     * Audio graph is up here in the upper half, wiring within Csound is down \n     * in the lower half.\n     */\n    async Start() {\n        // this.message_callback(\"[\" + window.performance.now() + \" Start.]\\n\");\n        try {\n            let device_list = await navigator.mediaDevices.enumerateDevices();\n            var message_callback_ = this.message_callback;\n            var index = 0;\n            var input_connected = false;\n            var print_device = function(device) {\n                message_callback_(\"mediaDevices: \" + index + \" \" + device.kind + \": \" + device.label + \"\\n\");\n                index++;\n            };     \n            device_list.forEach(print_device);\n            this.message_callback(\"WebAudio frames per second:         \" +  this.context.sampleRate + \"\\n\");\n            this.message_callback(\"WebAudio maximum output channels:   \" +  this.context.destination.maxChannelCount + \"\\n\");\n            this.connect(this.context.destination);\n            if (navigator.requestMIDIAccess) {\n              let midi_access = await navigator.requestMIDIAccess({sysex:false});\n              const inputs = midi_access.inputs.values();\n              let thus = this;\n              for (let entry of midi_access.inputs) {\n                  const midi_input = entry[1];\n                  message_callback_(\"MIDI port: type: \" + midi_input.type + \"  manufacturer: \" + midi_input.manufacturer + \" name: \" + midi_input.name +\n                      \" version: \" + midi_input.version + \"\\n\");\n                  // Using the MessagePort for this is probably not good enough.\n                  midi_input.onmidimessage = function(event) {\n                      console.log(event, event.data[0], event.data[1], event.data[2]);\n                      thus.port.postMessage([\"MidiEvent\", event.data[0], event.data[1], event.data[2]]);\n                  };\n              }\n              for (let entry of midi_access.outputs) {\n                  var port_ = entry[1];\n                  message_callback_( \"MIDI port: type: \" + port_.type + \" manufacturer: \" + port_.manufacturer + \" name: \" + port_.name +\n                    \" version: \" + port_.version + \"\\n\");\n              }\n            }\n            // Try to obtain the Web browser audio input, if available.\n            // Not to be confused with any other audio input interfaces on the \n            // computer, which are inputs in the device list above!\n            try {\n                this.message_callback(\"Trying to open browser audio input...\\n\")\n                let stream = await navigator.mediaDevices.getUserMedia({audio: true});\n                this.userMediaAudioInputNode = this.context.createMediaStreamSource(stream);\n                this.message_callback(\"WebAudio UserMedia outputs:         \" +  this.userMediaAudioInputNode.numberOfOutputs + \"\\n\");\n                this.userMediaAudioInputNode.connect(this);\n                this.message_callback(\"Audio input initialized.\\n\");\n            } catch (e) {\n                this.message_callback(e + \"\\n\");\n            }\n            this.port.postMessage([\"Start\"]);\n            this.is_playing = true;\n            this.message_callback(\"is_playing...\\n\");\n        } catch (e) {\n            this.message_callback(e);\n        }\n    }\n    async start() {\n        this.Start();\n    };\n    async Stop() {\n        this.message_callback(\"[\" + window.performance.now() + \" Stop.]\\n\");\n        let promise = new Promise((resolve, reject) => {\n            // Not exactly intuitive!\n            this.resolveStop = resolve;\n            this.port.postMessage([\"Stop\"]);\n            if (this.userMediaAudioInputNode !== null) {\n                ///this.userMediaAudioInputNode.stop();\n                this.userMediaAudioInputNode.disconnect(this);\n            }\n            this.disconnect();\n            this.reset_();\n        });\n        await promise;\n        this.message_callback(\"[\" + window.performance.now() + \" Stop resolved.]\\n\");\n    };\n    async stop() {\n        this.message_callback(\"[\" + window.performance.now() + \" Stop.]\\n\");\n        let promise = new Promise((resolve, reject) => {\n            // Not exactly intuitive!\n            this.resolveStop = resolve;\n            this.port.postMessage([\"Stop\"]);\n            if (this.userMediaAudioInputNode !== null) {\n                ///this.userMediaAudioInputNode.stop();\n                this.userMediaAudioInputNode.disconnect(this);\n            }\n            this.disconnect();\n            this.reset_();\n        });\n        await promise;\n        this.message_callback(\"[\" + window.performance.now() + \" Stop resolved.]\\n\");\n    };\n    TableGet(number, index) {\n        this.port.postMessage([\"TableGet\", number, index]);\n    };\n    tableGet(number, index) {\n        this.TableGet(number, index);\n    };\n    TableLength(number) {\n        this.port.postMessage([\"TableLength\", number]);\n    };\n    tableLength(number) {\n        this.TableLength(number);\n    };\n    TableSet(number, index, value) {\n        this.port.postMessage([\"TableSet\", index, value]);\n    };   \n    tableSet(number, index, value) {\n        this.TableSet(number, index, value);\n    };\n}\n\n\n\n\n",
    "static": true,
    "longname": "/Users/michaelgogins/cloud-5/public/CsoundAudioNode.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "class",
    "name": "CsoundAudioNode",
    "memberof": "public/CsoundAudioNode.js",
    "static": true,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode",
    "access": "public",
    "export": false,
    "importPath": "./public/CsoundAudioNode.js",
    "importStyle": null,
    "description": "C S O U N D\n\nL I C E N S E\n\nThis software is free software; you can redistribute it and/or\nmodify it under the terms of the GNU Lesser General Public\nLicense as published by the Free Software Foundation; either\nversion 2.1 of the License, or (at your option) any later version.\n\nThis software is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU",
    "lineNumber": 19,
    "interface": false,
    "extends": [
      "AudioWorkletNode"
    ]
  },
  {
    "__docId__": 2,
    "kind": "method",
    "name": "resolveCleanup",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#resolveCleanup",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [
      {
        "name": "result",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3,
    "kind": "method",
    "name": "resolveCompileCsdText",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#resolveCompileCsdText",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "result",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 4,
    "kind": "method",
    "name": "resolveCompileOrc",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#resolveCompileOrc",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "result",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 5,
    "kind": "method",
    "name": "resolveGetControlChannel",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#resolveGetControlChannel",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [
      {
        "name": "result",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 6,
    "kind": "method",
    "name": "resolveGetFileData",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#resolveGetFileData",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [
      {
        "name": "result",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 7,
    "kind": "method",
    "name": "resolveReadScore",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#resolveReadScore",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "result",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 8,
    "kind": "method",
    "name": "resolveReset",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#resolveReset",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 9,
    "kind": "method",
    "name": "resolveStop",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#resolveStop",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 10,
    "kind": "method",
    "name": "onMessage",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#onMessage",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 11,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 98,
    "undocument": true
  },
  {
    "__docId__": 12,
    "kind": "member",
    "name": "message_callback",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#message_callback",
    "access": "public",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 13,
    "kind": "member",
    "name": "CompileCsdTextPromise",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#CompileCsdTextPromise",
    "access": "public",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 14,
    "kind": "member",
    "name": "CompileOrcPromise",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#CompileOrcPromise",
    "access": "public",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 15,
    "kind": "member",
    "name": "IsPlayingPromise",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#IsPlayingPromise",
    "access": "public",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 16,
    "kind": "member",
    "name": "StopPromise",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#StopPromise",
    "access": "public",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 17,
    "kind": "member",
    "name": "CleanupPromise",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#CleanupPromise",
    "access": "public",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 18,
    "kind": "member",
    "name": "GetFileDataPromise",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#GetFileDataPromise",
    "access": "public",
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 19,
    "kind": "member",
    "name": "GetScoreTimePromise",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#GetScoreTimePromise",
    "access": "public",
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 20,
    "kind": "member",
    "name": "GetGetControlChannelPromise",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#GetGetControlChannelPromise",
    "access": "public",
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 21,
    "kind": "member",
    "name": "ReadScorePromise",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#ReadScorePromise",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 22,
    "kind": "member",
    "name": "ResetPromise",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#ResetPromise",
    "access": "public",
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 23,
    "kind": "method",
    "name": "reset_",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#reset_",
    "access": "public",
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 24,
    "kind": "member",
    "name": "is_playing",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#is_playing",
    "access": "public",
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 25,
    "kind": "member",
    "name": "is_realtime",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#is_realtime",
    "access": "public",
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 26,
    "kind": "member",
    "name": "userMediaAudioInputNode",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#userMediaAudioInputNode",
    "access": "public",
    "description": null,
    "lineNumber": 123,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 27,
    "kind": "member",
    "name": "input",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#input",
    "access": "public",
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 28,
    "kind": "member",
    "name": "output",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#output",
    "access": "public",
    "description": null,
    "lineNumber": 125,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 29,
    "kind": "method",
    "name": "Cleanup",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#Cleanup",
    "access": "public",
    "description": null,
    "lineNumber": 134,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 31,
    "kind": "method",
    "name": "cleanup",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#cleanup",
    "access": "public",
    "description": null,
    "lineNumber": 145,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 33,
    "kind": "method",
    "name": "CompileCsd",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#CompileCsd",
    "access": "public",
    "description": null,
    "lineNumber": 156,
    "undocument": true,
    "params": [
      {
        "name": "filename",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 34,
    "kind": "method",
    "name": "compileCsd",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#compileCsd",
    "access": "public",
    "description": null,
    "lineNumber": 159,
    "undocument": true,
    "params": [
      {
        "name": "filename",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 35,
    "kind": "method",
    "name": "CompileCsdText",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#CompileCsdText",
    "access": "public",
    "description": null,
    "lineNumber": 162,
    "undocument": true,
    "params": [
      {
        "name": "csd",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 37,
    "kind": "method",
    "name": "compileCsdText",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#compileCsdText",
    "access": "public",
    "description": null,
    "lineNumber": 173,
    "undocument": true,
    "params": [
      {
        "name": "csd",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 39,
    "kind": "method",
    "name": "CompileOrc",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#CompileOrc",
    "access": "public",
    "description": null,
    "lineNumber": 184,
    "undocument": true,
    "params": [
      {
        "name": "orc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 41,
    "kind": "method",
    "name": "compileOrc",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#compileOrc",
    "access": "public",
    "description": null,
    "lineNumber": 195,
    "undocument": true,
    "params": [
      {
        "name": "orc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 43,
    "kind": "method",
    "name": "Destroy",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#Destroy",
    "access": "public",
    "description": null,
    "lineNumber": 206,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 44,
    "kind": "method",
    "name": "destroy",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 209,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 45,
    "kind": "method",
    "name": "EvalCode",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#EvalCode",
    "access": "public",
    "description": null,
    "lineNumber": 212,
    "undocument": true,
    "params": [
      {
        "name": "code",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 46,
    "kind": "method",
    "name": "evalCode",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#evalCode",
    "access": "public",
    "description": null,
    "lineNumber": 215,
    "undocument": true,
    "params": [
      {
        "name": "code",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 47,
    "kind": "method",
    "name": "Get0dBFS",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#Get0dBFS",
    "access": "public",
    "description": null,
    "lineNumber": 218,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 48,
    "kind": "method",
    "name": "get0dBFS",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#get0dBFS",
    "access": "public",
    "description": null,
    "lineNumber": 221,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 49,
    "kind": "method",
    "name": "GetAPIVersion",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#GetAPIVersion",
    "access": "public",
    "description": null,
    "lineNumber": 224,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 50,
    "kind": "method",
    "name": "getAPIVersion",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#getAPIVersion",
    "access": "public",
    "description": null,
    "lineNumber": 227,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 51,
    "kind": "method",
    "name": "GetControlChannel",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#GetControlChannel",
    "access": "public",
    "description": null,
    "lineNumber": 230,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "method",
    "name": "getControlChannel",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#getControlChannel",
    "access": "public",
    "description": null,
    "lineNumber": 241,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 54,
    "kind": "method",
    "name": "GetFileData",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#GetFileData",
    "access": "public",
    "description": null,
    "lineNumber": 244,
    "undocument": true,
    "params": [
      {
        "name": "filename",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "getFileData",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#getFileData",
    "access": "public",
    "description": null,
    "lineNumber": 255,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "GetCurrentTimeSamples",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#GetCurrentTimeSamples",
    "access": "public",
    "description": null,
    "lineNumber": 258,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "getCurrentTimeSamples",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#getCurrentTimeSamples",
    "access": "public",
    "description": null,
    "lineNumber": 261,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "GetEnv",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#GetEnv",
    "access": "public",
    "description": null,
    "lineNumber": 264,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "getEnv",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#getEnv",
    "access": "public",
    "description": null,
    "lineNumber": 267,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "GetInputName",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#GetInputName",
    "access": "public",
    "description": null,
    "lineNumber": 270,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "getInputName",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#getInputName",
    "access": "public",
    "description": null,
    "lineNumber": 273,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "GetKsmps",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#GetKsmps",
    "access": "public",
    "description": null,
    "lineNumber": 276,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "getKsmps",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#getKsmps",
    "access": "public",
    "description": null,
    "lineNumber": 279,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "GetNchnls",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#GetNchnls",
    "access": "public",
    "description": null,
    "lineNumber": 282,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "getNchnls",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#getNchnls",
    "access": "public",
    "description": null,
    "lineNumber": 285,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "GetNchnlsInput",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#GetNchnlsInput",
    "access": "public",
    "description": null,
    "lineNumber": 288,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "getNchnlsInput",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#getNchnlsInput",
    "access": "public",
    "description": null,
    "lineNumber": 291,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "GetOutputName",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#GetOutputName",
    "access": "public",
    "description": null,
    "lineNumber": 294,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "getOutputName",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#getOutputName",
    "access": "public",
    "description": null,
    "lineNumber": 297,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "GetScoreOffsetSeconds",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#GetScoreOffsetSeconds",
    "access": "public",
    "description": null,
    "lineNumber": 300,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "getScoreOffsetSeconds",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#getScoreOffsetSeconds",
    "access": "public",
    "description": null,
    "lineNumber": 303,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "GetScoreTime",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#GetScoreTime",
    "access": "public",
    "description": null,
    "lineNumber": 306,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "member",
    "name": "resolveGetScoreTime",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#resolveGetScoreTime",
    "access": "public",
    "description": null,
    "lineNumber": 310,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "getScoreTime",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#getScoreTime",
    "access": "public",
    "description": null,
    "lineNumber": 317,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "GetSr",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#GetSr",
    "access": "public",
    "description": null,
    "lineNumber": 320,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "getSr",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#getSr",
    "access": "public",
    "description": null,
    "lineNumber": 323,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "GetStringChannel",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#GetStringChannel",
    "access": "public",
    "description": null,
    "lineNumber": 326,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "getStringChannel",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#getStringChannel",
    "access": "public",
    "description": null,
    "lineNumber": 329,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "GetVersion",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#GetVersion",
    "access": "public",
    "description": null,
    "lineNumber": 332,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "getVersion",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#getVersion",
    "access": "public",
    "description": null,
    "lineNumber": 335,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "InputMessage",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#InputMessage",
    "access": "public",
    "description": null,
    "lineNumber": 338,
    "undocument": true,
    "params": [
      {
        "name": "text",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "inputMessage",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#inputMessage",
    "access": "public",
    "description": null,
    "lineNumber": 341,
    "undocument": true,
    "params": [
      {
        "name": "text",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "IsPlaying",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#IsPlaying",
    "access": "public",
    "description": null,
    "lineNumber": 344,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "member",
    "name": "resolveIsPlaying",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#resolveIsPlaying",
    "access": "public",
    "description": null,
    "lineNumber": 348,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "isPlaying",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#isPlaying",
    "access": "public",
    "description": null,
    "lineNumber": 355,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "IsScorePending",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#IsScorePending",
    "access": "public",
    "description": null,
    "lineNumber": 358,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "isScorePending",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#isScorePending",
    "access": "public",
    "description": null,
    "lineNumber": 361,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "KillInstance",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#KillInstance",
    "access": "public",
    "description": null,
    "lineNumber": 364,
    "undocument": true,
    "params": [
      {
        "name": "p1",
        "types": [
          "*"
        ]
      },
      {
        "name": "insname",
        "types": [
          "*"
        ]
      },
      {
        "name": "mode",
        "types": [
          "*"
        ]
      },
      {
        "name": "release",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "killInstance",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#killInstance",
    "access": "public",
    "description": null,
    "lineNumber": 367,
    "undocument": true,
    "params": [
      {
        "name": "p1",
        "types": [
          "*"
        ]
      },
      {
        "name": "insname",
        "types": [
          "*"
        ]
      },
      {
        "name": "mode",
        "types": [
          "*"
        ]
      },
      {
        "name": "release",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "Message",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#Message",
    "access": "public",
    "description": null,
    "lineNumber": 370,
    "undocument": true,
    "params": [
      {
        "name": "text",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "message",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#message",
    "access": "public",
    "description": null,
    "lineNumber": 373,
    "undocument": true,
    "params": [
      {
        "name": "text",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "Perform",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#Perform",
    "access": "public",
    "description": null,
    "lineNumber": 376,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "perform",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#perform",
    "access": "public",
    "description": null,
    "lineNumber": 380,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "PerformCsd",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#PerformCsd",
    "access": "public",
    "description": "Because AudioWorklet messages are asynchronous, a sequence \nof method calls cannot be guaranteed to execute in proper order. \nHence, this helper.",
    "lineNumber": 388,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      },
      {
        "name": "csd",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "performCsd",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#performCsd",
    "access": "public",
    "description": null,
    "lineNumber": 391,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      },
      {
        "name": "csd",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "PerformOrc",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#PerformOrc",
    "access": "public",
    "description": "Because AudioWorklet messages are asynchronous, a sequence \nof method calls cannot be guaranteed to execute in proper order. \nHence, this helper.",
    "lineNumber": 399,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      },
      {
        "name": "orc",
        "types": [
          "*"
        ]
      },
      {
        "name": "sco",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "performOrc",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#performOrc",
    "access": "public",
    "description": null,
    "lineNumber": 402,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      },
      {
        "name": "orc",
        "types": [
          "*"
        ]
      },
      {
        "name": "sco",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "ReadScore",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#ReadScore",
    "access": "public",
    "description": null,
    "lineNumber": 405,
    "undocument": true,
    "params": [
      {
        "name": "score",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "readScore",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#readScore",
    "access": "public",
    "description": null,
    "lineNumber": 416,
    "undocument": true,
    "params": [
      {
        "name": "score",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "Reset",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#Reset",
    "access": "public",
    "description": null,
    "lineNumber": 427,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "reset",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#reset",
    "access": "public",
    "description": null,
    "lineNumber": 437,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "RewindScore",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#RewindScore",
    "access": "public",
    "description": null,
    "lineNumber": 447,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "SetControlChannel",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#SetControlChannel",
    "access": "public",
    "description": null,
    "lineNumber": 450,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "SetGlobalEnv",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#SetGlobalEnv",
    "access": "public",
    "description": null,
    "lineNumber": 453,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "SetInput",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#SetInput",
    "access": "public",
    "description": null,
    "lineNumber": 456,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "SetMessageCallback",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#SetMessageCallback",
    "access": "public",
    "description": null,
    "lineNumber": 460,
    "undocument": true,
    "params": [
      {
        "name": "message_callback_",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "SetOption",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#SetOption",
    "access": "public",
    "description": null,
    "lineNumber": 463,
    "undocument": true,
    "params": [
      {
        "name": "option",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "SetOutput",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#SetOutput",
    "access": "public",
    "description": null,
    "lineNumber": 472,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "format",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "SetScoreOffsetSeconds",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#SetScoreOffsetSeconds",
    "access": "public",
    "description": null,
    "lineNumber": 476,
    "undocument": true,
    "params": [
      {
        "name": "seconds",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "SetScorePending",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#SetScorePending",
    "access": "public",
    "description": null,
    "lineNumber": 479,
    "undocument": true,
    "params": [
      {
        "name": "is_pending",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "SetStringChannel",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#SetStringChannel",
    "access": "public",
    "description": null,
    "lineNumber": 482,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "StartNode",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#StartNode",
    "access": "public",
    "description": "Starts the Csound performance with or without any connection to the \nWeb Audio signal flow graph. Such connections may be created in the \nusual manner for constructing Web Audio graphs, either before, or \nafter, calling StartNode.",
    "lineNumber": 491,
    "params": [],
    "return": null
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "startNode",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#startNode",
    "access": "public",
    "description": null,
    "lineNumber": 501,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "Start",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#Start",
    "access": "public",
    "description": "First connects to the default WebAudio output and the WebAudio \ncontext's media source input, if it exists, and the MIDI input, \nif it exists, then starts the Csound performance. Wiring into the Web \nAudio graph is up here in the upper half, wiring within Csound is down \nin the lower half.",
    "lineNumber": 511,
    "params": [],
    "return": null
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "start",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#start",
    "access": "public",
    "description": null,
    "lineNumber": 566,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "Stop",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#Stop",
    "access": "public",
    "description": null,
    "lineNumber": 569,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "stop",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#stop",
    "access": "public",
    "description": null,
    "lineNumber": 585,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "TableGet",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#TableGet",
    "access": "public",
    "description": null,
    "lineNumber": 601,
    "undocument": true,
    "params": [
      {
        "name": "number",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "tableGet",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#tableGet",
    "access": "public",
    "description": null,
    "lineNumber": 604,
    "undocument": true,
    "params": [
      {
        "name": "number",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "TableLength",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#TableLength",
    "access": "public",
    "description": null,
    "lineNumber": 607,
    "undocument": true,
    "params": [
      {
        "name": "number",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "tableLength",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#tableLength",
    "access": "public",
    "description": null,
    "lineNumber": 610,
    "undocument": true,
    "params": [
      {
        "name": "number",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "TableSet",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#TableSet",
    "access": "public",
    "description": null,
    "lineNumber": 613,
    "undocument": true,
    "params": [
      {
        "name": "number",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "tableSet",
    "memberof": "public/CsoundAudioNode.js~CsoundAudioNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/CsoundAudioNode.js~CsoundAudioNode#tableSet",
    "access": "public",
    "description": null,
    "lineNumber": 616,
    "undocument": true,
    "params": [
      {
        "name": "number",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 139,
    "kind": "file",
    "name": "public/Silencio.js",
    "content": "/**\nS I L E N C I O\n\nCopyright (C) 2014 by Michael Gogins\n\nThis software is licensed under the terms of the\nGNU Lesser General Public License\n\nPart of Silencio, an HTML5 algorithmic music composition library for Csound.\n\nTO DO\n\n--  Implement various scales found in 20th and 21st century harmony\n    along with 'splitting' and 'merging' operations.\n\n--  Implement tendency masks.\n\n--  Implement Xenakis sieves.\n\nDEPENDENCIES\n\nfs\nthree.js\nTrackballControls.js\nsprintf.js\ntinycolor.js\n\nREGARDING BLUE\n\nSteven Yi's Java program blue, for composing with Csound, uses the Nashorn\nJavaScript runtime and does not support the DOM or other objects found in a\nWeb browser's JavaScript context. To use Silencio in blue:\n\n--  Load sprintf.js and tinycolor.js first.\n--  The following polyfill is enough to run some things.\n\n/**\n * /page Silencio\n *\n * Silencio is a port to JavaScript of parts of CsoundAC, and has taken on a\n * life of its own, particularly for the production of interfactive pieces\n * with user interfaces, and visual music.\n *\n */\nif (typeof console === 'undefined') {\n    var global = this;\n    var window = this;\n    var process = {env: {}};\n    var console = {};\n    console.debug = print;\n    console.warn = print;\n    console.info = print;\n}\n\n(function() {\n    /**\n    A Score is a matrix in which the rows are Events.\n\n    An Event is a homogeneous vector with the following dimensions:\n\n     1 Time in seconds from start of performance.\n     2 Duration in seconds, -1 is \"indefinite.\"\n     3 MIDI status (only the most significant nybble, e.g. 144 for 'NOTE ON').\n     4 MIDI channel (any real number, fractional part ties events,\n       negative is 'NOTE OFF').\n     5 MIDI key number from 0 to 127, 60 is middle C (a real number).\n     6 MIDI velocity from 0 to 127, 80 is mezzo-forte (a real number).\n     7 x or depth, 0 is the origin.\n     8 y or pan, 0 is the origin.\n     9 z or height, 0 is the origin.\n    10 Phase, in radians.\n    11 Homogeneity, normally always 1.\n\n    NOTE: ECMASCRIPT 5 doesn't support inheritance from Array\n    in a clean and complete way, so we don't even try.\n    */\n\n    /**\n     * Deserialize the file, which must contain JSON, and return either\n     * the JSON or the parsed object.\n     * If the pathname is undefined, then use the location + \".json\".\n     * Returns the object for success, or null for failure.\n     */\n    var restoreFromLocalFile = function(toObject, filepath) {\n        try {\n            if (typeof filepath === 'undefined') {\n                filepath = window.location.pathname.slice(1);\n                filepath = fs.realpathSync(filepath);\n                filepath = filepath + '.json';\n            }\n            console.info('loading from filepath: ' + filepath);\n            var json = fs.readFileSync(filepath);\n            console.info('json: ' + json);\n            if (toObject === true) {\n                var parsed_object = JSON.parse(json);\n                console.info('parsed object: ' + parsed_object);\n                return parsed_object;\n            }\n            return json;\n        } catch (err) {\n            console.info(err.message);\n            return null;\n        }\n    };\n\n    /**\n     * Translate the object to JSON and save it on the local filesystem.\n     * If the object is already a JSON string, do not translate it.\n     * If the filepath is undefined, then use the location + \".json\";\n     * in this case, obviously, the location must be indeed be a local\n     * filepath. Returns true for success, and false for failure.\n     */\n    var saveToLocalFile = function(fromObject, object, filepath) {\n        try {\n            var json = null;\n            if (fromObject) {\n                json = JSON.stringify(object);\n            } else {\n                json = object;\n            }\n            if (typeof json === 'undefined') {\n                throw \"saveToLocalFile: json is undefined.\";\n            }\n            if (json === null || json === 'null') {\n                throw \"saveToLocalFile: json is null.\";\n            }\n            if (typeof filepath === 'undefined') {\n                filepath = window.location.pathname.slice(1);\n                filepath = fs.realpathSync(filepath);\n                filepath = filepath + '.json';\n            }\n            console.info('json: ' + json);\n            console.info('saving to filepath: ' + filepath);\n            fs.writeFileSync(filepath, json);\n            return true;\n        } catch (err) {\n            console.info(err.message);\n            return false;\n        }\n    };\n\n    /**\n     * Restore dat.gui parameters as JSON from:\n     * Local storage, if it exists (this happens in dat.gui itself); otherwise,\n     * from the local file system, if the file exists; otherwise,\n     * using the default parameters in JSON form.\n     * NOTE: 'load' element for dat.gui constructor is a JSON _object_,\n     * not a string.\n     */\n    var restoreDatGuiJson = function(default_parameters_json) {\n        var parameters_filesystem_json = Silencio.restoreFromLocalFile(false);\n        if (parameters_filesystem_json !== null && parameters_filesystem_json !== 'null') {\n            console.info('Restored dat.gui parameters from local filesystem: ' + parameters_filesystem_json);\n            return JSON.parse(parameters_filesystem_json);\n        } else {\n            console.info('Restored dat.gui parameters from default: ' + default_parameters_json);\n            return default_parameters_json;\n        }\n    };\n\n    /**\n     * Save the parameters object for dat.gui as JSON to the local file system.\n     * Returns true for success, and false for failure.\n     */\n    var saveDatGuiJson = function(gui) {\n        try {\n            var json = gui.getSaveObject();\n            console.info('typeof json:' + (typeof json));\n            saveToLocalFile(true, json);\n            return true;\n        } catch (err) {\n            console.info(err.message);\n            return false;\n        }\n    };\n\n    /**\n     * Parse the Csound orchestra for hints to create a user interface using\n     * nw.gui sliders; create that user interface in the HTML window; and create\n     * and compile a \"Controls\" instrument ro receive values from that user\n     * interface.\n     *\n     * The hints are in the form of special comments following global variable\n     * declarations associated with an instrument definition:\n     * g<x>_<instrname>_<variablename> init <default_value> ;|Instrument Name|Control Name|Minimum Valuie|Maximum Value|Increment|\n     */\n    var createNwSlider = function(line, window, nwfolder) {\n\n    };\n\n    var createNwUi = function(orc, csound, window) {\n        var channels = [];\n    };\n\n    function eq_epsilon(a, b) {\n        var epsilon_factor = 100 * Number.EPSILON;\n        if (Math.abs(a - b) > epsilon_factor) {\n            return false;\n        }\n        return true;\n    }\n\n    function lt_epsilon(a, b) {\n        if (eq_epsilon(a, b)) {\n            return false;\n        }\n        if (a < b) {\n            return true;\n        }\n        return false;\n    }\n\n    function le_epsilon(a, b) {\n        if (eq_epsilon(a, b)) {\n            return true;\n        }\n        if (a < b) {\n            return true;\n        }\n        return false;\n    }\n\n    function gt_epsilon(a, b) {\n        if (eq_epsilon(a, b)) {\n            return false;\n        }\n        if (a > b) {\n            return true;\n        }\n        return false;\n    }\n\n    function ge_epsilon(a, b) {\n        if (eq_epsilon(a, b)) {\n            return true;\n        }\n        if (a > b) {\n            return true;\n        }\n        return false;\n    }\n\n    function modulo(a, n) {\n        return ((a % n) + n) % n;\n    }\n\n    function Event() {\n        // ID collisions should be rare. IDs will be used e.g.\n        // in tieing notes or in working around Csound quirks\n        // with indefinite notes.\n        this.id = Math.random() / 2.0;\n        this.data = [0, 0, 144, 0, 0, 0, 0, 0, 0, 0, 1];\n        this.chord = null;\n        Object.defineProperty(this, \"time\", {\n            get: function() {\n                return this.data[0];\n            },\n            set: function(value) {\n                this.data[0] = value;\n            }\n        });\n        Object.defineProperty(this, \"duration\", {\n            get: function() {\n                return this.data[1];\n            },\n            set: function(value) {\n                this.data[1] = value;\n            }\n        });\n        Object.defineProperty(this, \"end\", {\n            get: function() {\n                return this.data[0] + this.data[1];\n            },\n            set: function(end_) {\n                var duration_ = end_ - this.data[0];\n                if (duration_ > 0) {\n                    this.data[1] = duration_;\n                } else {\n                    this.data[0] = this.data[0] + duration_;\n                    this.data[1] = -1 * duration_;\n                }\n            }\n        });\n        Object.defineProperty(this, \"status\", {\n            get: function() {\n                return this.data[2];\n            },\n            set: function(value) {\n                this.data[2] = value;\n            }\n        });\n        Object.defineProperty(this, \"channel\", {\n            get: function() {\n                return this.data[3];\n            },\n            set: function(value) {\n                this.data[3] = value;\n            }\n        });\n        Object.defineProperty(this, \"key\", {\n            get: function() {\n                return this.data[4];\n            },\n            set: function(value) {\n                this.data[4] = value;\n            }\n        });\n        Object.defineProperty(this, \"velocity\", {\n            get: function() {\n                return this.data[5];\n            },\n            set: function(value) {\n                this.data[5] = value;\n            }\n        });\n        Object.defineProperty(this, \"depth\", {\n            get: function() {\n                return this.data[6];\n            },\n            set: function(value) {\n                this.data[6] = value;\n            }\n        });\n        // Ambisonic left to right is the Y dimension!\n        Object.defineProperty(this, \"pan\", {\n            get: function() {\n                return this.data[7];\n            },\n            set: function(value) {\n                this.data[7] = value;\n            }\n        });\n        Object.defineProperty(this, \"heigth\", {\n            get: function() {\n                return this.data[8];\n            },\n            set: function(value) {\n                this.data[8] = value;\n            }\n        });\n        Object.defineProperty(this, \"phase\", {\n            get: function() {\n                return this.data[9];\n            },\n            set: function(value) {\n                this.data[9] = value;\n            }\n        });\n        Object.defineProperty(this, \"homogeneity\", {\n            get: function() {\n                return this.data[10];\n            },\n            set: function(value) {\n                this.data[10] = value;\n            }\n        });\n    }\n    Event.TIME = 0;\n    Event.DURATION = 1;\n    Event.STATUS = 2;\n    Event.CHANNEL = 3;\n    Event.KEY = 4;\n    Event.VELOCITY = 5;\n    Event.X = 6;\n    Event.Y = 7;\n    Event.Z = 8;\n    Event.DEPTH = 6;\n    Event.PAN = 7;\n    Event.HEIGHT = 8;\n    Event.PHASE = 9;\n    Event.HOMOGENEITY = 10;\n    Event.COUNT = 11;\n\n    Event.prototype.toString = function() {\n        var text = '';\n        for (var i = 0; i < this.data.length; i++) {\n            text = text.concat(' ', this.data[i].toFixed(6));\n        }\n        if (this.chord !== null && typeof this.chord !== 'undefined') {\n            text = text.concat(' ', this.chord.name());\n        }\n        text = text.concat('\\n');\n        return text;\n    };\n\n    /**\n     * Csound pfields are:\n     * p1 Instrument number\n     * p2 Time (seconds)\n     * p3 Duration (seconds)\n     * p4 MIDI key\n     * p5 MIDI velocity (roughly dBSPL)\n     * p6 Depth (spatial front to back)\n     * p7 Pan (spatial left to right)\n     * p8 Height (spatial bottom to top)\n     * p9 Phase (radians)\n     */\n    Event.prototype.toIStatement = function() {\n        var text = 'i';\n        let insno = this.data[3];// + this.id;\n        text = text.concat(' ', insno.toFixed(6)); // p1\n        text = text.concat(' ', this.data[0].toFixed(6)); // p2\n        text = text.concat(' ', this.data[1].toFixed(6)); // p3\n        text = text.concat(' ', this.data[4].toFixed(6)); // p4\n        text = text.concat(' ', this.data[5].toFixed(6)); // p5\n        text = text.concat(' ', this.data[6].toFixed(6)); // p6\n        text = text.concat(' ', this.data[7].toFixed(6)); // p7\n        text = text.concat(' ', this.data[8].toFixed(6)); // p8\n        text = text.concat(' ', this.data[9].toFixed(6)); // p9\n        text = text.concat('\\n');\n        return text;\n    };\n\n    /**\n     * For turning an event off; the default is with immediate effect,\n     * otherwise at the scheduled time.\n     */\n    Event.prototype.toDStatement = function(scheduled) {\n        var text = 'd';\n        text = text.concat(' ', this.data[3].toFixed(6)); // p1\n        if (typeof scheduled === 'undefined') {\n            text = text.concat(' ', '0'); // p2\n        } else {\n            text = text.concat(' ', scheduled.toFixed(6)); // p2\n        }\n        let insno = this.data[3];// + this.id;\n        text = text.concat(' ', Math.floor(insno.toFixed(6))); // p3\n        text = text.concat(' ', this.data[4].toFixed(6)); // p4\n        text = text.concat(' ', this.data[5].toFixed(6)); // p5\n        text = text.concat(' ', this.data[6].toFixed(6)); // p6\n        text = text.concat(' ', this.data[7].toFixed(6)); // p7\n        text = text.concat(' ', this.data[8].toFixed(6)); // p8\n        text = text.concat(' ', this.data[9].toFixed(6)); // p9\n        text = text.concat('\\n');\n        return text;\n    }\n\n    Event.prototype.toFomus = function() {\n        return 'note part ' + Math.floor(this.channel) + ' time ' + this.time * 2 + ' duration ' + this.duration * 2 + ' pitch ' + this.key + ' dynamic ' + this.velocity + ';';\n    };\n\n    Event.prototype.temper = function(tonesPerOctave) {\n        if (typeof tonesPerOctave === 'undefined') {\n            tonesPerOctave = 12;\n        }\n        var octave = this.key / 12;\n        var tone = Math.floor((octave * tonesPerOctave) + 0.5);\n        octave = tone / tonesPerOctave;\n        this.key = octave * 12;\n    };\n\n    Event.prototype.clone = function(clone_chord) {\n        if (typeof clone_chord === 'undefined') {\n            clone_chord = false;\n        }\n        other = new Event();\n        other.data = this.data.slice(0);\n        other.id = this.id;\n        if (clone_chord === true) {\n            other.chord = this.chord.clone();\n        } else {\n            other.chord = this.chord;\n        }\n        return other;\n    };\n\n    function Score() {\n        this.data = [];\n        this.minima = new Event();\n        this.maxima = new Event();\n        this.ranges = new Event();\n        this.context = null;\n        this.scene = null;\n        this.camera = null;\n        this.renderer = null;\n        this.controls = null;\n        this.score_cursor = null;\n        this.title = '';\n        this.composer = '';\n        this.names_for_instrument_numbers = {};\n    }\n\n    Score.prototype.add = function(p0_time, p1_duration, p2_status, p3_channel, p4_key, p5_velocity, p6_x, p7_y, p8_z, p9_phase, p10_homogeneity) {\n        var event = new Event();\n        for (var i = 0; i < event.data.length; i++) {\n            if (typeof arguments[i] !== 'undefined') {\n                event.data[i] = arguments[i];\n            }\n        }\n        this.data.push(event);\n    };\n\n    Score.prototype.append = function(event) {\n        this.data.push(event);\n    };\n\n    Score.prototype.append_score = function(score) {\n        for (var i = 0; i < score.data.length; i++) {\n            this.data.push(score.data[i]);\n        }\n    };\n\n    Score.prototype.clear = function() {\n        while (this.data.length > 0) {\n            this.data.pop();\n        }\n    };\n\n    Score.prototype.getDuration = function() {\n        this.sort();\n        this.findScale(0);\n        var duration = 0;\n        for (var i = 0; i < this.data.length; i++) {\n            var event = this.data[i];\n            if (i === 0) {\n                duration = event.end; //data[0] + event.data[1];\n            } else {\n                var currentDuration = event.end; //data[0] + event.data[1];\n                if (currentDuration > duration) {\n                    duration = currentDuration;\n                }\n            }\n        }\n        return duration;\n    };\n\n    Score.prototype.log = function(what) {\n        if (typeof what === 'undefined') {\n            what = '';\n        } else {\n            what = what + ': ';\n        }\n        for (var i = 0; i < this.data.length; i++) {\n            var event = this.data[i];\n            console.info(what + event.toString());\n        }\n    };\n\n    Score.prototype.getEnd = function() {\n        var end = null;\n        for (var i = 0; i < this.data.length; i++) {\n            var event = this.data[i];\n            if (i === 0) {\n                end = event.end;\n            } else {\n                if (end < event.end) {\n                    end = event.end;\n                }\n            }\n        }\n        return end;\n    };\n\n    Score.prototype.setDuration = function(duration) {\n        this.sort();\n        var start = this.data[0].time;\n        var i;\n        var event;\n        for (i = 0; i < this.data.length; i++) {\n            event = this.data[i];\n            event.data[0] = event.data[0] - start;\n        }\n        var currentDuration = this.data[0].end;\n        for (i = 0; i < this.data.length; i++) {\n            event = this.data[i];\n            if (event.end > currentDuration) {\n                currentDuration = event.end;\n            }\n        }\n        var factor = Math.abs(duration / currentDuration);\n        for (i = 0; i < this.data.length; i++) {\n            event = this.data[i];\n            event.data[0] = event.data[0] * factor;\n            event.data[1] = event.data[1] * factor;\n        }\n    };\n\n    Score.prototype.quantize = function(dimension, quantum) {\n        for (var i = 0; i < this.data.length; i++) {\n            var event = this.data[i];\n            var value = Math.floor(event.data[dimension] / quantum);\n            event.data[dimension] = (value * quantum);\n        }\n    };\n\n    Score.prototype.quantizeTime = function(quantum) {\n        this.quantize(0, quantum);\n        this.quantize(1, quantum);\n    };\n\n    Score.prototype.sendToCsound = function(csound, extra) {\n        this.sort();\n        if (typeof extra === 'undefined') {\n            jscore = '';\n        } else {\n            extra = 5.0;\n            var duration = this.getDuration() + extra;\n            jscore = 'f 0 ' + duration + ' 0\\n';\n        }\n        for (var i = 0; i < this.data.length; i++) {\n            jscore += this.data[i].toIStatement();\n        }\n        csound.ReadScore(jscore);\n    };\n\n    Score.prototype.turnoffInCsound = function(csound, extra) {\n        this.sort();\n        if (typeof extra === 'undefined') {\n            jscore = '';\n        } else {\n            extra = 5.0;\n            var duration = this.getDuration() + extra;\n            jscore = 'f 0 ' + duration + ' 0\\n';\n        }\n        for (var i = 0; i < this.data.length; i++) {\n            jscore += this.data[i].toDStatement();\n        }\n        //console.info(jscore);\n        csound.ReadScore(jscore);\n    };\n\n    Score.prototype.findScales = function() {\n        for (var i = 0; i < this.minima.data.length; i++) {\n            this.findScale(i);\n        }\n    };\n\n    Score.prototype.findScale = function(dimension) {\n        var min = Number.NaN;\n        var max = Number.NaN;\n        for (var i = 0; i < this.data.length; i++) {\n            var value = this.data[i].data[dimension];\n            if (i === 0) {\n                min = value;\n                max = value;\n            } else {\n                if (value < min) {\n                    min = value;\n                }\n                if (value > max) {\n                    max = value;\n                }\n            }\n        }\n        this.minima.data[dimension] = min;\n        this.maxima.data[dimension] = max;\n        this.ranges.data[dimension] = max - min;\n    };\n\n    Score.prototype.setScale = function(dimension, minimum, range) {\n        this.findScale(dimension);\n        var toOrigin = this.minima.data[dimension];\n        var currentRange = this.ranges.data[dimension];\n        if (currentRange === 0) {\n            currentRange = 1;\n        }\n        if (typeof range === 'undefined') {\n            range = 1;\n        }\n        var rescale = range / currentRange;\n        var translate = minimum;\n        for (var i = 0; i < this.data.length; i++) {\n            var value = this.data[i].data[dimension];\n            value -= toOrigin;\n            value *= rescale;\n            value += translate;\n            this.data[i].data[dimension] = value;\n        }\n    };\n\n    Score.prototype.temper = function(tonesPerOctave) {\n        for (var i = 0; i < this.data.length; i++) {\n            this.data[i].temper(tonesPerOctave);\n        }\n    };\n\n    Score.prototype.sort = function() {\n        this.data.sort(eventComparator);\n    };\n\n    Score.prototype.tieOverlaps = function(tieExact) {\n        console.info(\"Before tieing: \" + this.data.length + \"\\n\");\n        if (typeof tieExact === 'undefined') {\n            tieExact = false;\n        }\n        this.sort();\n        var laterI;\n        var laterEvent;\n        var earlierI;\n        var earlierEvent;\n        let temporary_score = [];\n        // Get rid of notes that will not sound.\n        /*\n        0 Time in seconds from start of performance.\n        1 Duration in seconds, -1 is \"indefinite.\"\n        2 MIDI status (only the most significant nybble, e.g. 144 for 'NOTE ON').\n        3 MIDI channel (any real number, fractional part ties events,\n          negative is 'NOTE OFF').\n        4 MIDI key number from 0 to 127, 60 is middle C (a real number).\n        5 MIDI velocity from 0 to 127, 80 is mezzo-forte (a real number).\n       */\n        for (let event of this.data) {\n            if (event.data[1] > 0 && event.data[5] > 0) {\n                temporary_score.push(event)\n            }\n        }\n        for (laterI = temporary_score.length - 1; laterI >= 0; laterI--) {\n            laterEvent = temporary_score[laterI];\n            if (laterEvent.data[2] === 144) {\n                for (earlierI = laterI - 1; earlierI >= 0; earlierI--) {\n                    earlierEvent = temporary_score[earlierI];\n                    if (earlierEvent.data[2] === 144) {\n                        var overlaps = false;\n                        let earlier_event_end = earlierEvent.data[0] + earlierEvent.data[1];\n                        let later_event_end = laterEvent.data[0] + laterEvent.data[1];\n                        if (tieExact) {\n                            overlaps = ge_epsilon(earlier_event_end, laterEvent.data[0]);\n                        } else {\n                            overlaps = gt_epsilon(earlier_event_end, laterEvent.data[0]);\n                        }\n                        if (overlaps === true) {\n                            if ((Math.floor(earlierEvent.data[3]) === Math.floor(laterEvent.data[3])) &&\n                                (Math.round(earlierEvent.data[4]) === Math.round(laterEvent.data[4]))) {\n                                //console.info('Tieing: ' + earlierI + ' ' + earlierEvent.toString());\n                                //console.info('    to: ' + laterI + ' ' + laterEvent.toString());\n                                earlierEvent.data[1] = later_event_end - earlierEvent.data[0];\n                                laterEvent.data[1] = 0;\n                                laterEvent.data[5] = 0;\n                                //console.info('Result: ' + earlierI + ' ' +  earlierEvent.toString() + '\\n');\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        // Get rid of notes that will not sound (again).\n        this.clear();\n        for (let event of temporary_score) {\n            if (event.data[1] > 0 && event.data[5] > 0) {\n                this.append(event)\n            }\n        }\n        console.info(\"After tieing: \" + this.data.length + \"\\n\");\n    };\n\n    Score.prototype.progress = function(score_time) {\n        if (context !== null) {\n            context.fillStyle = \"LawnGreen\";\n            context.fillRect(0, 60, score_time, 0.01);\n        }\n    };\n\n    /**\n     * Displays the score cursor at the current time.\n     */\n    Score.prototype.progress3D = function(score_time) {\n        if (this.scene !== null) {\n            this.score_cursor.position.x = score_time;\n            this.score_cursor.position.y = 60;\n            this.score_cursor.position.z = 0.5;\n            this.controls.update();\n            this.camera.updateProjectionMatrix();\n            this.renderer.render(this.scene, this.camera);\n        }\n    };\n\n    /**\n     * Sets up a scene, camera, and renderer with controls to view\n     * either a fixed or a real-time score.\n     */\n    Score.prototype.prepareScene3D = function(canvas) {\n        this.canvas = canvas;\n        canvas.width = canvas.clientWidth;\n        canvas.height = canvas.clientHeight;\n        this.findScales();\n        this.scene = new THREE.Scene();\n        var scene = this.scene;\n        this.renderer = new THREE.WebGLRenderer({\n            canvas: canvas,\n            antialias: true\n        });\n        var renderer = this.renderer;\n        renderer.setClearColor(0);\n        renderer.sortObjects = false;\n        renderer.setViewport(0, 0, canvas.clientWidth, canvas.clientHeight);\n        renderer.setPixelRatio(canvas.devicePixelRatio);\n        // Wire up the view controls to the camera.\n        this.camera = new THREE.PerspectiveCamera(45, canvas.clientWidth / canvas.clientHeight, 1, 10000);\n        var camera = this.camera;\n        this.controls = new THREE.TrackballControls(camera, canvas);\n        var controls = this.controls;\n        controls.rotateSpeed = 8.0;\n        controls.zoomSpeed = 8.0;\n        controls.panSpeed = 8.0;\n        controls.noZoom = false;\n        controls.noPan = false;\n        controls.staticMoving = true;\n        controls.dynamicDampingFactor = 0.3;\n        // Ensure that all sides are lighted.\n        var light = new THREE.DirectionalLight(0xffffff, 1);\n        light.position.set(1, 1, 1).normalize();\n        this.scene.add(light);\n        var light2 = new THREE.AmbientLight(0x404040, 0.5);\n        this.scene.add(light2);\n        window.addEventListener('resize', ((event) => this.onResize(event)), false);\n    };\n    Score.prototype.onResize = function(event) {\n        this.canvas.width = this.canvas.clientWidth;\n        this.canvas.height = this.canvas.clientHeight;\n        this.renderer.setViewport(0, 0, this.canvas.clientWidth, this.canvas.clientHeight);\n        this.camera.aspect = this.canvas.clientWidth / this.canvas.clientHeight;\n        this.controls.handleResize();\n        this.camera.updateProjectionMatrix();\n        this.renderer.render(this.scene, this.camera);\n    };\n    /**\n     * Adds the note to the 3D scene. Can be used with a fixed or a real-time score.\n     */\n    Score.prototype.plotNote3D = function(note, channel_minimum, channel_range, velocity_minimum, velocity_range) {\n        var begin = note.time;\n        var end = note.end;\n        var duration = end - begin;\n        var key = note.key;\n        var channel = note.channel - channel_minimum;\n        var geometry = new THREE.BoxBufferGeometry(duration, 1, 1);\n        if (channel_range === 0) {\n            channel_range = 1;\n        }\n        if (velocity_range === 0) {\n            velocity_range = 1;\n        }\n        hue = channel / channel_range;\n        var value = note.velocity - velocity_minimum;\n        value = value / velocity_range;\n        value = 0.5 + value / 2;\n        var material = new THREE.MeshLambertMaterial();\n        material.color.setHSL(hue, 1, value);\n        material.opacity = 0.5;\n        material.reflectivity = 0.5;\n        material.transparent = true;\n        material.emissive = material.color;\n        material.emissiveIntensity = 2 / 3;\n        var note_mesh = new THREE.Mesh(geometry, material);\n        note_mesh.position.x = begin + duration / 2; // + note.scale.x;\n        note_mesh.position.y = key;\n        note_mesh.position.z = channel;\n        this.scene.add(note_mesh);\n    };\n\n    /**\n     * Plots a grid for a fixed score.\n     */\n    Score.prototype.plotGrid3D = function() {\n        // Generate the grid. Its origin for time is 0 and for pitch its origin is the\n        // first C lower than or equal to the lowest pitch in the score.\n        var time_minimum = this.minima.time;\n        var time_maximum = this.getDuration();\n        var key_minimum = this.minima.key;\n        var key_maximum = this.maxima.key;\n        var channel_minimum = this.minima.channel;\n        var channel_maximum = this.maxima.channel;\n        var line_material = new THREE.LineBasicMaterial();\n        time_minimum = 0;\n        instrument_minimum = 0;\n        if (key_minimum % 12 !== 0) {\n            key_minimum -= (key_minimum % 12);\n        }\n        var grid_geometry = new THREE.BoxBufferGeometry(10, 12, 1);\n        for (var t = time_minimum; t <= time_maximum + 10; t = t + 10) {\n            for (var k = key_minimum; k <= key_maximum; k = k + 12) {\n                var box = new THREE.LineSegments(new THREE.EdgesGeometry(grid_geometry), line_material);\n                ///box = new THREE.EdgesGeometry(box);\n                box.material.color.setRGB(0, 0.25, 0);\n                box.material.opacity = 0.25;\n                box.material.transparent = true;\n                box.position.x = t + 5;\n                box.position.y = k + 6;\n                box.position.z = 0;\n                box.scale.z = 0;\n                this.scene.add(box);\n            }\n        }\n        // Put a ball at the origin, to indicate the orientation of the score.\n        var origin_geometry = new THREE.SphereGeometry(1, 10, 10);\n        var origin_material = new THREE.MeshLambertMaterial();\n        origin_material.color.setRGB(0, 255, 0);\n        var origin = new THREE.Mesh(origin_geometry, origin_material);\n        origin.position.x = time_minimum;\n        origin.position.y = key_minimum;\n        origin.position.z = 0;\n        this.scene.add(origin);\n        // Put a ball at the start of middle C, to indicate the current Csound\n        // score time.\n        var cursor_geometry = new THREE.SphereGeometry(1, 10, 10);\n        var cursor_material = new THREE.MeshLambertMaterial();\n        cursor_material.color.setRGB(255, 0, 0);\n        this.score_cursor = new THREE.Mesh(cursor_geometry, cursor_material);\n        this.score_cursor.position.x = time_minimum;\n        this.score_cursor.position.y = 60;\n        this.score_cursor.position.z = 0;\n        this.scene.add(this.score_cursor);\n    };\n\n    /**\n     * Looks at a full fixed score.\n     */\n    Score.prototype.lookAtFullScore3D = function() {\n        var bounding_box = new THREE.Box3().setFromObject(this.scene);\n        this.camera.lookAt(bounding_box.getCenter());\n        this.camera.fov = 2 * Math.atan((bounding_box.getSize().x / (this.canvas.width / this.canvas.height)) / (2 * bounding_box.getSize().y)) * (180 / Math.PI);\n        this.camera.position.copy(bounding_box.getCenter());\n        this.camera.position.z = 1.125 * Math.min(bounding_box.getSize().x, bounding_box.getSize().y);\n        this.controls.target.copy(bounding_box.getCenter());\n        this.controls.update();\n        this.camera.updateProjectionMatrix();\n        this.renderer.render(this.scene, this.camera);\n    };\n\n    /**\n     * Looks at the front (current notes) of a real-time score.\n     */\n    Score.prototype.lookAtFront3D = function() {\n        var bounding_box = new THREE.Box3().setFromObject(this.scene);\n        this.camera.lookAt(bounding_box.getCenter());\n        this.camera.fov = 2 * Math.atan((bounding_box.getSize().y / (this.canvas.width / this.canvas.height)) / (2 * bounding_box.getSize().z)) * (180 / Math.PI);\n        this.camera.position.copy(bounding_box.getCenter());\n        this.camera.position.x = 1.125 * Math.max(bounding_box.getSize().x, bounding_box.getSize().y);\n        this.controls.target.copy(bounding_box.getCenter());\n        this.controls.update();\n        this.camera.updateProjectionMatrix();\n        this.renderer.render(this.scene, this.camera);\n    };\n\n    /**\n     * Redraws the scene using the camera updated from the controls.\n     */\n    Score.prototype.render3D = function() {\n        this.controls.update();\n        this.camera.updateProjectionMatrix();\n        this.renderer.render(this.scene, this.camera);\n    };\n\n    /**\n     * Draws the notes in a fixed score as a 3-dimensional piano roll. The score is\n     * fitted into the viewport to start with, but the user can use the mouse or\n     * trackball to move around the score and to zoom in and out. The dimensions\n     * are: time = x, MIDI key = y, MIDI channel = z and hue, and loudness =\n     * value; a grid shows tens of seconds and octaves.\n     */\n    Score.prototype.draw3D = function(canvas) {\n        this.prepareScene3D(canvas);\n        // Plot the notes.\n        for (var i = 0; i < this.data.length; i++) {\n            this.plotNote3D(this.data[i], this.minima.channel, this.ranges.channel, this.minima.velocity, this.ranges.velocity);\n        }\n        this.plotGrid3D();\n        this.lookAtFullScore3D();\n        return canvas;\n    };\n\n    Score.prototype.toString = function() {\n        var result = '';\n        for (var i = 0; i < this.data.length; i++) {\n            var event = this.data[i];\n            result = result.concat(event.toString());\n        }\n        return result;\n    };\n\n    Score.prototype.toCsoundScore = function(extra) {\n        var result = '';\n        for (var i = 0; i < this.data.length; i++) {\n            var event = this.data[i];\n            result = result.concat(event.toIStatement());\n        }\n        if (typeof extra !== 'undefined') {\n            result.concat('e ' + extra);\n        }\n        return result;\n    };\n\n    Score.prototype.size = function() {\n        return this.data.length;\n    };\n\n    Score.prototype.get = function(index) {\n        return this.data[index];\n    };\n\n    // Returns the sub-score containing events\n    // starting at or later than the begin time,\n    // and up to but not including the end time.\n    // The events in the slice are values unless\n    // by_reference is true.\n    Score.prototype.slice = function(begin, end_, by_reference) {\n        if (typeof by_reference === 'undefined') {\n            by_reference = false;\n        }\n        this.sort();\n        var s = new Silencio.Score();\n        for (var index = 0; index < this.size(); index++) {\n            var event = this.data[index];\n            var time_ = event.time;\n            if (time_ >= begin && time_ < end_) {\n                if (by_reference === true) {\n                    s.append(event);\n                } else {\n                    s.append(event.clone());\n                }\n            }\n        }\n        return s;\n    };\n\n    /**\n     * Writes a FOMUS score in \"basename.fms\". The tempo is 120 BPM and notes are\n     * written strictly by time in beats, i.e. bar lines are not calculated. Any\n     * FOMUS commands in \"fomus_overrides\" take precedence. The FOMUS file directs\n     * FOMUS to produce output files for LilyPond, MusicXML, and MIDI.\n     */\n    Score.prototype.engrave = function(fomus_overrides) {\n        try {\n            var filepath = window.location.pathname.slice(1);\n            filepath = fs.realpathSync(filepath);\n            filepath = filepath + '.fms';\n            console.info('saving to filepath: ' + filepath);\n            this.sort();\n            this.findScales();\n            lines = [];\n            lines.push('title \"' + this.title + '\"');\n            lines.push('author \"' + this.composer + '\"');\n            lines.push('output (ly mid xml)');\n            lines.push('timesig (4 4)');\n            // 32nd notes are the shortest.\n            lines.push('beatdiv 8');\n            // No tuplets -- they make this kind of thing ureadable.\n            lines.push('tuplets ()');\n            lines.push('quartertones yes');\n            lines.push('dyns yes');\n            lines.push('prune-type steal');\n            lines.push('untie yes');\n            lines.push('untie-dur-range (1/64 4)');\n            lines.push('dyn-range (' + Math.round(this.minima.velocity) + ' ' + Math.round(this.maxima.velocity) + ')');\n            lines.push('init-tempo 120');\n            lines.push('init-tempo-text \"* = #\"');\n            lines.push('lily-papersize \"11x17\"');\n            if (typeof fomus_overrides !== 'undefined') {\n                lines.push(fomus_overrides + '\\n');\n            }\n            first_part = null;\n            for (var number in this.names_for_instrument_numbers) {\n                if (this.names_for_instrument_numbers.hasOwnProperty(number)) {\n                    if (first_part === null) {\n                        first_part = number;\n                    }\n                    var name = this.names_for_instrument_numbers[number];\n                    lines.push('part <id: ' + number + ' name: \"' + name + '\" abbr: \"' + name.substring(0, 3) + '\">');\n                }\n            }\n            var i;\n            for (i = 0; i < this.data.length; i++) {\n                var note = this.data[i].toFomus();\n                lines.push(note);\n            }\n            var fd = fs.openSync(filepath, 'w');\n            for (i = 0; i < lines.length; i++) {\n                var line = lines[i] + '\\n';\n                fs.writeSync(fd, line);\n            }\n            fs.close(fd);\n            return true;\n        } catch (err) {\n            console.info(err.message);\n            return false;\n        }\n    };\n\n    function eventComparator(a, b) {\n        for (var i = 0; i < a.data.length; i++) {\n            var avalue = a.data[i];\n            var bvalue = b.data[i];\n            var difference = avalue - bvalue;\n            if (difference !== 0) {\n                return difference;\n            }\n        }\n        return 0;\n    }\n\n    function Turtle(len, theta) {\n        this.len = len;\n        this.theta = theta;\n        this.reset();\n        return this;\n    }\n    Turtle.prototype.reset = function() {\n        this.angle = Math.PI / 2;\n        this.p = {\n            'x': 0,\n            'y': 0\n        };\n        this.stack = [];\n        this.instrument = 'red';\n        this.tempo = 1;\n        this.event = new Silencio.Event();\n    };\n    Turtle.prototype.next = function() {\n        return {\n            'x': this.p.x + this.len * this.tempo * Math.cos(this.angle),\n            'y': this.p.y - this.len * Math.sin(this.angle)\n        };\n    };\n    Turtle.prototype.go = function(context) {\n        var nextP = this.next();\n        if (context !== null) {\n            context.strokeStyle = tinycolor(this.instrument).toString();\n            context.beginPath();\n            context.moveTo(this.p.x, this.p.y);\n            context.lineTo(nextP.x, nextP.y);\n            context.stroke();\n        }\n        this.p = nextP;\n    };\n    Turtle.prototype.move = function() {\n        this.p = this.next();\n    };\n    Turtle.prototype.turnLeft = function() {\n        this.angle += this.theta;\n    };\n    Turtle.prototype.turnRight = function() {\n        this.angle -= this.theta;\n    };\n    Turtle.prototype.upInstrument = function() {\n        this.instrument = tinycolor(this.instrument).spin(10);\n    };\n    Turtle.prototype.downInstrument = function() {\n        this.instrument = tinycolor(this.instrument).spin(-10);\n    };\n    Turtle.prototype.upVelocity = function() {\n        this.instrument = tinycolor(this.instrument).darken(-1);\n    };\n    Turtle.prototype.downVelocity = function() {\n        this.instrument = tinycolor(this.instrument).darken(1);\n    };\n    Turtle.prototype.upTempo = function() {\n        this.tempo = this.tempo / 1.25;\n    };\n    Turtle.prototype.downTempo = function() {\n        this.tempo = this.tempo * 1.25;\n    };\n    Turtle.prototype.push = function() {\n        this.stack.push({\n            'p': this.p,\n            'angle': this.angle,\n            'instrument': this.instrument,\n            'tempo': this.tempo,\n            'event': this.event.clone()\n        });\n    };\n    Turtle.prototype.pop = function() {\n        var s = this.stack.pop();\n        this.p = s.p;\n        this.angle = s.angle;\n        this.instrument = s.instrument;\n        this.tempo = s.tempo;\n        this.event = s.event;\n    };\n\n    function LSys() {\n        this.axiom = '';\n        this.rules = {};\n        this.prior = '';\n        this.score = new Silencio.Score();\n        return this;\n    }\n    LSys.prototype.addRule = function(c, replacement) {\n        this.rules[c] = replacement;\n    };\n    LSys.prototype.generate = function(n) {\n        this.sentence = this.axiom;\n        for (var g = 0; g < n; g++) {\n            var next = [];\n            for (var i = 0; this.sentence.length > i; i++) {\n                var c = this.sentence[i];\n                var r = this.rules[c];\n                if (r) {\n                    next.push(r);\n                } else {\n                    next.push(c);\n                }\n            }\n            this.sentence = next.join(\"\");\n        }\n    };\n    LSys.prototype.write_score = function(t) {\n        t.reset();\n        for (i = 0; this.sentence.length > i; i++) {\n            c = this.sentence[i];\n            this.interpret(c, t, null);\n        }\n    }\n    LSys.prototype.draw = function(t, context, W, H) {\n        context.fillStyle = 'black';\n        context.fillRect(0, 0, W, H);\n        // Draw for size.\n        t.reset();\n        var size = [t.p.x, t.p.y, t.p.x, t.p.y];\n        var i;\n        var c;\n        for (i = 0; this.sentence.length > i; i++) {\n            c = this.sentence[i];\n            this.interpret(c, t, context, size);\n        }\n        // Draw to show.\n        var xsize = size[2] - size[0];\n        var ysize = size[3] - size[1];\n        var xscale = Math.abs(W / xsize);\n        var yscale = Math.abs(H / ysize);\n        var xmove = -size[0];\n        var ymove = -size[1];\n        context.scale(xscale, yscale);\n        context.translate(xmove, ymove);\n        t.reset();\n        for (i = 0; this.sentence.length > i; i++) {\n            c = this.sentence[i];\n            this.interpret(c, t, context);\n        }\n    };\n    LSys.prototype.findSize = function(t, size) {\n        if (t.p.x < size[0]) {\n            size[0] = t.p.x;\n        }\n        if (t.p.y < size[1]) {\n            size[1] = t.p.y;\n        }\n        if (t.p.x > size[2]) {\n            size[2] = t.p.x;\n        }\n        if (t.p.y > size[3]) {\n            size[3] = t.p.y;\n        }\n    };\n    Turtle.prototype.startNote = function() {\n        var hsv = tinycolor(this.instrument).toHsv();\n        this.event = new Silencio.Event();\n        this.event.channel = hsv.h;\n        this.event.time = this.p.x;\n        this.event.key = -this.p.y;\n        this.event.velocity = hsv.v;\n        this.event.pan = Math.random();\n    };\n    Turtle.prototype.endNote = function(score) {\n        this.event.end = this.p.x;\n        if (this.event.duration > 0) {\n            var event = this.event.clone();\n            score.data.push(event);\n        }\n    };\n    LSys.prototype.interpret = function(c, t, context, size) {\n        //console.info('c:' + c + '\\n');\n        if (c === 'F') {\n            if (typeof size === 'undefined') {\n                t.startNote();\n                t.go(context);\n            } else {\n                t.move();\n            }\n        } else if (c === 'f') t.move();\n        else if (c === '+') t.turnRight();\n        else if (c === '-') t.turnLeft();\n        else if (c === '[') t.push();\n        else if (c === ']') t.pop();\n        else if (c === 'I') t.upInstrument();\n        else if (c === 'i') t.downInstrument();\n        else if (c === 'V') t.upVelocity();\n        else if (c === 'v') t.downVelocity();\n        else if (c === 'T') t.upTempo();\n        else if (c === 't') t.downTempo();\n        if (typeof size === 'undefined') {\n            if (c === 'F') {\n                t.endNote(this.score);\n            }\n            this.prior = c;\n        } else {\n            this.findSize(t, size);\n        }\n    };\n\n    /**\n    Generates scores by recursively applying a set of generating\n    functions to a single initial musical event.\n    This event can be considered to represent a cursor within a score.\n    The generating functions may move this cursor around\n    within the score, as if moving a pen, and may at any time write the\n    current state of the cursor into the score, or write other events\n    based, or not based, upon the cursor into the score.\n\n    The generating functions may be lambdas. Generated notes must not\n    be the same object as the cursor, but may be clones of the cusor,\n    or entirely new objects.\n\n    cursor          A Silencio.Event object that represents a position in a\n                    musical score. This could be a note, a grain of sound, or\n                    a control event.\n\n    depth           The current depth of recursion. This must begin > 1.\n                    For each recursion, the depth is decremented. Recursion\n                    ends when the depth reaches 0.\n\n    Returns the next position of the cursor, and optionally, a table of\n    generated events.\n\n    generator = function(cursor, depth);\n    {cursor, events} = generator(cursor, depth);\n\n    The algorithm is similar to the deterministic algorithm for computing the\n    attractor of a recurrent iterated function systems. Instead of using\n    affine transformation matrixes as the RIFS algorithm does, the current\n    algorithm uses generating functions; but if each generating function\n    applies a single affine transformation to the cursor, the current\n    algorithm will in fact compute a RIFS.\n\n    generators      A list of generating functions with the above signature.\n                    Unlike RIFS, the functions need not be contractive.\n\n    transitions     An N x N transition matrix for the N generating functions.\n                    If entry [i][j] is 1, then if the current generator is the\n                    ith, then the jth generator will be applied to the current\n                    cursor after the ith; if the entry is 0, the jth generator\n                    will not be applied to the current cursor after the ith.\n                    In addition, each generator in the matrix must be reached\n                    at some point during recursion.\n\n    depth           The current depth of recursion. This must begin > 1.\n                    For each recursion, the depth is decremented. Recursion\n                    ends when the depth reaches 0.\n\n    index           Indicates the current generating function, i.e. the\n                    index-th row of the transition matrix.\n\n    cursor          A Silencio.Event object that represents a position in a\n                    musical score. This could be a note, a grain of sound, or\n                    a control event.\n\n    score           A Silencio.Score object that collects generated events.\n    */\n\n    function RecurrentResult(c) {\n        this.cursor = c;\n        this.events = [];\n        return this;\n    }\n\n    function Recurrent(generators, transitions, depth, index, cursor, score) {\n        depth = depth - 1;\n        //console.info(string.format('Recurrent(depth: %d  index: %d  cursor: %s)', depth, index, cursor:__tostring()))\n        if (depth === 0) {\n            return;\n        }\n        var transitionsForThisIndex = transitions[index];\n        for (var j = 0; j < transitionsForThisIndex.length; j++) {\n            if (transitionsForThisIndex[j] == 1) {\n                var result = generators[j](cursor.clone(), depth);\n                for (var i = 0; i < result.events.length; i++) {\n                    score.append(result.events[i].clone());\n                }\n                Recurrent(generators, transitions, depth, j, result.cursor.clone(), score);\n            }\n        }\n    }\n\n    /**\n     * Like ES6 Map, but with value keys, which are represented by stringified\n     * keys.\n     */\n    function ValueMap(make_key_) {\n        this.map = new Map();\n        this.make_key = this.make_key_;\n        /*     Object.defineProperty(this,\"size\",{\n         *         configurable: true,\n         *         get: function() { return this.map.size; },\n         *         set: function(value) { this.map.size = value; }\n         *     });\n         */\n    }\n\n    ValueMap.prototype.get_size = function() {\n        return this.map.size;\n    };\n\n    ValueMap.prototype.set_size = function(count) {\n        this.map.size = count;\n    };\n\n    ValueMap.prototype.clear = function() {\n        this.map.clear();\n    };\n\n    ValueMap.prototype.delete = function(key) {\n        return this.map.delete(this.make_key(key));\n    };\n\n    ValueMap.prototype.entries = function() {\n        return this.map.entries();\n    };\n\n    ValueMap.prototype.forEach = function(callback, thisarg) {\n        this.map.forEach(callback, thisarg);\n    };\n\n    ValueMap.prototype.get = function(key) {\n        return this.map.get(this.make_key(key));\n    };\n\n    ValueMap.prototype.has = function(key) {\n        return this.map.has(this.make_key(key));\n    };\n\n    ValueMap.prototype.keys = function() {\n        return this.map.keys();\n    };\n\n    ValueMap.prototype.set = function(key, value) {\n        this.map.set(this.make_key(key), value);\n        return this;\n    };\n\n    ValueMap.prototype.values = function() {\n        return this.map.values();\n    };\n\n    /**\n     * Like ES6 Set, but treats elements as values, which are represented as\n     * stringified values.\n     */\n    function ValueSet(make_key_) {\n        this.map = new Map();\n        this.make_key = make_key_;\n        /*     Object.defineProperty(this,\"size\",{\n         *         configurable: true,\n         *         get: function() { return this.map.size; },\n         *         set: function(value) { this.map.size = value; }\n         *     });\n         */\n    }\n\n    ValueSet.prototype.get_size = function() {\n        return this.map.size;\n    };\n\n    ValueSet.prototype.set_size = function(count) {\n        this.map.size = count;\n    };\n\n    ValueSet.prototype.add = function(value_) {\n        let key_ = this.make_key(value_);\n        this.map.set(key_, value_);\n        return this;\n    };\n\n    ValueSet.prototype.clear = function() {\n        this.map.clear();\n    };\n\n    ValueSet.prototype.delete = function(value) {\n        return this.map.delete(this.make_key(value));\n    };\n\n    ValueSet.prototype.entries = function() {\n        return this.map.entries();\n    };\n\n    ValueSet.prototype.forEach = function(callback, thisarg) {\n        this.map.forEach(callback, thisarg);\n    };\n\n    ValueSet.prototype.has = function(value) {\n        return this.map.has(this.make_key(value));\n    };\n\n    ValueSet.prototype.values = function() {\n        return this.map.values();\n    };\n\n    if (typeof navigator !== 'undefined') {\n        console.info('browser:  ' + navigator.appName);\n        console.info('platform: ' + navigator.platform);\n    }\n\n    var Silencio = {\n        eq_epsilon: eq_epsilon,\n        gt_epsilon: gt_epsilon,\n        lt_epsilon: lt_epsilon,\n        ge_epsilon: ge_epsilon,\n        le_epsilon: le_epsilon,\n        modulo: modulo,\n        Event: Event,\n        Score: Score,\n        Turtle: Turtle,\n        LSys: LSys,\n        RecurrentResult: RecurrentResult,\n        Recurrent: Recurrent,\n        saveToLocalFile: saveToLocalFile,\n        restoreFromLocalFile: restoreFromLocalFile,\n        saveDatGuiJson: saveDatGuiJson,\n        restoreDatGuiJson: restoreDatGuiJson,\n        ValueMap: ValueMap,\n        ValueSet: ValueSet\n    };\n    // Node: Export function\n    if (typeof module !== \"undefined\" && module.exports) {\n        module.exports = Silencio;\n    }\n    // AMD/requirejs: Define the module\n    else if (typeof define === 'function' && define.amd) {\n        define(function() {\n            return Silencio;\n        });\n    }\n    // Browser: Expose to window\n    else if (typeof window !== 'undefined') {\n        window.Silencio = Silencio;\n    } else {\n        return Silencio;\n    }\n\n})();\n",
    "static": true,
    "longname": "/Users/michaelgogins/cloud-5/public/Silencio.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 140,
    "kind": "file",
    "name": "public/csoundac.mjs",
    "content": "/**\n * C S O U N D A C   M O D U L E   F O R   S T R U D E L\n *\n * Author: Michael Gogins\n * \n * [csound-ac](https://github.com/gogins/csound-ac), or CsoundAC, is a C++ \n * algorithmic composition library designed for use with Csound.\n *\n * [csound-wasm](https://github.com/gogins/csound-wasm) is a WebAssembly \n * library containing both Csound and CsoundAC, with a JavaScript API, \n * designed for use in Web browsers and npm applications.\n *\n * This module brings chords and scales, and operations upon them, \n * from the CsoundAC library for algorithmic composition into the \n * Strudel (Tidal Cycles-based) JavaScript pattern language. This is \n * done by deriving from the StatefulPatterns class new classes whose \n * member functions become Patterns.\n *\n * Another use of StatefulPatterns is to define algorithmic note generators, \n * often driven by a `pure` pattern that acts as a clock.\n *\n * Please note, however, that this module, although it defines a number of \n * Patterns, is not built into Strudel and is designed to be dynamically \n * imported in patches created by users in the Strudel REPL. Therefore, code \n * in this module, as with all other modules directly imported in code \n * run by the Strudel REPL, must not use template strings.\n */\nlet csound = globalThis.__csound__;\nlet csoundac = globalThis.__csoundac__;\nlet audioContext = new AudioContext();\n\nimport {diagnostic, diagnostic_level, ALWAYS, DEBUG, INFORMATION, WARNING, ERROR, NEVER, StatefulPatterns} from '../statefulpatterns.mjs';\nexport {diagnostic, diagnostic_level, ALWAYS, DEBUG, INFORMATION, WARNING, ERROR, NEVER, StatefulPatterns};\n\n/**\n * Similar to `arrange,` but permits a section to be silenced by setting its \n * number of cycles to 0; `sections` is an array of arrays, in the format \n * `[[cycles, Pattern],...]`. Useful for assembling Patterns into longer-form \n * compositions.\n */\nexport function track(...sections) {\n    sections = sections.filter(function(element) {\n        return element[0] >= 1;\n    });\n    const total = sections.reduce((sum, [cycles]) => sum + cycles, 0);\n    sections = sections.map(([cycles, section]) => [cycles, section.fast(cycles)]);\n    return timeCat(...sections).slow(total);\n};\n\n/**\n * Returns the frequency corresponding to any of various ways that pitch \n * is represented in Strudel events.\n */\nconst getFrequency = (hap) => {\n    let {\n        value,\n        context\n    } = hap;\n    // if value is number => interpret as midi number as long as its not marked as frequency\n    if (typeof value === 'object') {\n        if (value.freq) {\n            return value.freq;\n        }\n        return getFreq(value.note || value.n || value.value);\n    }\n    if (typeof value === 'number' && context.type !== 'frequency') {\n        value = midiToFreq(hap.value);\n    } else if (typeof value === 'string' && isNote(value)) {\n        value = midiToFreq(noteToMidi(hap.value));\n    } else if (typeof value !== 'number') {\n        throw new Error('not a note or frequency: ' + value);\n    }\n    return value;\n};\n\n/**\n * A utility that assigns a pitch represented as a MIDI key number to the Hap, \n * using the existing pitch property if it exists.\n */\nexport function setPitch(hap, midi_key) {\n    if (typeof hap.value === 'undefined') {\n        hap.value = midi_key;\n    } else if (typeof hap.value === 'object') {\n        if (typeof hap.value.freq !== 'undefined') {\n            hap.value.freq = midiToFreq(midi_key);\n        } else if (typeof hap.value.note !== 'undefined') {\n            hap.value.note = midi_key;\n        } else if (typeof hap.value.n !== 'undefined') {\n            hap.value.n = midi_key;\n        }\n    } else {\n        // Number or string all get the MIDI key.\n        hap.value = midi_key;\n    } \n    return hap;\n}\n\n/**\n * A utility that returns the MIDI key number for a frequency in Hz, \n * as a real number allowing fractions for microtones.\n */\nexport function frequencyToMidiReal(frequency) {\n    const middle_c = 261.62558;\n    let octave_ = Math.log(frequency / middle_c) / Math.log(2.) + 8.;\n    let midi_key = octave_ * 12. - 36.;\n    return midi_key;\n}\n\n/**\n * A utility that returns the MIDI key number for a frequency in Hz, \n * as the nearest integer.\n */\nexport function frequencyToMidiInteger(frequency) {\n    let midi_key = frequencyToMidiReal(frequency);\n    return Math.round(midi_key);\n}\n\n/**\n * A utility for making a _value_ copy of a Chord (or a Scale, which \n * is derived from Chord). Object b is resized to the size of a, and a's \n * pitches are copied to b. Currently, only pitches are copied.\n */\nexport function Clone(a, b) {\n    b.resize(a.voices())\n    for (let voice = 0; voice < a.voices(); ++voice) {\n        let a_pitch = a.getPitch(voice);\n        let b_pitch = b.getPitch(voice);\n        b.setPitch(voice, a_pitch);\n        if (diagnostic_level() >= DEBUG) registerPatterns(['[voice ', voice, 'a:', a_pitch, 'old b:', b_pitch, 'new b:', b.getPitch(voice), '\\n'].join(' '));\n    }\n}\n\nexport function print_counter(pattern, counter, value) {\n    if (value.constructor.name === 'Hap') {\n        diagnostic('[' + pattern + '] sync: counter: ' + counter + ' value: ' + value.show() + '\\n', ALWAYS);\n    } else if (value.constructor.name === 'Chord') {\n        diagnostic('[' + pattern + '] sync: counter: ' + counter + ' value: ' + value.toString() + '\\n', ALWAYS);\n    } else {\n        diagnostic('[' + pattern + '] sync: counter: ' + counter + ' value: ' + value + '\\n', ALWAYS);\n    }\n}\n\nlet instrument_count = 10;\n\nexport function set_instrument_count(new_count) {\n    let old_count = instrument_count;\n    instrument_count = new_count;\n    return old_count;\n}\n\nexport function hsvToRgb(h,s,v) {\n  var rgb, i, data = [];\n  if (s === 0) {\n    rgb = [v,v,v];\n  } else {\n    h = h / 60;\n    i = Math.floor(h);\n    data = [v*(1-s), v*(1-s*(h-i)), v*(1-s*(1-(h-i)))];\n    switch(i) {\n      case 0:\n        rgb = [v, data[2], data[0]];\n        break;\n      case 1:\n        rgb = [data[1], v, data[0]];\n        break;\n      case 2:\n        rgb = [data[0], v, data[2]];\n        break;\n      case 3:\n        rgb = [data[0], data[1], v];\n        break;\n      case 4:\n        rgb = [data[2], data[0], v];\n        break;\n      default:\n        rgb = [v, data[0], data[1]];\n        break;\n    }\n  }\n  return '#' + rgb.map(function(x){ \n    return ('0a' + Math.round(x*255).toString(16)).slice(-2);\n  }).join('');\n};\n\nlet csoundn_counter = 0;\n\n/**\n * Sends notes to Csound for rendering with MIDI semantics. The Hap value is\n * translated to Csound pfields as follows:\n *\n *  p1 -- Csound instrument either as a number (1-based, can be a fraction),\n *        or as a string name.\n *  p2 -- time in beats (usually seconds) from start of performance.\n *  p3 -- duration in beats (usually seconds).\n *  p4 -- MIDI key number from Strudel's Hap value (as a real number, not an \n *        integer, in [0, 127].\n *  p5 -- MIDI velocity from Strudel's `gain` control (as a real number, not \n *        an integer, in [0, 127].\n *  p6 -- Spatial depth dimension, from a `depth` control, defaulting to 0.\n *  p7 -- Spatial pan dimension, from Strudel's `pan` control, in [0, 1],\n *        defaulting to 0.5.\n *  p8 -- Spatial height dimension, from a `height` control, defaulting to 0.\n */\nexport const csoundn = register('csoundn', (instrument, pat) => {\n    let p1;\n    if (typeof instrument === 'string') {\n        p1 = '\\\"' + instrument + '\\\"';\n    } else {\n        p1 = instrument;\n    }\n    return pat.onTrigger((tidal_time, hap) => {\n        try {\n            if (!csound) {\n              diagnostic('[csoundn]: Csound is not yet loaded.\\n', WARNING);\n              return;\n            }\n            // Time in seconds counting from now.\n            let p2 = tidal_time - getAudioContext().currentTime;\n            if (p2 < 0) {\n                p2 = 0;\n            }\n            const p3 = hap.duration.valueOf() + 0;\n            const frequency = getFrequency(hap);\n            // Translate frequency to MIDI key number _without_ rounding.\n            const C4 = 261.62558;\n            let octave = Math.log(frequency / C4) / Math.log(2.0) + 8.0;\n            const p4 = octave * 12.0 - 36.0;\n            // We prefer floating point precision, but over the MIDI range [0, 127].\n            ///const p5 = 127 * (hap.context?.velocity ?? 0.9);\n            let gain;\n            if (typeof hap.value.gain === 'undefined') {\n                gain = .9;\n            } else {\n                gain = hap.value.gain;\n            }\n            let p5 = 127 * gain;\n            let p6;\n            if (typeof hap.value.depth === 'undefined') {\n                p6 = 0;\n            } else {\n                p6 = hap.value.depth;\n            }\n            let p7;\n            if (typeof hap.value.pan === 'undefined') {\n                p7 = 0;\n            } else {\n                p7 = hap.value.pan;\n            }\n            let p8;\n            if (typeof hap.value.height === 'undefined') {\n                p8 = 0;\n            } else {\n                p8 = hap.value.depth;\n            }\n            const i_statement = ['i', p1, p2, p3, p4, p5, p6, p7, p8, '\\n'].join(' ');\n            console.log('[csoundn] ' + i_statement);\n            csound.readScore(i_statement);\n            // Any controls in the Hap that start with 'gi' or 'gk' will be \n            // treated as Csound control channels, and their values will be \n            // sent to Csound. Normally, these channels have been defined in \n            // the Csound orchestra code.\n            for (let control in hap.value) {\n                if (control.startsWith('gi') || control.startsWith('gk')) {\n                    csound.SetControlChannel(control, parseFloat(hap.value[control]));\n                }\n            }\n            csoundn_counter = csoundn_counter + 1;\n            if ((diagnostic_level() >= INFORMATION) === true) {\n                print_counter('csoundn', csoundn_counter, hap);\n            }\n            // Color the event by both insno and gain.\n            // insno is hue, and gain is value, in HSV.\n            if (globalThis.haps_from_outputs) {\n                if (typeof hap.value !== 'object') {\n                    hap.value = {note: p4, gain: gain};\n                } else {\n                    hap.value.note = p4;\n                    hap.value.gain = gain;\n                }\n                hap.value.color = hsvToRgb((p1 / instrument_count) * 360, 1, gain);\n                globalThis.haps_from_outputs.push(hap);\n            }\n        } catch (except) {\n            diagnostic('[csoundn] error: ' + except + '\\n', ERROR);\n        }\n    });\n});\n\nlet chordn_counter = 0;\n\n/**\n * Creates and initializes a CsoundAC Chord object. This function should be \n * called from module scope in Strudel code before creating any Patterns. The \n * Chord class is based on Dmitri Tymoczko's model of chord space, and \n * represents an equally tempered chord of the specified number of voices as \n * a single point in chord space, where each dimension of the space \n * corresponds to one voice of the Chord. Chords are equipped with numerous \n * operations from pragmatic music theory, atonal music theory, and \n * neo-Riemannian music theory.\n */\nexport function Chord(name) {\n    if (diagnostic_level() >= DEBUG) diagnostic('[csacChord] Creating Chord...\\n');\n    let chord_ = csoundac.chordForName(name);\n    if (diagnostic_level() >= DEBUG) diagnostic('[csacChord]:' + chord_.toString() + '\\n');\n    return chord_;\n}\n\n/**\n * Creates and initializes a CsoundAC Scale object. This function can be \n * called from module scope in Strudel code before creating any Patterns. The \n * Scale class is derived from the CsoundAC Chord class, but has been \n * equipped with additional methods based on Dimitri Tymoczko's model of \n * functional harmony. This enables algorithmically generating Chords from \n * scale degrees, transposing Chords by scale degrees, generating all \n * possible modulations given a pivot chord, and implementing secondary \n * dominants and tonicizations based on scale degree.\n */\nexport function Scale(name) {\n    name = name.replace('_', ' ');\n    if (diagnostic_level() >= DEBUG) diagnostic('[Scale] Creating Scale...\\n');\n    let scale_ = csoundac.scaleForName(name);\n    if (diagnostic_level() >= DEBUG) diagnostic('[Scale] ' + scale_.name() + '\\n');\n    return scale_;\n}\n\n/**\n * Creates and initializes a CsoundAC PITV object. This function should be \n * called from module scope in Strudel code before creating any Patterns. The \n * PITV object is a 4 dimensional cyclic group whose dimensions are TI set \n * class (P), chord inversion (I), pitch-class transposition (T), and index \n * of octavewise revoicing within the specified range (V). The elements of \n * the group are chords in 12 tone equal temperament with the specified \n * number of voices. There is a one-to-one mapping between PITV indices and \n * chords, such that each voiced chord corresponds to a PITV index, and each \n * PITV index corresponds to a voiced chord. This enables algorithmically \n * generating harmonies and voicings by independently varying P, I, T, and V.\n */\nexport function Pitv(voices, bass, range) {\n    if (diagnostic_level() >= DEBUG) diagnostic('[Pitv] Creating PITV group...\\n');\n    let pitv = new csoundac.PITV();\n    pitv.bass = bass;\n    pitv.initialize(voices, range, 1., false);\n    pitv.P = 0;\n    pitv.I = 0;\n    pitv.T = 0;\n    pitv.V = 0;\n    pitv.list(true, false, false);\n    return pitv;\n}\n\n/**\n * Creates a class to hold state, and defines Patterns for creating and using \n * that state to work with CsoundAC Chords. An instance of this class must be \n * created at module scope and passed to the relevant Patterns.\n *\n * Some hacks are used to co-ordinate state with triggers:\n *  - Assume that chord changes happen only once at any given time.\n *  - In the trigger, apply the input to the Pattern if and only if the input \n *    is different from the old input.\n */\nexport class ChordPatterns extends StatefulPatterns {\n    constructor(chord, modality) {\n        super();\n        this.registerPatterns();\n        if (typeof chord === 'string') {\n            this.ac_chord = csoundac.chordForName(chord);\n            if (diagnostic_level() >= DEBUG) diagnostic('[ChordPatterns] created new chord.\\n');\n        } else {\n            this.ac_chord = chord;            if (diagnostic_level() >= DEBUG) diagnostic('[ChordPatterns] using existing chord.\\n');\n        }\n        if (typeof modality == 'undefined') {\n            this.ac_modality = this.ac_chord;\n        } else {\n            this.ac_modality = modality;\n        }\n        this.prior_chord = this.ac_chord;\n        this.value = 0;\n        this.acC_counter = 0;\n        this.acC_chord_string = null;\n        this.acCT_counter = 0;\n        this.acCT_semitones = null\n        this.acCI_counter = 0;\n        this.acCI_center = null;\n        this.acCK_counter = 0;\n        this.acCK_state = null;\n        this.acCQ_counter = 0;\n        this.acCQ_semitones = null;\n        this.acCOP_counter = 0;\n        this.acCRP_counter = 0;\n        this.acCO_counter = 0;\n        this.acCV_counter = 0;\n        this.acCVV_counter = 0;\n        this.acCVVL_counter = 0;\n    }\n    /**\n     * Applies a Chord or chord name to this.\n     */\n    acC(is_onset, chord_id, hap) {\n        if (is_onset === true) {\n            if (typeof chord_id === 'string') {\n                this.ac_chord = csoundac.chordForName(chord_id);\n                if (diagnostic_level() >= DEBUG) diagnostic('[acC onset] created new Chord.\\n');\n            } else {\n                this.ac_scale = scale;\n                if (diagnostic_level() >= DEBUG) diagnostic('[acC onset] using existing Chord.\\n');\n            }\n            if (this.acS_chord_string != this.ac_chord.toString()) {\n                this.acS_chord_string = this.ac_chord.toString();\n                this.ac_chord = this.ac_scale.chord(1, this.voices, 3);\n                if (diagnostic_level() >= WARNING) {\n                    diagnostic(['[acS onset] new Chord:', this.ac_chord.toString(), this.ac_chord.name(), '\\n'].join(' '));\n                 }\n                this.acC_counter = this.acC_counter + 1;\n                if (diagnostic_level() >= INFORMATION) {\n                    print_counter('acC', this.acC_counter, hap);\n                }\n            }\n        }\n        return hap;\n    }\n    /**\n     * Applies a transposition to the Chord of this.\n     */\n    acCT(is_onset, semitones, hap) {\n        if (is_onset === true) {\n            if (this.acCT_semitones != semitones) {\n                this.acCT_semitones = semitones;\n                if (diagnostic_level() >= DEBUG) diagnostic(['[acCT onset] current chord:    ', this.ac_chord.toString(), this.ac_chord.eOP().name(), hap.show(), '\\n'].join(' '));\n                this.ac_chord = this.ac_chord.T(semitones);\n                if (diagnostic_level() >= WARNING) diagnostic(['[acCT onset] transformed chord:', this.ac_chord.toString(), this.ac_chord.eOP().name(), hap.show(), '\\n'].join(' '));\n                this.acCT_counter = this.acCT_counter + 1;\n                if (diagnostic_level() >= INFORMATION) {\n                    print_counter('acCT', this.acCT_counter, hap);\n                }\n            }\n        }\n        return hap;\n    }\n    /**\n     * Applies an inversion to the Chord of this. The transformation can be \n     * patternified with a Pattern of flips (changes in the value of the flip \n     * input).\n     */\n    acCI(is_onset, center, flip, hap) {\n        if (is_onset === true) {\n            if (this.acCI_flip != flip) {\n                this.acCI_flip = flip;\n                if (diagnostic_level() >= DEBUG) diagnostic(['[acCI] onset: current chord:    ', this.ac_chord.toString(), this.ac_chord.eOP().name(), hap.show(), '\\n'].join(' '));\n                this.ac_chord = this.ac_chord.I(center);\n                if (diagnostic_level() >= WARNING) diagnostic(['[acCI] onset: transformed chord:', this.ac_chord.toString(), this.ac_chord.eOP().name(), hap.show(), '\\n'].join(' '));\n                this.acCI_counter = this.acCI_counter + 1;\n                if (diagnostic_level() >= INFORMATION) {\n                    print_counter('acCI', this.acCI_counter, hap);\n                }\n            }\n        }\n        return hap;\n    }\n    /**\n     * Applies the interchange by inversion operation of the Generalized \n     * Contextual Group of Fiore and Satyendra to the Chord of this. The \n     * transformation can be patternified with a Pattern of flips (changes in \n     * the value of the flip input).\n     */\n    acCK(is_onset, flip, hap) {\n        if (is_onset === true) {\n            if (this.flip != flip) {\n                this.flip = flip;\n                if (diagnostic_level() >= DEBUG) diagnostic(['[acCK onset] current chord:    ', this.ac_chord.toString(), this.ac_chord.eOP().name(), hap.show(), '\\n'].join(' '));\n                this.ac_chord = this.ac_chord.K();\n                if (diagnostic_level() >= WARNING) diagnostic(['[acCK onset] transformed chord:', this.ac_chord.toString(), this.ac_chord.eOP().name(), hap.show(), '\\n'].join(' '));\n                this.acCK_counter = this.acCK_counter + 1;\n                if (diagnostic_level() >= INFORMATION) {\n                    print_counter('acCK', this.acCK_counter, hap);\n                }\n            }\n        }\n        return hap;\n    }\n    /**\n     * Applies the contexual transposition operation of the Generalized \n     * Contextual Group of Fiore and Satyendra to the Chord of this. The \n     * modality is set in the constructor of this class.\n     */\n     acCQ(is_onset, semitones, hap) {\n        if (is_onset === true) {\n            if (diagnostic_level() >= DEBUG) diagnostic(['[acCQ onset] current chord:    ', this.ac_chord.toString(), this.ac_chord.eOP().name(), hap.show(), '\\n'].join(' '));\n            this.ac_chord = this.ac_chord.Q(semitones, this.ac_modality, 1);\n            if (diagnostic_level() >= WARNING) diagnostic(['[acCQ onset] transformed chord:', this.ac_chord.toString(), this.ac_chord.eOP().name(), hap.show(), '\\n'].join(' '));\n            this.acCQ_counter = this.acCQ_counter + 1;\n            if (diagnostic_level() >= INFORMATION) {\n                print_counter('acCQ', this.acCQ_counter, hap);\n            }\n        }\n        return hap;\n    }\n    /**\n     * Transforms the Chord of this to its 'OP' form; 'chord' is an extremely \n     * flexible and therefore ambiguous term, but the 'OP' form is what most \n     * musicians usually mean by 'chord': A chord where the octaves of the \n     * pitches do not matter and the order of the voices does not matter. This \n     * transformation can be useful for returning chords that have been \n     * transformed such that their voices are out of range back to a more \n     * normal form.\n     */\n    acCOP(is_onset, hap) {\n        if (is_onset === true) {\n            if (diagnostic_level() >= DEBUG) diagnostic(['[acCOP onset] current chord:    ', this.ac_chord.toString(), this.ac_chord.eOP().name(), hap.show(), '\\n'].join(' '));\n            this.ac_chord = this.ac_chord.eOP();\n            if (diagnostic_level() >= WARNING) diagnostic(['[acCOP onset] transformed chord:', this.ac_chord.toString(), this.ac_chord.eOP().name(), hap.show(), '\\n'].join(' '));\n            this.acCOP_counter = this.acCOP_counter + 1;\n            if (diagnostic_level() >= INFORMATION) {\n                print_counter('acCOP', this.acCOP_counter, hap);\n            }\n        }\n        return hap;\n    }\n    /**\n     * Transforms the Chord of this to its 'RP' form; 'chord' is an extremely \n     * flexible and therefore ambiguous term, but the 'RP' form is a chord \n     * where the octaves are folded within the indicated range, and like 'OP'\n     * the order of the voices does not matter. This \n     * transformation can be useful for returning chords that have been \n     * transformed such that their voices are out of range back to a user-\n     * defined range.\n     */\n    acCRP(is_onset, range, hap) {\n        if (is_onset === true) {\n            if (diagnostic_level() >= DEBUG) diagnostic(['[acCRP onset] current chord:    ', this.ac_chord.toString(), this.ac_chord.eOP().name(), hap.show(), '\\n'].join(' '));\n            this.ac_chord = this.ac_chord.eRP(range);\n            if (diagnostic_level() >= WARNING) diagnostic(['[acCRP onset] transformed chord:', this.ac_chord.toString(), this.ac_chord.eOP().name(), hap.show(), '\\n'].join(' '));\n            this.acCRP_counter = this.acCRP_counter + 1;\n            if (diagnostic_level() >= INFORMATION) {\n                print_counter('acCRP', this.acCRP_counter, hap);\n            }\n        }\n        return hap;\n    }    \n    /**\n     * Applies the Chord of this to the _pitch-class_ of the Hap, i.e., moves \n     * the _pitch-class_ of the Hap to the nearest _pitch-class_ of the Chord.\n     */\n    acCV(is_onset, hap) {\n        if (is_onset === true) {\n            let frequency;\n            try {\n                frequency = getFrequency(hap);\n            } catch (error) {\n                diagnostic('[acCV value]: not a note!\\n');\n                return;\n            }\n            let current_midi_key = frequencyToMidiInteger(frequency);\n            let epcs = this.ac_chord.epcs();\n            if (diagnostic_level() >= DEBUG) diagnostic(['[acCV value] current chord:  ', this.ac_chord.toString(), this.ac_chord.eOP().name(), '\\n'].join(' '));\n            if (diagnostic_level() >= DEBUG) diagnostic(['[acCV value] current hap:    ', hap.show(), '\\n'].join(' '));\n            let note = csoundac.conformToPitchClassSet(current_midi_key, epcs);\n            hap = setPitch(hap, note);\n            ChordPatterns.acCV_counter = ChordPatterns.acCV_counter + 1;\n            if (diagnostic_level() >= WARNING) diagnostic(['[acCV value] new hap:        ', hap.show(), '\\n'].join(' '));   \n            if (diagnostic_level() >= INFORMATION) {\n                print_counter('acCV onset', ChordPatterns.acCV_counter, hap);\n            }\n        } else {\n            let frequency;\n            try {\n                frequency = getFrequency(hap);\n            } catch (error) {\n                diagnostic('[acCV value]: not a note!\\n');\n                return;\n            }\n            let current_midi_key = frequencyToMidiInteger(frequency);\n            let epcs = this.ac_chord.epcs();\n            if (diagnostic_level() >= DEBUG) diagnostic(['[acCV value] current chord:  ', this.ac_chord.toString(), this.ac_chord.eOP().name(), '\\n'].join(' '));\n            if (diagnostic_level() >= DEBUG) diagnostic(['[acCV value] current hap:    ', hap.show(), '\\n'].join(' '));\n            let note = csoundac.conformToPitchClassSet(current_midi_key, epcs);\n            hap = setPitch(hap, note);\n            //~ if (diagnostic_level() >= DEBUG) diagnostic(['[acCV value] new hap:        ', hap.show(), '\\n'].join(' '));\n            //~ if (diagnostic_level() >= INFORMATION) {\n                //~ print_counter('acCV value', ChordPatterns.acCV_counter, hap);\n            //~ }\n        }\n        return hap;\n    }\n\n    /**  \n     * acCO:      Transforms the Chord of this by the indicated number of \n     *            octavewise revoicings: negative means subtract an octave \n     *            from the highest voice, positive means add an octave to the \n     *            lowest voice. This corresponds to the musician's notion of \n     *            \"inversion.\"\n     */\n    acCO(is_onset, revoicings, hap) {\n        if (is_onset) {\n            if (diagnostic_level() >= DEBUG) diagnostic(['[acCO] onset: current chord:    ', this.ac_chord.toString(), this.ac_chord.eOP().name(), hap.show(), '\\n'].join(' '));\n            this.ac_chord = this.ac_chord.v(revoicings);\n            if (diagnostic_level() >= WARNING) diagnostic(['[acCO] onset: transformed chord:', this.ac_chord.toString(), this.ac_chord.eOP().name(), hap.show(), '\\n'].join(' '));\n            this.acCO_counter = this.acCO_counter + 1;\n            if (diagnostic_level() >= INFORMATION) {\n                print_counter('acCO', this.acCO_counter, hap);\n            }\n            this.prior_chord = this.ac_chord;  \n        }\n        return hap;       \n    }\n    \n    /**\n     * acCVV:      Generate a note that represents a particular voice of the \n     *             Chord.\n     */\n    acCVV(is_onset, bass, voice, hap) {\n        let new_midi_key = bass + this.ac_chord.getPitch(voice);\n        hap = setPitch(hap, new_midi_key);\n        if (diagnostic_level() >= DEBUG) diagnostic(['[acCVV value]:', 'new_midi_key:', new_midi_key, 'new note:', hap.show(), '\\n'].join(' '));\n        this.prior_chord = this.ac_chord;  \n        return hap;\n    }\n    /**\n     * acCVVL:     Generate a note that represents a particular voice of the \n     *             Chord, as the closest voice-leading from the prior Chord.\n     */\n    acCVVL(is_onset, bass, range, voice, hap) {\n        if (this.prior_chord != this.ac_chord) {\n            let new_chord = csoundac.voiceleadingClosestRange(this.prior_chord, this.ac_chord, range, true);\n            const message = ['[acCVVL]:', '\\n  prior_chord: ', this.prior_chord.toString(), '\\n  ac_chord:    ', this.ac_chord.toString(), '\\n  new ac_chord:',new_chord.toString() + '\\n'].join(' ');\n            if (diagnostic_level() >= DEBUG) diagnostic(message);\n            console.log(message);\n            this.ac_chord = new_chord;\n        }\n        let new_midi_key = bass + this.ac_chord.getPitch(voice);\n        hap = setPitch(hap, new_midi_key);\n        if (diagnostic_level() >= DEBUG) diagnostic(['[acCVVL value]:', 'new_midi_key:', new_midi_key, 'new note:', hap.show(), '\\n'].join(' '));\n        this.prior_chord = this.ac_chord;  \n        return hap;\n    }\n}\n\n/**\n * Creates a class to hold state, and defines Patterns for creating and using \n * that state to work with CsoundAC Scales. An instance of this class must be \n * created at module scope and passed to the relevant Patterns. The \n * constructor sets the number of voices in Chords associated with the Scale,\n * by default 4.\n *\n * State is co-ordinated with the triggers of the Patterns by only updating \n * the state when the input of the Pattern changes.\n*/\nexport class ScalePatterns extends StatefulPatterns {\n    constructor(scale, voices = 3) {\n        super();\n        this.registerPatterns();\n        this.voices = voices;\n        if (typeof scale === 'string') {\n            // Have to use underscores instead of spaces in the Strudel REPL.\n            scale = scale.replace('_', ' ');\n            this.ac_scale = csoundac.scaleForName(scale);\n            if (diagnostic_level() >= WARNING) diagnostic('[acS onset] created new scale.\\n');\n        } else {\n            this.ac_scale = scale;\n            if (diagnostic_level() >= DEBUG) diagnostic('[acS onset] using existing scale.\\n');\n        }\n        this.ac_chord = this.ac_scale.chord(1, this.voices, 3);\n        this.prior_chord = this.ac_chord;\n        this.acS_counter = 0;\n        this.acS_scale_string = null;\n        this.acSS_counter = 0;\n        this.acSS_scale_step = null;\n        this.acST_counter = 0;\n        this.acST_scale_steps = null;\n        this.acSM_counter = 0;\n        this.acSM_index = null;\n        this.acSO_counter = 0;\n        this.acSV_counter = 0;\n        this.acSCV_counter = 0;\n \n    }\n    /**\n     * acS:        Insert a CsoundAC Scale into the Pattern's state.\n     */\n    acS(is_onset, scale, hap) {\n        if (is_onset === true) {\n            if (typeof scale === 'string') {\n                // Have to use underscores instead of spaces in the Strudel REPL.\n                scale = scale.replace('_', ' ');\n                this.ac_scale = csoundac.scaleForName(scale);\n                if (diagnostic_level() >= DEBUG) diagnostic('[acS onset] created new scale.\\n');\n            } else {\n                this.ac_scale = scale;\n                if (diagnostic_level() >= DEBUG) diagnostic('[acS onset] using existing scale.\\n');\n            }\n            if (this.acS_scale_string != this.ac_scale.toString()) {\n                this.acS_scale_string = this.ac_scale.toString();\n                this.ac_chord = this.ac_scale.chord(1, this.voices, 3);\n                if (diagnostic_level() >= WARNING) {\n                    diagnostic(['[acS onset] new scale:', this.ac_scale.toString(), this.ac_scale.name(), '\\n'].join(' '));\n                    diagnostic(['[acS onset] new chord:', this.ac_chord.toString(), this.ac_chord.name(), '\\n'].join(' '));\n                }\n                this.acS_counter = this.acS_counter + 1;\n                if (diagnostic_level() >= INFORMATION) {\n                    print_counter('acS', this.acS_counter, hap);\n                }\n            }\n        }\n        return hap;\n    }\n    /** \n     * acSS:       Insert the Chord at the specified scale step of the Scale in \n     *             the Pattern's state, into the state.\n     */\n    acSS(is_onset, scale_step, hap) {\n        if (is_onset === true) {\n            if (this.acSS_scale_step != scale_step) {\n                this.acSS_scale_step = scale_step;\n                if (diagnostic_level() >= DEBUG) diagnostic(['[acSS onset] current chord:    ', this.ac_chord.toString(), this.ac_chord.eOP().name(), '\\n'].join(' '));\n                this.ac_chord = this.ac_scale.chord(scale_step, this.voices, 3);\n                if (diagnostic_level() >= WARNING) diagnostic(['[acSS onset] transformed chord:', this.ac_chord.toString(), this.ac_chord.eOP().name(), '\\n'].join(' '));\n                this.acSS_counter = this.acSS_counter + 1;\n                if (diagnostic_level() >= INFORMATION) {\n                    print_counter('acSS', this.acSS_counter, hap);\n                }\n            }\n        }  \n        return hap;\n    }\n    /**\n     * acST:       Transpose the Chord in the Pattern's state by the specified \n     *             number of scale steps in the Scale in the state.\n     */\n    acST(is_onset, scale_steps, hap) {\n        if (is_onset === true) {\n            if (this.acST_scale_steps != scale_steps) {\n                this.acST_scale_steps = scale_steps;\n                if (diagnostic_level() >= WARNING) diagnostic(['[acST onset] current chord:    ', this.ac_chord.toString(), this.ac_chord.eOP().name(), '\\n'].join(' '));\n                this.ac_chord = this.ac_scale.transpose_degrees(this.ac_chord, scale_steps, 3);    \n                if (diagnostic_level() >= WARNING) diagnostic(['[acST onset] transformed chord:', this.ac_chord.toString(), this.ac_chord.eOP().name(), '\\n'].join(' '));\n                this.acST_counter = this.acST_counter + 1;\n                if (diagnostic_level() >= INFORMATION) {\n                    print_counter('acST', this.acST_counter, hap);\n                }\n            }\n        }\n        return hap;\n    }\n    /**\n     * acSM:       Modulate from the Scale in the Pattern's state, using the \n     *             Chord in the state as a pivot, choosing one of the possible \n     *             modulations by index.\n     */\n    acSM(is_onset, index, hap) {\n        if (is_onset === true) {\n             if (this.acSM_index != index) {\n                this.acSM_index = index;\n                let pivot_chord_eop = this.ac_chord.eOP();\n                let possible_modulations = this.ac_scale.modulations(pivot_chord_eop);\n                let new_scale = this.ac_scale;\n                let modulation_count = possible_modulations.size();\n                let wrapped_index = -1;\n                if (modulation_count > 0) {\n                    wrapped_index = index % modulation_count;\n                    new_scale = possible_modulations.get(wrapped_index);\n                    if (diagnostic_level() >= WARNING) {\n                        diagnostic('[acSM onset] modulating in: ' + this.ac_scale.toString() + ' ' + this.ac_scale.name() + '\\n');\n                        diagnostic('[acSM onset] from pivot:    ' + pivot_chord_eop.toString(), + ' ' + pivot_chord_eop.name() + '\\n');\n                        diagnostic('[acSM onset] modulations:   ' + modulation_count + ' => ' + wrapped_index + '\\n');\n                        diagnostic('[acSM onset] modulated to:  ' + new_scale.toString() + ' ' + new_scale.name() + '\\n');\n                        diagnostic('[acSM onset] hap:           ' + hap.show() + '\\n');\n                    }\n                    this.ac_scale = new_scale;\n                }\n                this.acSM_counter = this.acSM_counter + 1;\n                if (diagnostic_level() >= INFORMATION) {\n                    print_counter('acSM', this.acSM_counter, hap);\n                }\n            }\n        }\n        return hap;\n    }\n    /**\n     * acSV:       Move notes in the Pattern to fit the Scale in the Pattern's \n     *             state.\n     */\n    acSV(is_onset, hap) {\n        if (is_onset === true) {\n            let frequency;\n            try {\n                frequency = getFrequency(hap);\n            } catch (error) {\n                diagnostic('[acSV value] not a note!\\n');\n                return;\n            }\n            let current_midi_key = frequencyToMidiInteger(frequency);\n            let epcs = this.ac_scale.epcs();\n            if (diagnostic_level() >= DEBUG) diagnostic(['[acSV value] current scale:  ', this.ac_scale.toString(), this.ac_scale.eOP().name(), '\\n'].join(' '));\n            if (diagnostic_level() >= DEBUG) diagnostic(['[acSV value] current hap:    ', hap.show(), '\\n'].join(' '));\n            let note = csoundac.conformToPitchClassSet(current_midi_key, epcs);\n            hap = setPitch(hap, note);\n            if (diagnostic_level() >= WARNING) diagnostic(['[acSV value] new hap:        ', hap.show(), '\\n'].join(' '));\n            this.acSV_counter = this.acSV_counter + 1;\n            if (diagnostic_level() >= INFORMATION) {\n                print_counter('acSV', this.acSV_counter, hap);\n            }\n        } else {\n            let frequency;\n            try {\n                frequency = getFrequency(hap);\n            } catch (error) {\n                diagnostic('[acSV value] not a note!\\n');\n                return;\n            }\n            let current_midi_key = frequencyToMidiInteger(frequency);\n            let epcs = this.ac_scale.epcs();\n            if (diagnostic_level() >= DEBUG) diagnostic(['[acSV value] current scale:  ', this.ac_scale.toString(), this.ac_scale.eOP().name(), '\\n'].join(' '));\n            if (diagnostic_level() >= DEBUG) diagnostic(['[acSV value] current hap:    ', hap.show(), '\\n'].join(' '));\n            let note = csoundac.conformToPitchClassSet(current_midi_key, epcs);\n            hap = setPitch(hap, note);\n            if (diagnostic_level() >= DEBUG) diagnostic(['[acSV value] new hap:        ', hap.show(), '\\n'].join(' '));\n        }\n        return hap;\n    }\n    /**\n     * acSCV:      Move notes in the Pattern to fit the Chord in the Pattern's \n     *             state.\n     */\n    acSCV(is_onset, hap) {\n        if (is_onset === true) {\n            let frequency;\n            try {\n                frequency = getFrequency(hap);\n            } catch (error) {\n                diagnostic('[acSCV value] not a note!\\n');\n                return;\n            }\n            let current_midi_key = frequencyToMidiInteger(frequency);\n            let epcs = this.ac_chord.epcs();\n            if (diagnostic_level() >= DEBUG) diagnostic(['[acSCV onset] current scale:  ', this.ac_scale.toString(), this.ac_scale.eOP().name(), '\\n'].join(' '));\n            if (diagnostic_level() >= DEBUG) diagnostic(['[acSCV onset] current chord:  ', this.ac_chord.toString(), this.ac_chord.eOP().name(), '\\n'].join(' '));\n            if (diagnostic_level() >= DEBUG) diagnostic(['[acSCV onset] current hap:    ', hap.show(), '\\n'].join(' '));\n            let note = csoundac.conformToPitchClassSet(current_midi_key, epcs);\n            hap = setPitch(hap, note);\n            if (diagnostic_level() >= WARNING) diagnostic(['[acSCV onset] new hap:        ', hap.show(), '\\n'].join(' '));\n            this.acSCV_counter = this.acSCV_counter + 1;\n            if (diagnostic_level() >= INFORMATION) {\n                print_counter('acSCV', this.acSCV_counter, hap);\n            }\n        } else {\n            let frequency;\n            try {\n                frequency = getFrequency(hap);\n            } catch (error) {\n                diagnostic('[acSCV value] not a note!\\n');\n                return;\n            }\n            let current_midi_key = frequencyToMidiInteger(frequency);\n            let epcs = this.ac_chord.epcs();\n            if (diagnostic_level() >= DEBUG) diagnostic(['[acSCV value] current scale:  ', this.ac_scale.toString(), this.ac_scale.eOP().name(), '\\n'].join(' '));\n            if (diagnostic_level() >= DEBUG) diagnostic(['[acSCV value] current chord:  ', this.ac_chord.toString(), this.ac_chord.eOP().name(), '\\n'].join(' '));\n            if (diagnostic_level() >= DEBUG) diagnostic(['[acSCV value] current hap:    ', hap.show(), '\\n'].join(' '));\n            let note = csoundac.conformToPitchClassSet(current_midi_key, epcs);\n            hap = setPitch(hap, note);\n            if (diagnostic_level() >= DEBUG) diagnostic(['[acSCV value] new hap:        ', hap.show(), '\\n'].join(' '));\n            this.acSCV_counter = this.acSCV_counter + 1;\n         }\n        return hap;\n    }\n    /**  \n     * acSO:      Transforms the Chord of this by the indicated number of \n     *            octavewise revoicings: negative means subtract an octave \n     *            from the highest voice, positive means add an octave to the \n     *            lowest voice. This corresponds to the musician's notion of \n     *            \"inversion.\"\n     */\n    acSO(is_onset, revoicings, hap) {\n        if (is_onset) {\n            if (diagnostic_level() >= DEBUG) diagnostic(['[acSO] onset: current chord:    ', this.ac_chord.toString(), this.ac_chord.eOP().name(), hap.show(), '\\n'].join(' '));\n            this.ac_chord = this.ac_chord.v(revoicings);\n            if (diagnostic_level() >= WARNING) diagnostic(['[acSO] onset: transformed chord:', this.ac_chord.toString(), this.ac_chord.eOP().name(), hap.show(), '\\n'].join(' '));\n            this.acSO_counter = this.acSO_counter + 1;\n            if (diagnostic_level() >= INFORMATION) {\n                print_counter('acSO', this.acSO_counter, hap);\n            }\n            this.prior_chord = this.ac_chord;  \n        }\n        return hap;       \n    }\n    \n        /**\n     * acSVV:      Generate a note that represents a particular voice of the \n     *             Chord of this.\n     */\n    acCVV(is_onset, bass, voice, hap) {\n        let new_midi_key = bass + this.ac_chord.getPitch(voice);\n        hap = setPitch(hap, new_midi_key);\n        if (diagnostic_level() >= DEBUG) diagnostic(['[acCVV value]:', 'new_midi_key:', new_midi_key, 'new note:', hap.show(), '\\n'].join(' '));\n        this.prior_chord = this.ac_chord;  \n        return hap;\n    }\n    /**\n     * acSVVL:     Generate a note that represents a particular voice of the \n     *             current Chord, as the closest voice-leading from the prior \n     *             Chord.\n     */\n    acSVVL(is_onset, bass, range, voice, hap) {\n        if (this.prior_chord != this.ac_chord) {\n            this.ac_chord = csoundac.voiceleadingClosestRange(this.prior_chord, this.ac_chord, range, true);\n        }\n        let new_midi_key = bass + this.ac_chord.getPitch(voice);\n        hap = setPitch(hap, new_midi_key);\n        if (diagnostic_level() >= DEBUG) diagnostic(['[acSVVL value]:', 'new_midi_key:', new_midi_key, 'new note:', hap.show(), '\\n'].join(' '));\n        this.prior_chord = this.ac_chord;  \n        return hap;\n    }}\n\n/**\n * Creates a class to hold state and defines Patterns for creating and using \n * that state to work with CsoundAC PITV groups. An instance of this class \n * must be created at module scope and passed to the relevant Patterns.\n */\nexport class PitvPatterns extends StatefulPatterns {\n    constructor(pitv) {\n        super();\n        this.registerPatterns();\n        this.prior_chord = null;\n        this.pitv = pitv;\n        this.acPP_counter = 0;\n        this.acPP_P = null;\n        this.acPI_counter = 0;\n        this.acPI_I = null;\n        this.acPT_counter = 0;\n        this.acPT_T = null;\n        this.acPV_counter = 0;\n        this.acPV_V = null;\n        this.acPO_counter = 0;\n        this.acPO_value = null;\n        this.acPC_counter = 0;\n        this.acPVS_counter = 0;\n        this.acPVV_counter = 0;\n    }\n    /**\n     * acP:        Insert a CsoundAC PITV group into the Pattern's state.\n     */\n    acP(is_onset, pitv, hap) {\n        if (is_onset == true) {\n            if (diagnostic_level() >= DEBUG) diagnostic(['[acP onset] current PITV:  ', this.this.pitv.list(true, true, false), '\\n'].join(' '));\n            this.pitv = pitv;\n            this.acP_counter = this.acP_counter + 1;\n            if (diagnostic_level() >= INFORMATION) {\n                print_counter('acP', this.acP_counter, hap);\n            }\n        } \n        return hap;\n    }\n    /**\n     * acPP:       Set the prime form index of the PITV element in the Pattern's \n     *             state.\n     */\n    acPP(is_onset, P, hap) {\n        if (is_onset === true) {\n            if (this.acPP_P != P) {\n                this.acPP_P = P;\n                this.pitv.P = P;\n                this.acPP_counter = this.acPP_counter + 1;\n                if (diagnostic_level() >= INFORMATION) {\n                    print_counter('acPP', this.acPP_counter, hap);\n                }\n            }\n        }\n        return hap;\n    }\n\n    static acPI_counter = 1;\n\n    /**\n     * acPI:       Set the inversion index of the PITV element in the Pattern's \n     *             state.\n     */\n    acPI(is_onset, I, hap) {\n        if (is_onset === true) {\n            if (this.acPI_I != I) {\n                this.acPI_I = I;\n                this.pitv.I = I;\n                this.acPI_counter = this.acPI_counter + 1;\n                if (diagnostic_level() >= INFORMATION) {\n                    print_counter('acPI', this.acPI_counter, hap);\n                }\n            }\n        }\n        return hap;\n    }\n    /**\n     * acPT:       Set the transposition index of the PITV element in the \n     *             Pattern's state.\n     */\n    acPT(is_onset, T, hap) {\n        if (is_onset === true) {\n            if (this.acPT_T != T) {\n                this.acPT_T = T;\n                this.pitv.T = T;\n                this.acPT_counter = this.acPT_counter + 1;\n                if (diagnostic_level() >= INFORMATION) {\n                    print_counter('acPT', this.acPT_counter, hap);\n                }\n            }\n        }\n        return hap;\n    }\n    /**\n     * acPO:       Set the octavewise voicing index of the PITV element in the \n     *             Pattern's state.\n     */\n    acPO(is_onset, V, hap) {\n        if (is_onset == true) {\n            if (this.acPO_O != V) {\n                this.acPO_O = V;\n                this.pitv.V = V;\n                this.acPO_counter = this.acPO_counter + 1;\n                if (diagnostic_level() >= INFORMATION) {\n                    print_counter('acPO', this.acPO_counter, hap);\n                }\n            }\n        }\n        return hap;\n    }\n    /**\n     * acPC:       Insert the Chord corresponding to the PITV element into the \n     *             Pattern's state.\n     */\n    acPC(is_onset, hap) {\n        if (is_onset === true) {\n            this.ac_chord = this.pitv.toChord(this.pitv.P, this.pitv.I, this.pitv.T, this.pitv.V, true).get(0);\n            if (diagnostic_level() >= WARNING) diagnostic(['[acPC onset]:', this.ac_chord.toString(), this.ac_chord.eOP().name(), '\\n'].join(' '));\n            this.acPC_counter = this.acPC_counter + 1;\n            if (diagnostic_level() >= INFORMATION) {\n                print_counter('acPC', this.acPC_counter, hap);\n            }\n        }\n        return hap;\n    }\n    /**\n     * acPV:       Move notes in the Pattern to fit the pitch-class set of the \n     *             element of the PITV group in the Pattern's state.\n     */\n    acPV(is_onset, hap) {\n        let frequency;\n        try {\n            frequency = getFrequency(hap);\n        } catch (error) {\n            diagnostic('[acPV] not a note!\\n', WARNING);\n            return;\n        }\n        let current_midi_key = frequencyToMidiInteger(frequency);\n        let result = this.pitv.toChord(this.pitv.P, this.pitv.I, this.pitv.T, this.pitv.V, true);\n        let eop = result.get(1);\n        let epcs = eop.epcs();\n        let new_midi_key = csoundac.conformToPitchClassSet(current_midi_key, epcs);\n        hap = setPitch(hap, new_midi_key);\n        if (diagnostic_level() >= DEBUG) diagnostic(['[acPV value]:', eop.toString(), eop.name(), 'old note:', current_midi_key, 'new note:', hap.show(), '\\n'].join(' '));\n        this.prior_chord = result.get(0);\n        return hap;\n    }\n    /**\n     * acPVV:      Generate a note that represents a particular voice of the \n     *             Chord.\n     */\n    acPVV(is_onset, voice, hap) {\n        let voiced_chord = this.pitv.toChord(this.pitv.P, this.pitv.I, this.pitv.T, this.pitv.V, true).get(0);\n        let new_midi_key = voiced_chord.getPitch(voice) + this.pitv.bass;\n        hap = setPitch(hap, new_midi_key);\n        if (diagnostic_level() >= DEBUG) diagnostic(['[acPVV value]:', 'new_midi_key:', new_midi_key, 'new note:', hap.show(), '\\n'].join(' '));\n        this.prior_chord = voiced_chord;\n        return hap;\n    }    \n    /**\n     * acPVVL:     Generate a note that represents a particular voice of the \n     *             Chord, as the closest voice-leading from the prior element of this.\n     */\n   acPVVL(is_onset, voice, hap) {\n       this.ac_chord = this.pitv.toChord(this.pitv.P, this.pitv.I, this.pitv.T, this.pitv.V, true).get(0);\n       if (this.prior_chord != this.ac_chord) {\n            this.ac_chord = csoundac.voiceleadingClosestRange(this.prior_chord, this.ac_chord, range, true);\n       }\n       let new_midi_key = this.ac_chord.getPitch(voice) + this.pitv.bass;\n       hap = setPitch(hap, new_midi_key);\n       if (diagnostic_level() >= DEBUG) diagnostic(['[acPVVL value]:', 'new_midi_key:', new_midi_key, 'new note:', hap.show(), '\\n'].join(' '));\n       this.prior_chord = this.ac_chord;\n       return hap;\n   }\n}\n\n\n\n",
    "static": true,
    "longname": "/Users/michaelgogins/cloud-5/public/csoundac.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 141,
    "kind": "variable",
    "name": "csound",
    "memberof": "public/csoundac.mjs",
    "static": true,
    "longname": "public/csoundac.mjs~csound",
    "access": "public",
    "export": false,
    "importPath": "./public/csoundac.mjs",
    "importStyle": null,
    "description": "C S O U N D A C   M O D U L E   F O R   S T R U D E L\n\nAuthor: Michael Gogins\n\n[csound-ac](https://github.com/gogins/csound-ac), or CsoundAC, is a C++ \nalgorithmic composition library designed for use with Csound.\n\n[csound-wasm](https://github.com/gogins/csound-wasm) is a WebAssembly \nlibrary containing both Csound and CsoundAC, with a JavaScript API, \ndesigned for use in Web browsers and npm applications.\n\nThis module brings chords and scales, and operations upon them, \nfrom the CsoundAC library for algorithmic composition into the \nStrudel (Tidal Cycles-based) JavaScript pattern language. This is \ndone by deriving from the StatefulPatterns class new classes whose \nmember functions become Patterns.\n\nAnother use of StatefulPatterns is to define algorithmic note generators, \noften driven by a `pure` pattern that acts as a clock.\n\nPlease note, however, that this module, although it defines a number of \nPatterns, is not built into Strudel and is designed to be dynamically \nimported in patches created by users in the Strudel REPL. Therefore, code \nin this module, as with all other modules directly imported in code \nrun by the Strudel REPL, must not use template strings.",
    "lineNumber": 28,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "variable",
    "name": "csoundac",
    "memberof": "public/csoundac.mjs",
    "static": true,
    "longname": "public/csoundac.mjs~csoundac",
    "access": "public",
    "export": false,
    "importPath": "./public/csoundac.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "variable",
    "name": "audioContext",
    "memberof": "public/csoundac.mjs",
    "static": true,
    "longname": "public/csoundac.mjs~audioContext",
    "access": "public",
    "export": false,
    "importPath": "./public/csoundac.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 144,
    "kind": "function",
    "name": "track",
    "memberof": "public/csoundac.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "public/csoundac.mjs~track",
    "access": "public",
    "export": true,
    "importPath": "./public/csoundac.mjs",
    "importStyle": "{track}",
    "description": "Similar to `arrange,` but permits a section to be silenced by setting its \nnumber of cycles to 0; `sections` is an array of arrays, in the format \n`[[cycles, Pattern],...]`. Useful for assembling Patterns into longer-form \ncompositions.",
    "lineNumber": 41,
    "params": [
      {
        "name": "sections",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "function",
    "name": "getFrequency",
    "memberof": "public/csoundac.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "public/csoundac.mjs~getFrequency",
    "access": "public",
    "export": false,
    "importPath": "./public/csoundac.mjs",
    "importStyle": null,
    "description": "Returns the frequency corresponding to any of various ways that pitch \nis represented in Strudel events.",
    "lineNumber": 54,
    "params": [
      {
        "name": "hap",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 146,
    "kind": "function",
    "name": "setPitch",
    "memberof": "public/csoundac.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "public/csoundac.mjs~setPitch",
    "access": "public",
    "export": true,
    "importPath": "./public/csoundac.mjs",
    "importStyle": "{setPitch}",
    "description": "A utility that assigns a pitch represented as a MIDI key number to the Hap, \nusing the existing pitch property if it exists.",
    "lineNumber": 80,
    "params": [
      {
        "name": "hap",
        "types": [
          "*"
        ]
      },
      {
        "name": "midi_key",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 147,
    "kind": "function",
    "name": "frequencyToMidiReal",
    "memberof": "public/csoundac.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "public/csoundac.mjs~frequencyToMidiReal",
    "access": "public",
    "export": true,
    "importPath": "./public/csoundac.mjs",
    "importStyle": "{frequencyToMidiReal}",
    "description": "A utility that returns the MIDI key number for a frequency in Hz, \nas a real number allowing fractions for microtones.",
    "lineNumber": 102,
    "params": [
      {
        "name": "frequency",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "function",
    "name": "frequencyToMidiInteger",
    "memberof": "public/csoundac.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "public/csoundac.mjs~frequencyToMidiInteger",
    "access": "public",
    "export": true,
    "importPath": "./public/csoundac.mjs",
    "importStyle": "{frequencyToMidiInteger}",
    "description": "A utility that returns the MIDI key number for a frequency in Hz, \nas the nearest integer.",
    "lineNumber": 113,
    "params": [
      {
        "name": "frequency",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 149,
    "kind": "function",
    "name": "Clone",
    "memberof": "public/csoundac.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "public/csoundac.mjs~Clone",
    "access": "public",
    "export": true,
    "importPath": "./public/csoundac.mjs",
    "importStyle": "{Clone}",
    "description": "A utility for making a _value_ copy of a Chord (or a Scale, which \nis derived from Chord). Object b is resized to the size of a, and a's \npitches are copied to b. Currently, only pitches are copied.",
    "lineNumber": 123,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 150,
    "kind": "function",
    "name": "print_counter",
    "memberof": "public/csoundac.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "public/csoundac.mjs~print_counter",
    "access": "public",
    "export": true,
    "importPath": "./public/csoundac.mjs",
    "importStyle": "{print_counter}",
    "description": null,
    "lineNumber": 133,
    "undocument": true,
    "params": [
      {
        "name": "pattern",
        "types": [
          "*"
        ]
      },
      {
        "name": "counter",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 151,
    "kind": "variable",
    "name": "instrument_count",
    "memberof": "public/csoundac.mjs",
    "static": true,
    "longname": "public/csoundac.mjs~instrument_count",
    "access": "public",
    "export": false,
    "importPath": "./public/csoundac.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 143,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 152,
    "kind": "function",
    "name": "set_instrument_count",
    "memberof": "public/csoundac.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "public/csoundac.mjs~set_instrument_count",
    "access": "public",
    "export": true,
    "importPath": "./public/csoundac.mjs",
    "importStyle": "{set_instrument_count}",
    "description": null,
    "lineNumber": 145,
    "undocument": true,
    "params": [
      {
        "name": "new_count",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 153,
    "kind": "function",
    "name": "hsvToRgb",
    "memberof": "public/csoundac.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "public/csoundac.mjs~hsvToRgb",
    "access": "public",
    "export": true,
    "importPath": "./public/csoundac.mjs",
    "importStyle": "{hsvToRgb}",
    "description": null,
    "lineNumber": 151,
    "undocument": true,
    "params": [
      {
        "name": "h",
        "types": [
          "*"
        ]
      },
      {
        "name": "s",
        "types": [
          "*"
        ]
      },
      {
        "name": "v",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 154,
    "kind": "variable",
    "name": "csoundn_counter",
    "memberof": "public/csoundac.mjs",
    "static": true,
    "longname": "public/csoundac.mjs~csoundn_counter",
    "access": "public",
    "export": false,
    "importPath": "./public/csoundac.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 185,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 155,
    "kind": "variable",
    "name": "csoundn",
    "memberof": "public/csoundac.mjs",
    "static": true,
    "longname": "public/csoundac.mjs~csoundn",
    "access": "public",
    "export": true,
    "importPath": "./public/csoundac.mjs",
    "importStyle": "{csoundn}",
    "description": "Sends notes to Csound for rendering with MIDI semantics. The Hap value is\ntranslated to Csound pfields as follows:\n\n p1 -- Csound instrument either as a number (1-based, can be a fraction),\n       or as a string name.\n p2 -- time in beats (usually seconds) from start of performance.\n p3 -- duration in beats (usually seconds).\n p4 -- MIDI key number from Strudel's Hap value (as a real number, not an \n       integer, in [0, 127].\n p5 -- MIDI velocity from Strudel's `gain` control (as a real number, not \n       an integer, in [0, 127].\n p6 -- Spatial depth dimension, from a `depth` control, defaulting to 0.\n p7 -- Spatial pan dimension, from Strudel's `pan` control, in [0, 1],\n       defaulting to 0.5.\n p8 -- Spatial height dimension, from a `height` control, defaulting to 0.",
    "lineNumber": 204,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 156,
    "kind": "variable",
    "name": "chordn_counter",
    "memberof": "public/csoundac.mjs",
    "static": true,
    "longname": "public/csoundac.mjs~chordn_counter",
    "access": "public",
    "export": false,
    "importPath": "./public/csoundac.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 289,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 157,
    "kind": "function",
    "name": "Chord",
    "memberof": "public/csoundac.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "public/csoundac.mjs~Chord",
    "access": "public",
    "export": true,
    "importPath": "./public/csoundac.mjs",
    "importStyle": "{Chord}",
    "description": "Creates and initializes a CsoundAC Chord object. This function should be \ncalled from module scope in Strudel code before creating any Patterns. The \nChord class is based on Dmitri Tymoczko's model of chord space, and \nrepresents an equally tempered chord of the specified number of voices as \na single point in chord space, where each dimension of the space \ncorresponds to one voice of the Chord. Chords are equipped with numerous \noperations from pragmatic music theory, atonal music theory, and \nneo-Riemannian music theory.",
    "lineNumber": 301,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 158,
    "kind": "function",
    "name": "Scale",
    "memberof": "public/csoundac.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "public/csoundac.mjs~Scale",
    "access": "public",
    "export": true,
    "importPath": "./public/csoundac.mjs",
    "importStyle": "{Scale}",
    "description": "Creates and initializes a CsoundAC Scale object. This function can be \ncalled from module scope in Strudel code before creating any Patterns. The \nScale class is derived from the CsoundAC Chord class, but has been \nequipped with additional methods based on Dimitri Tymoczko's model of \nfunctional harmony. This enables algorithmically generating Chords from \nscale degrees, transposing Chords by scale degrees, generating all \npossible modulations given a pivot chord, and implementing secondary \ndominants and tonicizations based on scale degree.",
    "lineNumber": 318,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 159,
    "kind": "function",
    "name": "Pitv",
    "memberof": "public/csoundac.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "public/csoundac.mjs~Pitv",
    "access": "public",
    "export": true,
    "importPath": "./public/csoundac.mjs",
    "importStyle": "{Pitv}",
    "description": "Creates and initializes a CsoundAC PITV object. This function should be \ncalled from module scope in Strudel code before creating any Patterns. The \nPITV object is a 4 dimensional cyclic group whose dimensions are TI set \nclass (P), chord inversion (I), pitch-class transposition (T), and index \nof octavewise revoicing within the specified range (V). The elements of \nthe group are chords in 12 tone equal temperament with the specified \nnumber of voices. There is a one-to-one mapping between PITV indices and \nchords, such that each voiced chord corresponds to a PITV index, and each \nPITV index corresponds to a voiced chord. This enables algorithmically \ngenerating harmonies and voicings by independently varying P, I, T, and V.",
    "lineNumber": 338,
    "params": [
      {
        "name": "voices",
        "types": [
          "*"
        ]
      },
      {
        "name": "bass",
        "types": [
          "*"
        ]
      },
      {
        "name": "range",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 160,
    "kind": "class",
    "name": "ChordPatterns",
    "memberof": "public/csoundac.mjs",
    "static": true,
    "longname": "public/csoundac.mjs~ChordPatterns",
    "access": "public",
    "export": true,
    "importPath": "./public/csoundac.mjs",
    "importStyle": "{ChordPatterns}",
    "description": "Creates a class to hold state, and defines Patterns for creating and using \nthat state to work with CsoundAC Chords. An instance of this class must be \ncreated at module scope and passed to the relevant Patterns.\n\nSome hacks are used to co-ordinate state with triggers:\n - Assume that chord changes happen only once at any given time.\n - In the trigger, apply the input to the Pattern if and only if the input \n   is different from the old input.",
    "lineNumber": 361,
    "interface": false,
    "extends": [
      "statefulpatterns.mjs~StatefulPatterns"
    ]
  },
  {
    "__docId__": 161,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "public/csoundac.mjs~ChordPatterns",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/csoundac.mjs~ChordPatterns#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 362,
    "undocument": true
  },
  {
    "__docId__": 162,
    "kind": "member",
    "name": "ac_chord",
    "memberof": "public/csoundac.mjs~ChordPatterns",
    "static": false,
    "longname": "public/csoundac.mjs~ChordPatterns#ac_chord",
    "access": "public",
    "description": null,
    "lineNumber": 366,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 164,
    "kind": "member",
    "name": "ac_modality",
    "memberof": "public/csoundac.mjs~ChordPatterns",
    "static": false,
    "longname": "public/csoundac.mjs~ChordPatterns#ac_modality",
    "access": "public",
    "description": null,
    "lineNumber": 372,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 166,
    "kind": "member",
    "name": "prior_chord",
    "memberof": "public/csoundac.mjs~ChordPatterns",
    "static": false,
    "longname": "public/csoundac.mjs~ChordPatterns#prior_chord",
    "access": "public",
    "description": null,
    "lineNumber": 376,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 167,
    "kind": "member",
    "name": "value",
    "memberof": "public/csoundac.mjs~ChordPatterns",
    "static": false,
    "longname": "public/csoundac.mjs~ChordPatterns#value",
    "access": "public",
    "description": null,
    "lineNumber": 377,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 168,
    "kind": "member",
    "name": "acC_counter",
    "memberof": "public/csoundac.mjs~ChordPatterns",
    "static": false,
    "longname": "public/csoundac.mjs~ChordPatterns#acC_counter",
    "access": "public",
    "description": null,
    "lineNumber": 378,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 169,
    "kind": "member",
    "name": "acC_chord_string",
    "memberof": "public/csoundac.mjs~ChordPatterns",
    "static": false,
    "longname": "public/csoundac.mjs~ChordPatterns#acC_chord_string",
    "access": "public",
    "description": null,
    "lineNumber": 379,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 170,
    "kind": "member",
    "name": "acCT_counter",
    "memberof": "public/csoundac.mjs~ChordPatterns",
    "static": false,
    "longname": "public/csoundac.mjs~ChordPatterns#acCT_counter",
    "access": "public",
    "description": null,
    "lineNumber": 380,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 171,
    "kind": "member",
    "name": "acCT_semitones",
    "memberof": "public/csoundac.mjs~ChordPatterns",
    "static": false,
    "longname": "public/csoundac.mjs~ChordPatterns#acCT_semitones",
    "access": "public",
    "description": null,
    "lineNumber": 381,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "member",
    "name": "acCI_counter",
    "memberof": "public/csoundac.mjs~ChordPatterns",
    "static": false,
    "longname": "public/csoundac.mjs~ChordPatterns#acCI_counter",
    "access": "public",
    "description": null,
    "lineNumber": 382,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 173,
    "kind": "member",
    "name": "acCI_center",
    "memberof": "public/csoundac.mjs~ChordPatterns",
    "static": false,
    "longname": "public/csoundac.mjs~ChordPatterns#acCI_center",
    "access": "public",
    "description": null,
    "lineNumber": 383,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 174,
    "kind": "member",
    "name": "acCK_counter",
    "memberof": "public/csoundac.mjs~ChordPatterns",
    "static": false,
    "longname": "public/csoundac.mjs~ChordPatterns#acCK_counter",
    "access": "public",
    "description": null,
    "lineNumber": 384,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 175,
    "kind": "member",
    "name": "acCK_state",
    "memberof": "public/csoundac.mjs~ChordPatterns",
    "static": false,
    "longname": "public/csoundac.mjs~ChordPatterns#acCK_state",
    "access": "public",
    "description": null,
    "lineNumber": 385,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 176,
    "kind": "member",
    "name": "acCQ_counter",
    "memberof": "public/csoundac.mjs~ChordPatterns",
    "static": false,
    "longname": "public/csoundac.mjs~ChordPatterns#acCQ_counter",
    "access": "public",
    "description": null,
    "lineNumber": 386,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 177,
    "kind": "member",
    "name": "acCQ_semitones",
    "memberof": "public/csoundac.mjs~ChordPatterns",
    "static": false,
    "longname": "public/csoundac.mjs~ChordPatterns#acCQ_semitones",
    "access": "public",
    "description": null,
    "lineNumber": 387,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 178,
    "kind": "member",
    "name": "acCOP_counter",
    "memberof": "public/csoundac.mjs~ChordPatterns",
    "static": false,
    "longname": "public/csoundac.mjs~ChordPatterns#acCOP_counter",
    "access": "public",
    "description": null,
    "lineNumber": 388,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 179,
    "kind": "member",
    "name": "acCRP_counter",
    "memberof": "public/csoundac.mjs~ChordPatterns",
    "static": false,
    "longname": "public/csoundac.mjs~ChordPatterns#acCRP_counter",
    "access": "public",
    "description": null,
    "lineNumber": 389,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 180,
    "kind": "member",
    "name": "acCO_counter",
    "memberof": "public/csoundac.mjs~ChordPatterns",
    "static": false,
    "longname": "public/csoundac.mjs~ChordPatterns#acCO_counter",
    "access": "public",
    "description": null,
    "lineNumber": 390,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 181,
    "kind": "member",
    "name": "acCV_counter",
    "memberof": "public/csoundac.mjs~ChordPatterns",
    "static": false,
    "longname": "public/csoundac.mjs~ChordPatterns#acCV_counter",
    "access": "public",
    "description": null,
    "lineNumber": 391,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 182,
    "kind": "member",
    "name": "acCVV_counter",
    "memberof": "public/csoundac.mjs~ChordPatterns",
    "static": false,
    "longname": "public/csoundac.mjs~ChordPatterns#acCVV_counter",
    "access": "public",
    "description": null,
    "lineNumber": 392,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 183,
    "kind": "member",
    "name": "acCVVL_counter",
    "memberof": "public/csoundac.mjs~ChordPatterns",
    "static": false,
    "longname": "public/csoundac.mjs~ChordPatterns#acCVVL_counter",
    "access": "public",
    "description": null,
    "lineNumber": 393,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "acC",
    "memberof": "public/csoundac.mjs~ChordPatterns",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/csoundac.mjs~ChordPatterns#acC",
    "access": "public",
    "description": "Applies a Chord or chord name to this.",
    "lineNumber": 398,
    "params": [
      {
        "name": "is_onset",
        "types": [
          "*"
        ]
      },
      {
        "name": "chord_id",
        "types": [
          "*"
        ]
      },
      {
        "name": "hap",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "member",
    "name": "ac_scale",
    "memberof": "public/csoundac.mjs~ChordPatterns",
    "static": false,
    "longname": "public/csoundac.mjs~ChordPatterns#ac_scale",
    "access": "public",
    "description": null,
    "lineNumber": 404,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 187,
    "kind": "member",
    "name": "acS_chord_string",
    "memberof": "public/csoundac.mjs~ChordPatterns",
    "static": false,
    "longname": "public/csoundac.mjs~ChordPatterns#acS_chord_string",
    "access": "public",
    "description": null,
    "lineNumber": 408,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 190,
    "kind": "method",
    "name": "acCT",
    "memberof": "public/csoundac.mjs~ChordPatterns",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/csoundac.mjs~ChordPatterns#acCT",
    "access": "public",
    "description": "Applies a transposition to the Chord of this.",
    "lineNumber": 424,
    "params": [
      {
        "name": "is_onset",
        "types": [
          "*"
        ]
      },
      {
        "name": "semitones",
        "types": [
          "*"
        ]
      },
      {
        "name": "hap",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "method",
    "name": "acCI",
    "memberof": "public/csoundac.mjs~ChordPatterns",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/csoundac.mjs~ChordPatterns#acCI",
    "access": "public",
    "description": "Applies an inversion to the Chord of this. The transformation can be \npatternified with a Pattern of flips (changes in the value of the flip \ninput).",
    "lineNumber": 444,
    "params": [
      {
        "name": "is_onset",
        "types": [
          "*"
        ]
      },
      {
        "name": "center",
        "types": [
          "*"
        ]
      },
      {
        "name": "flip",
        "types": [
          "*"
        ]
      },
      {
        "name": "hap",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 195,
    "kind": "member",
    "name": "acCI_flip",
    "memberof": "public/csoundac.mjs~ChordPatterns",
    "static": false,
    "longname": "public/csoundac.mjs~ChordPatterns#acCI_flip",
    "access": "public",
    "description": null,
    "lineNumber": 447,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "acCK",
    "memberof": "public/csoundac.mjs~ChordPatterns",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/csoundac.mjs~ChordPatterns#acCK",
    "access": "public",
    "description": "Applies the interchange by inversion operation of the Generalized \nContextual Group of Fiore and Satyendra to the Chord of this. The \ntransformation can be patternified with a Pattern of flips (changes in \nthe value of the flip input).",
    "lineNumber": 465,
    "params": [
      {
        "name": "is_onset",
        "types": [
          "*"
        ]
      },
      {
        "name": "flip",
        "types": [
          "*"
        ]
      },
      {
        "name": "hap",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 199,
    "kind": "member",
    "name": "flip",
    "memberof": "public/csoundac.mjs~ChordPatterns",
    "static": false,
    "longname": "public/csoundac.mjs~ChordPatterns#flip",
    "access": "public",
    "description": null,
    "lineNumber": 468,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "acCQ",
    "memberof": "public/csoundac.mjs~ChordPatterns",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/csoundac.mjs~ChordPatterns#acCQ",
    "access": "public",
    "description": "Applies the contexual transposition operation of the Generalized \nContextual Group of Fiore and Satyendra to the Chord of this. The \nmodality is set in the constructor of this class.",
    "lineNumber": 485,
    "params": [
      {
        "name": "is_onset",
        "types": [
          "*"
        ]
      },
      {
        "name": "semitones",
        "types": [
          "*"
        ]
      },
      {
        "name": "hap",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "acCOP",
    "memberof": "public/csoundac.mjs~ChordPatterns",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/csoundac.mjs~ChordPatterns#acCOP",
    "access": "public",
    "description": "Transforms the Chord of this to its 'OP' form; 'chord' is an extremely \nflexible and therefore ambiguous term, but the 'OP' form is what most \nmusicians usually mean by 'chord': A chord where the octaves of the \npitches do not matter and the order of the voices does not matter. This \ntransformation can be useful for returning chords that have been \ntransformed such that their voices are out of range back to a more \nnormal form.",
    "lineNumber": 506,
    "params": [
      {
        "name": "is_onset",
        "types": [
          "*"
        ]
      },
      {
        "name": "hap",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "acCRP",
    "memberof": "public/csoundac.mjs~ChordPatterns",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/csoundac.mjs~ChordPatterns#acCRP",
    "access": "public",
    "description": "Transforms the Chord of this to its 'RP' form; 'chord' is an extremely \nflexible and therefore ambiguous term, but the 'RP' form is a chord \nwhere the octaves are folded within the indicated range, and like 'OP'\nthe order of the voices does not matter. This \ntransformation can be useful for returning chords that have been \ntransformed such that their voices are out of range back to a user-\ndefined range.",
    "lineNumber": 527,
    "params": [
      {
        "name": "is_onset",
        "types": [
          "*"
        ]
      },
      {
        "name": "range",
        "types": [
          "*"
        ]
      },
      {
        "name": "hap",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "acCV",
    "memberof": "public/csoundac.mjs~ChordPatterns",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/csoundac.mjs~ChordPatterns#acCV",
    "access": "public",
    "description": "Applies the Chord of this to the _pitch-class_ of the Hap, i.e., moves \nthe _pitch-class_ of the Hap to the nearest _pitch-class_ of the Chord.",
    "lineNumber": 543,
    "params": [
      {
        "name": "is_onset",
        "types": [
          "*"
        ]
      },
      {
        "name": "hap",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "acCO",
    "memberof": "public/csoundac.mjs~ChordPatterns",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/csoundac.mjs~ChordPatterns#acCO",
    "access": "public",
    "description": " \nacCO:      Transforms the Chord of this by the indicated number of \n           octavewise revoicings: negative means subtract an octave \n           from the highest voice, positive means add an octave to the \n           lowest voice. This corresponds to the musician's notion of \n           \"inversion.\"",
    "lineNumber": 592,
    "params": [
      {
        "name": "is_onset",
        "types": [
          "*"
        ]
      },
      {
        "name": "revoicings",
        "types": [
          "*"
        ]
      },
      {
        "name": "hap",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 216,
    "kind": "method",
    "name": "acCVV",
    "memberof": "public/csoundac.mjs~ChordPatterns",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/csoundac.mjs~ChordPatterns#acCVV",
    "access": "public",
    "description": "acCVV:      Generate a note that represents a particular voice of the \n            Chord.",
    "lineNumber": 610,
    "params": [
      {
        "name": "is_onset",
        "types": [
          "*"
        ]
      },
      {
        "name": "bass",
        "types": [
          "*"
        ]
      },
      {
        "name": "voice",
        "types": [
          "*"
        ]
      },
      {
        "name": "hap",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 218,
    "kind": "method",
    "name": "acCVVL",
    "memberof": "public/csoundac.mjs~ChordPatterns",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/csoundac.mjs~ChordPatterns#acCVVL",
    "access": "public",
    "description": "acCVVL:     Generate a note that represents a particular voice of the \n            Chord, as the closest voice-leading from the prior Chord.",
    "lineNumber": 621,
    "params": [
      {
        "name": "is_onset",
        "types": [
          "*"
        ]
      },
      {
        "name": "bass",
        "types": [
          "*"
        ]
      },
      {
        "name": "range",
        "types": [
          "*"
        ]
      },
      {
        "name": "voice",
        "types": [
          "*"
        ]
      },
      {
        "name": "hap",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 221,
    "kind": "class",
    "name": "ScalePatterns",
    "memberof": "public/csoundac.mjs",
    "static": true,
    "longname": "public/csoundac.mjs~ScalePatterns",
    "access": "public",
    "export": true,
    "importPath": "./public/csoundac.mjs",
    "importStyle": "{ScalePatterns}",
    "description": "Creates a class to hold state, and defines Patterns for creating and using \nthat state to work with CsoundAC Scales. An instance of this class must be \ncreated at module scope and passed to the relevant Patterns. The \nconstructor sets the number of voices in Chords associated with the Scale,\nby default 4.\n\nState is co-ordinated with the triggers of the Patterns by only updating \nthe state when the input of the Pattern changes.",
    "lineNumber": 647,
    "interface": false,
    "extends": [
      "statefulpatterns.mjs~StatefulPatterns"
    ]
  },
  {
    "__docId__": 222,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "public/csoundac.mjs~ScalePatterns",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/csoundac.mjs~ScalePatterns#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 648,
    "undocument": true
  },
  {
    "__docId__": 223,
    "kind": "member",
    "name": "voices",
    "memberof": "public/csoundac.mjs~ScalePatterns",
    "static": false,
    "longname": "public/csoundac.mjs~ScalePatterns#voices",
    "access": "public",
    "description": null,
    "lineNumber": 651,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 224,
    "kind": "member",
    "name": "ac_scale",
    "memberof": "public/csoundac.mjs~ScalePatterns",
    "static": false,
    "longname": "public/csoundac.mjs~ScalePatterns#ac_scale",
    "access": "public",
    "description": null,
    "lineNumber": 655,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 226,
    "kind": "member",
    "name": "ac_chord",
    "memberof": "public/csoundac.mjs~ScalePatterns",
    "static": false,
    "longname": "public/csoundac.mjs~ScalePatterns#ac_chord",
    "access": "public",
    "description": null,
    "lineNumber": 661,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 227,
    "kind": "member",
    "name": "prior_chord",
    "memberof": "public/csoundac.mjs~ScalePatterns",
    "static": false,
    "longname": "public/csoundac.mjs~ScalePatterns#prior_chord",
    "access": "public",
    "description": null,
    "lineNumber": 662,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 228,
    "kind": "member",
    "name": "acS_counter",
    "memberof": "public/csoundac.mjs~ScalePatterns",
    "static": false,
    "longname": "public/csoundac.mjs~ScalePatterns#acS_counter",
    "access": "public",
    "description": null,
    "lineNumber": 663,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 229,
    "kind": "member",
    "name": "acS_scale_string",
    "memberof": "public/csoundac.mjs~ScalePatterns",
    "static": false,
    "longname": "public/csoundac.mjs~ScalePatterns#acS_scale_string",
    "access": "public",
    "description": null,
    "lineNumber": 664,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 230,
    "kind": "member",
    "name": "acSS_counter",
    "memberof": "public/csoundac.mjs~ScalePatterns",
    "static": false,
    "longname": "public/csoundac.mjs~ScalePatterns#acSS_counter",
    "access": "public",
    "description": null,
    "lineNumber": 665,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 231,
    "kind": "member",
    "name": "acSS_scale_step",
    "memberof": "public/csoundac.mjs~ScalePatterns",
    "static": false,
    "longname": "public/csoundac.mjs~ScalePatterns#acSS_scale_step",
    "access": "public",
    "description": null,
    "lineNumber": 666,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 232,
    "kind": "member",
    "name": "acST_counter",
    "memberof": "public/csoundac.mjs~ScalePatterns",
    "static": false,
    "longname": "public/csoundac.mjs~ScalePatterns#acST_counter",
    "access": "public",
    "description": null,
    "lineNumber": 667,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 233,
    "kind": "member",
    "name": "acST_scale_steps",
    "memberof": "public/csoundac.mjs~ScalePatterns",
    "static": false,
    "longname": "public/csoundac.mjs~ScalePatterns#acST_scale_steps",
    "access": "public",
    "description": null,
    "lineNumber": 668,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 234,
    "kind": "member",
    "name": "acSM_counter",
    "memberof": "public/csoundac.mjs~ScalePatterns",
    "static": false,
    "longname": "public/csoundac.mjs~ScalePatterns#acSM_counter",
    "access": "public",
    "description": null,
    "lineNumber": 669,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 235,
    "kind": "member",
    "name": "acSM_index",
    "memberof": "public/csoundac.mjs~ScalePatterns",
    "static": false,
    "longname": "public/csoundac.mjs~ScalePatterns#acSM_index",
    "access": "public",
    "description": null,
    "lineNumber": 670,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 236,
    "kind": "member",
    "name": "acSO_counter",
    "memberof": "public/csoundac.mjs~ScalePatterns",
    "static": false,
    "longname": "public/csoundac.mjs~ScalePatterns#acSO_counter",
    "access": "public",
    "description": null,
    "lineNumber": 671,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 237,
    "kind": "member",
    "name": "acSV_counter",
    "memberof": "public/csoundac.mjs~ScalePatterns",
    "static": false,
    "longname": "public/csoundac.mjs~ScalePatterns#acSV_counter",
    "access": "public",
    "description": null,
    "lineNumber": 672,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "member",
    "name": "acSCV_counter",
    "memberof": "public/csoundac.mjs~ScalePatterns",
    "static": false,
    "longname": "public/csoundac.mjs~ScalePatterns#acSCV_counter",
    "access": "public",
    "description": null,
    "lineNumber": 673,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "acS",
    "memberof": "public/csoundac.mjs~ScalePatterns",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/csoundac.mjs~ScalePatterns#acS",
    "access": "public",
    "description": "acS:        Insert a CsoundAC Scale into the Pattern's state.",
    "lineNumber": 679,
    "params": [
      {
        "name": "is_onset",
        "types": [
          "*"
        ]
      },
      {
        "name": "scale",
        "types": [
          "*"
        ]
      },
      {
        "name": "hap",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "acSS",
    "memberof": "public/csoundac.mjs~ScalePatterns",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/csoundac.mjs~ScalePatterns#acSS",
    "access": "public",
    "description": "acSS:       Insert the Chord at the specified scale step of the Scale in \n            the Pattern's state, into the state.",
    "lineNumber": 709,
    "params": [
      {
        "name": "is_onset",
        "types": [
          "*"
        ]
      },
      {
        "name": "scale_step",
        "types": [
          "*"
        ]
      },
      {
        "name": "hap",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 249,
    "kind": "method",
    "name": "acST",
    "memberof": "public/csoundac.mjs~ScalePatterns",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/csoundac.mjs~ScalePatterns#acST",
    "access": "public",
    "description": "acST:       Transpose the Chord in the Pattern's state by the specified \n            number of scale steps in the Scale in the state.",
    "lineNumber": 728,
    "params": [
      {
        "name": "is_onset",
        "types": [
          "*"
        ]
      },
      {
        "name": "scale_steps",
        "types": [
          "*"
        ]
      },
      {
        "name": "hap",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 253,
    "kind": "method",
    "name": "acSM",
    "memberof": "public/csoundac.mjs~ScalePatterns",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/csoundac.mjs~ScalePatterns#acSM",
    "access": "public",
    "description": "acSM:       Modulate from the Scale in the Pattern's state, using the \n            Chord in the state as a pivot, choosing one of the possible \n            modulations by index.",
    "lineNumber": 748,
    "params": [
      {
        "name": "is_onset",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "hap",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 257,
    "kind": "method",
    "name": "acSV",
    "memberof": "public/csoundac.mjs~ScalePatterns",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/csoundac.mjs~ScalePatterns#acSV",
    "access": "public",
    "description": "acSV:       Move notes in the Pattern to fit the Scale in the Pattern's \n            state.",
    "lineNumber": 781,
    "params": [
      {
        "name": "is_onset",
        "types": [
          "*"
        ]
      },
      {
        "name": "hap",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 259,
    "kind": "method",
    "name": "acSCV",
    "memberof": "public/csoundac.mjs~ScalePatterns",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/csoundac.mjs~ScalePatterns#acSCV",
    "access": "public",
    "description": "acSCV:      Move notes in the Pattern to fit the Chord in the Pattern's \n            state.",
    "lineNumber": 823,
    "params": [
      {
        "name": "is_onset",
        "types": [
          "*"
        ]
      },
      {
        "name": "hap",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 262,
    "kind": "method",
    "name": "acSO",
    "memberof": "public/csoundac.mjs~ScalePatterns",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/csoundac.mjs~ScalePatterns#acSO",
    "access": "public",
    "description": " \nacSO:      Transforms the Chord of this by the indicated number of \n           octavewise revoicings: negative means subtract an octave \n           from the highest voice, positive means add an octave to the \n           lowest voice. This corresponds to the musician's notion of \n           \"inversion.\"",
    "lineNumber": 871,
    "params": [
      {
        "name": "is_onset",
        "types": [
          "*"
        ]
      },
      {
        "name": "revoicings",
        "types": [
          "*"
        ]
      },
      {
        "name": "hap",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 266,
    "kind": "method",
    "name": "acCVV",
    "memberof": "public/csoundac.mjs~ScalePatterns",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/csoundac.mjs~ScalePatterns#acCVV",
    "access": "public",
    "description": "acSVV:      Generate a note that represents a particular voice of the \n            Chord of this.",
    "lineNumber": 889,
    "params": [
      {
        "name": "is_onset",
        "types": [
          "*"
        ]
      },
      {
        "name": "bass",
        "types": [
          "*"
        ]
      },
      {
        "name": "voice",
        "types": [
          "*"
        ]
      },
      {
        "name": "hap",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "acSVVL",
    "memberof": "public/csoundac.mjs~ScalePatterns",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/csoundac.mjs~ScalePatterns#acSVVL",
    "access": "public",
    "description": "acSVVL:     Generate a note that represents a particular voice of the \n            current Chord, as the closest voice-leading from the prior \n            Chord.",
    "lineNumber": 901,
    "params": [
      {
        "name": "is_onset",
        "types": [
          "*"
        ]
      },
      {
        "name": "bass",
        "types": [
          "*"
        ]
      },
      {
        "name": "range",
        "types": [
          "*"
        ]
      },
      {
        "name": "voice",
        "types": [
          "*"
        ]
      },
      {
        "name": "hap",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 271,
    "kind": "class",
    "name": "PitvPatterns",
    "memberof": "public/csoundac.mjs",
    "static": true,
    "longname": "public/csoundac.mjs~PitvPatterns",
    "access": "public",
    "export": true,
    "importPath": "./public/csoundac.mjs",
    "importStyle": "{PitvPatterns}",
    "description": "Creates a class to hold state and defines Patterns for creating and using \nthat state to work with CsoundAC PITV groups. An instance of this class \nmust be created at module scope and passed to the relevant Patterns.",
    "lineNumber": 917,
    "interface": false,
    "extends": [
      "statefulpatterns.mjs~StatefulPatterns"
    ]
  },
  {
    "__docId__": 272,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "public/csoundac.mjs~PitvPatterns",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/csoundac.mjs~PitvPatterns#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 918,
    "undocument": true
  },
  {
    "__docId__": 273,
    "kind": "member",
    "name": "prior_chord",
    "memberof": "public/csoundac.mjs~PitvPatterns",
    "static": false,
    "longname": "public/csoundac.mjs~PitvPatterns#prior_chord",
    "access": "public",
    "description": null,
    "lineNumber": 921,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 274,
    "kind": "member",
    "name": "pitv",
    "memberof": "public/csoundac.mjs~PitvPatterns",
    "static": false,
    "longname": "public/csoundac.mjs~PitvPatterns#pitv",
    "access": "public",
    "description": null,
    "lineNumber": 922,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 275,
    "kind": "member",
    "name": "acPP_counter",
    "memberof": "public/csoundac.mjs~PitvPatterns",
    "static": false,
    "longname": "public/csoundac.mjs~PitvPatterns#acPP_counter",
    "access": "public",
    "description": null,
    "lineNumber": 923,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 276,
    "kind": "member",
    "name": "acPP_P",
    "memberof": "public/csoundac.mjs~PitvPatterns",
    "static": false,
    "longname": "public/csoundac.mjs~PitvPatterns#acPP_P",
    "access": "public",
    "description": null,
    "lineNumber": 924,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 277,
    "kind": "member",
    "name": "acPI_counter",
    "memberof": "public/csoundac.mjs~PitvPatterns",
    "static": false,
    "longname": "public/csoundac.mjs~PitvPatterns#acPI_counter",
    "access": "public",
    "description": null,
    "lineNumber": 925,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 278,
    "kind": "member",
    "name": "acPI_I",
    "memberof": "public/csoundac.mjs~PitvPatterns",
    "static": false,
    "longname": "public/csoundac.mjs~PitvPatterns#acPI_I",
    "access": "public",
    "description": null,
    "lineNumber": 926,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 279,
    "kind": "member",
    "name": "acPT_counter",
    "memberof": "public/csoundac.mjs~PitvPatterns",
    "static": false,
    "longname": "public/csoundac.mjs~PitvPatterns#acPT_counter",
    "access": "public",
    "description": null,
    "lineNumber": 927,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 280,
    "kind": "member",
    "name": "acPT_T",
    "memberof": "public/csoundac.mjs~PitvPatterns",
    "static": false,
    "longname": "public/csoundac.mjs~PitvPatterns#acPT_T",
    "access": "public",
    "description": null,
    "lineNumber": 928,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 281,
    "kind": "member",
    "name": "acPV_counter",
    "memberof": "public/csoundac.mjs~PitvPatterns",
    "static": false,
    "longname": "public/csoundac.mjs~PitvPatterns#acPV_counter",
    "access": "public",
    "description": null,
    "lineNumber": 929,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 282,
    "kind": "member",
    "name": "acPV_V",
    "memberof": "public/csoundac.mjs~PitvPatterns",
    "static": false,
    "longname": "public/csoundac.mjs~PitvPatterns#acPV_V",
    "access": "public",
    "description": null,
    "lineNumber": 930,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 283,
    "kind": "member",
    "name": "acPO_counter",
    "memberof": "public/csoundac.mjs~PitvPatterns",
    "static": false,
    "longname": "public/csoundac.mjs~PitvPatterns#acPO_counter",
    "access": "public",
    "description": null,
    "lineNumber": 931,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 284,
    "kind": "member",
    "name": "acPO_value",
    "memberof": "public/csoundac.mjs~PitvPatterns",
    "static": false,
    "longname": "public/csoundac.mjs~PitvPatterns#acPO_value",
    "access": "public",
    "description": null,
    "lineNumber": 932,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 285,
    "kind": "member",
    "name": "acPC_counter",
    "memberof": "public/csoundac.mjs~PitvPatterns",
    "static": false,
    "longname": "public/csoundac.mjs~PitvPatterns#acPC_counter",
    "access": "public",
    "description": null,
    "lineNumber": 933,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 286,
    "kind": "member",
    "name": "acPVS_counter",
    "memberof": "public/csoundac.mjs~PitvPatterns",
    "static": false,
    "longname": "public/csoundac.mjs~PitvPatterns#acPVS_counter",
    "access": "public",
    "description": null,
    "lineNumber": 934,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 287,
    "kind": "member",
    "name": "acPVV_counter",
    "memberof": "public/csoundac.mjs~PitvPatterns",
    "static": false,
    "longname": "public/csoundac.mjs~PitvPatterns#acPVV_counter",
    "access": "public",
    "description": null,
    "lineNumber": 935,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 288,
    "kind": "method",
    "name": "acP",
    "memberof": "public/csoundac.mjs~PitvPatterns",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/csoundac.mjs~PitvPatterns#acP",
    "access": "public",
    "description": "acP:        Insert a CsoundAC PITV group into the Pattern's state.",
    "lineNumber": 940,
    "params": [
      {
        "name": "is_onset",
        "types": [
          "*"
        ]
      },
      {
        "name": "pitv",
        "types": [
          "*"
        ]
      },
      {
        "name": "hap",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 290,
    "kind": "member",
    "name": "acP_counter",
    "memberof": "public/csoundac.mjs~PitvPatterns",
    "static": false,
    "longname": "public/csoundac.mjs~PitvPatterns#acP_counter",
    "access": "public",
    "description": null,
    "lineNumber": 944,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 291,
    "kind": "method",
    "name": "acPP",
    "memberof": "public/csoundac.mjs~PitvPatterns",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/csoundac.mjs~PitvPatterns#acPP",
    "access": "public",
    "description": "acPP:       Set the prime form index of the PITV element in the Pattern's \n            state.",
    "lineNumber": 955,
    "params": [
      {
        "name": "is_onset",
        "types": [
          "*"
        ]
      },
      {
        "name": "P",
        "types": [
          "*"
        ]
      },
      {
        "name": "hap",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 294,
    "kind": "member",
    "name": "acPI_counter",
    "memberof": "public/csoundac.mjs~PitvPatterns",
    "static": true,
    "longname": "public/csoundac.mjs~PitvPatterns.acPI_counter",
    "access": "public",
    "description": null,
    "lineNumber": 969,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "acPI",
    "memberof": "public/csoundac.mjs~PitvPatterns",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/csoundac.mjs~PitvPatterns#acPI",
    "access": "public",
    "description": "acPI:       Set the inversion index of the PITV element in the Pattern's \n            state.",
    "lineNumber": 975,
    "params": [
      {
        "name": "is_onset",
        "types": [
          "*"
        ]
      },
      {
        "name": "I",
        "types": [
          "*"
        ]
      },
      {
        "name": "hap",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 298,
    "kind": "method",
    "name": "acPT",
    "memberof": "public/csoundac.mjs~PitvPatterns",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/csoundac.mjs~PitvPatterns#acPT",
    "access": "public",
    "description": "acPT:       Set the transposition index of the PITV element in the \n            Pattern's state.",
    "lineNumber": 992,
    "params": [
      {
        "name": "is_onset",
        "types": [
          "*"
        ]
      },
      {
        "name": "T",
        "types": [
          "*"
        ]
      },
      {
        "name": "hap",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 301,
    "kind": "method",
    "name": "acPO",
    "memberof": "public/csoundac.mjs~PitvPatterns",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/csoundac.mjs~PitvPatterns#acPO",
    "access": "public",
    "description": "acPO:       Set the octavewise voicing index of the PITV element in the \n            Pattern's state.",
    "lineNumber": 1009,
    "params": [
      {
        "name": "is_onset",
        "types": [
          "*"
        ]
      },
      {
        "name": "V",
        "types": [
          "*"
        ]
      },
      {
        "name": "hap",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 302,
    "kind": "member",
    "name": "acPO_O",
    "memberof": "public/csoundac.mjs~PitvPatterns",
    "static": false,
    "longname": "public/csoundac.mjs~PitvPatterns#acPO_O",
    "access": "public",
    "description": null,
    "lineNumber": 1012,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 304,
    "kind": "method",
    "name": "acPC",
    "memberof": "public/csoundac.mjs~PitvPatterns",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/csoundac.mjs~PitvPatterns#acPC",
    "access": "public",
    "description": "acPC:       Insert the Chord corresponding to the PITV element into the \n            Pattern's state.",
    "lineNumber": 1026,
    "params": [
      {
        "name": "is_onset",
        "types": [
          "*"
        ]
      },
      {
        "name": "hap",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 305,
    "kind": "member",
    "name": "ac_chord",
    "memberof": "public/csoundac.mjs~PitvPatterns",
    "static": false,
    "longname": "public/csoundac.mjs~PitvPatterns#ac_chord",
    "access": "public",
    "description": null,
    "lineNumber": 1028,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 307,
    "kind": "method",
    "name": "acPV",
    "memberof": "public/csoundac.mjs~PitvPatterns",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/csoundac.mjs~PitvPatterns#acPV",
    "access": "public",
    "description": "acPV:       Move notes in the Pattern to fit the pitch-class set of the \n            element of the PITV group in the Pattern's state.",
    "lineNumber": 1041,
    "params": [
      {
        "name": "is_onset",
        "types": [
          "*"
        ]
      },
      {
        "name": "hap",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 309,
    "kind": "method",
    "name": "acPVV",
    "memberof": "public/csoundac.mjs~PitvPatterns",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/csoundac.mjs~PitvPatterns#acPVV",
    "access": "public",
    "description": "acPVV:      Generate a note that represents a particular voice of the \n            Chord.",
    "lineNumber": 1063,
    "params": [
      {
        "name": "is_onset",
        "types": [
          "*"
        ]
      },
      {
        "name": "voice",
        "types": [
          "*"
        ]
      },
      {
        "name": "hap",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 311,
    "kind": "method",
    "name": "acPVVL",
    "memberof": "public/csoundac.mjs~PitvPatterns",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/csoundac.mjs~PitvPatterns#acPVVL",
    "access": "public",
    "description": "acPVVL:     Generate a note that represents a particular voice of the \n            Chord, as the closest voice-leading from the prior element of this.",
    "lineNumber": 1075,
    "params": [
      {
        "name": "is_onset",
        "types": [
          "*"
        ]
      },
      {
        "name": "voice",
        "types": [
          "*"
        ]
      },
      {
        "name": "hap",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 315,
    "kind": "file",
    "name": "public/statefulpatterns.mjs",
    "content": "/**\n * S T A T E F U L P A T T E R N S   M O D U L E   F O R   S T R U D E L\n *\n * Author: Michael Gogins\n * \n * This module implements \"stateful Patterns\" by defining a base class, \n * `StatefulPatterns`, that knows how to register class methods as Patterns.\n */\nlet csound = globalThis.__csound__;\nlet csoundac = globalThis.__csoundac__;\nlet audioContext = new AudioContext();\n\n/**\n * Sets the level of diagnostic messages in this module.\n */\nlet diagnostic_level_ = 5;\n\n/**\n * Gets and/or sets the level of diagnostic messages.\n */\nexport function diagnostic_level(new_level) {\n    let old_level = diagnostic_level_;\n    if (typeof new_level !== 'undefined') {\n        diagnostic_level_ = new_level;\n    }\n    return old_level;\n};\n\nexport const ALWAYS = 5;\nexport const DEBUG = 4;\nexport const INFORMATION = 3;\nexport const WARNING = 2;\nexport const ERROR = 1;\nexport const NEVER = 0;\n\n/**\n * Prints a diagnostic message to both the Strudel logger and the Csound \n * log. Messages are printed only for the specifed diagnostic level or less.\n */\nexport function diagnostic(message, level = WARNING) {\n    if (level >= diagnostic_level_) {\n        const text = 'L' + level + ' ' + audioContext.currentTime.toFixed(4) + ' [csac]' + message;\n        logger(text, 'debug');\n        if (csound) csound.message(text);\n    }\n};\n\n/**\n * This is a base class that can be used to _automatically_ define Patterns \n * that hold state between queries. Derived classes, which must be defined at \n * module scope, must in their constructor call `this.registerPatterns`, which \n * will automatically register (most of) of their methods as Strudel Patterns, \n * each of which takes an instance of the class as a first parameter, and the \n * Pattern as the last parameter. Class methods must have the following syntax \n * and semantics:\n * ```\n * Class.Pat(is_onset, [0 or more arguments to be patternified], hap) {...}\n * ```\n * Strudel will pass `true` for `is_onset` on the onset of the Pattern's cycle, \n * and `false` for `is_onset` for every query in that cycle. Therefore, the \n * class method must update its state if `is_onset` is true, and return the \n * hap, without changing its value; and if 'is_onset' is false, the method must \n * update and return the hap, and its usually new value.\n *\n * In this way, derived classes act like stateful values that have Pattern \n * methods as class methods.\n */\nexport class StatefulPatterns {\n    constructor() {\n    }\n    registerPatterns() {\n        for (let name of Object.getOwnPropertyNames(Object.getPrototypeOf(this))) {\n            let method = this[name];\n            if ((method instanceof Function) &&\n                (method.name !== this.constructor.name) && \n                (method.name !== 'registerMethods')) {\n                let instance = this;\n                // Problem: the Pattern function must explicitly declare its \n                // parameters. We can't push that information from the class \n                // method Function object into the Pattern function \n                // declaration, but we do know the arity of the class method, \n                // which is always at least 1 because of the need to pass the \n                // Hap.\n                let arity = method.length;\n                // For now, we will set up separate registrations for the \n                // first few arities. The actual arity of the Pattern function \n                // is always at least 3 because of the need to pass the class \n                // instance, the is_onset flag, and the Hap along with any \n                // patternifiable rguments.\n                arity = arity + 1;\n                if (arity === 3) {\n                    let registration = register(name, (stateful, pat) => {\n                        return pat.onTrigger((t, hap) => {\n                            method.call(stateful, true, hap);\n                            if (diagnostic_level_ >= DEBUG) diagnostic('[registerStateful][' + method.name + '] onset:' + JSON.stringify({x, stateful}, null, 4) + '\\n');\n                        }, false).withHap((hap) => {\n                            stateful.current_time = getAudioContext().currentTime;\n                            if (diagnostic_level_ >= DEBUG) diagnostic('[registerStateful][' + method.name + '] value:' + JSON.stringify({x, stateful}, null, 4) + '\\n');\n                            hap = method.call(stateful, false, hap);\n                            return hap;\n                        });\n                    });\n                    // There are no dynamic exports in JavaScript, so we just stuff \n                    // these into the window scope as global functions.\n                    window[name] = registration;\n                } else if (arity === 4) {\n                    let registration = register(name, (stateful, p2, pat) => {\n                        return pat.onTrigger((t, hap) => {\n                            method.call(stateful, true, p2, hap);\n                            if (diagnostic_level_ >= DEBUG) diagnostic('[registerStateful][' + method.name + '] onset:' + JSON.stringify({x, stateful}, null, 4) + '\\n');\n                        }, false).withHap((hap) => {\n                            stateful.current_time = getAudioContext().currentTime;\n                            if (diagnostic_level_ >= DEBUG) diagnostic('[registerStateful][' + method.name + '] value:' + JSON.stringify({x, stateful}, null, 4) + '\\n');\n                            hap = method.call(stateful, false, p2, hap);\n                            return hap;\n                        });\n                    });\n                    window[name] = registration;\n                } else if (arity === 5) {\n                    let registration = register(name, (stateful, p2, p3, pat) => {\n                        return pat.onTrigger((t, hap) => {\n                            method.call(stateful, true, p2, p3, hap);\n                            if (diagnostic_level_ >= DEBUG) diagnostic('[registerStateful][' + method.name + '] onset:' + JSON.stringify({x, stateful}, null, 4) + '\\n');\n                        }, false).withHap((hap) => {\n                            stateful.current_time = getAudioContext().currentTime;\n                            if (diagnostic_level_ >= DEBUG) diagnostic('[registerStateful][' + method.name + '] value:' + JSON.stringify({x, stateful}, null, 4) + '\\n');\n                            hap = method.call(stateful, false, p2, p3, hap);\n                            return hap;\n                        });\n                    });\n                    window[name] = registration;\n               } else if (arity === 6) {\n                    let registration = register(name, (stateful, p2, p3, p4, pat) => {\n                        return pat.onTrigger((t, hap) => {\n                            method.call(stateful, true, p2, p3, p4, hap);\n                            if (diagnostic_level_ >= DEBUG) diagnostic('[registerStateful][' + method.name + '] onset:' + JSON.stringify({x, stateful}, null, 4) + '\\n');\n                        }, false).withHap((hap) => {\n                            stateful.current_time = getAudioContext().currentTime;\n                            if (diagnostic_level_ >= DEBUG) diagnostic('[registerStateful][' + method.name + '] value:' + JSON.stringify({x, stateful}, null, 4) + '\\n');\n                            hap = method.call(stateful, false, p2, p3, p4, hap);\n                            return hap;\n                        });\n                    });\n                    window[name] = registration;\n                }\n            }\n        }\n    }\n}\n\n",
    "static": true,
    "longname": "/Users/michaelgogins/cloud-5/public/statefulpatterns.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 316,
    "kind": "variable",
    "name": "csound",
    "memberof": "public/statefulpatterns.mjs",
    "static": true,
    "longname": "public/statefulpatterns.mjs~csound",
    "access": "public",
    "export": false,
    "importPath": "./public/statefulpatterns.mjs",
    "importStyle": null,
    "description": "S T A T E F U L P A T T E R N S   M O D U L E   F O R   S T R U D E L\n\nAuthor: Michael Gogins\n\nThis module implements \"stateful Patterns\" by defining a base class, \n`StatefulPatterns`, that knows how to register class methods as Patterns.",
    "lineNumber": 9,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 317,
    "kind": "variable",
    "name": "csoundac",
    "memberof": "public/statefulpatterns.mjs",
    "static": true,
    "longname": "public/statefulpatterns.mjs~csoundac",
    "access": "public",
    "export": false,
    "importPath": "./public/statefulpatterns.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 318,
    "kind": "variable",
    "name": "audioContext",
    "memberof": "public/statefulpatterns.mjs",
    "static": true,
    "longname": "public/statefulpatterns.mjs~audioContext",
    "access": "public",
    "export": false,
    "importPath": "./public/statefulpatterns.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 319,
    "kind": "variable",
    "name": "diagnostic_level_",
    "memberof": "public/statefulpatterns.mjs",
    "static": true,
    "longname": "public/statefulpatterns.mjs~diagnostic_level_",
    "access": "public",
    "export": false,
    "importPath": "./public/statefulpatterns.mjs",
    "importStyle": null,
    "description": "Sets the level of diagnostic messages in this module.",
    "lineNumber": 16,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 320,
    "kind": "function",
    "name": "diagnostic_level",
    "memberof": "public/statefulpatterns.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "public/statefulpatterns.mjs~diagnostic_level",
    "access": "public",
    "export": true,
    "importPath": "./public/statefulpatterns.mjs",
    "importStyle": "{diagnostic_level}",
    "description": "Gets and/or sets the level of diagnostic messages.",
    "lineNumber": 21,
    "params": [
      {
        "name": "new_level",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 321,
    "kind": "variable",
    "name": "ALWAYS",
    "memberof": "public/statefulpatterns.mjs",
    "static": true,
    "longname": "public/statefulpatterns.mjs~ALWAYS",
    "access": "public",
    "export": true,
    "importPath": "./public/statefulpatterns.mjs",
    "importStyle": "{ALWAYS}",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 322,
    "kind": "variable",
    "name": "DEBUG",
    "memberof": "public/statefulpatterns.mjs",
    "static": true,
    "longname": "public/statefulpatterns.mjs~DEBUG",
    "access": "public",
    "export": true,
    "importPath": "./public/statefulpatterns.mjs",
    "importStyle": "{DEBUG}",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 323,
    "kind": "variable",
    "name": "INFORMATION",
    "memberof": "public/statefulpatterns.mjs",
    "static": true,
    "longname": "public/statefulpatterns.mjs~INFORMATION",
    "access": "public",
    "export": true,
    "importPath": "./public/statefulpatterns.mjs",
    "importStyle": "{INFORMATION}",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 324,
    "kind": "variable",
    "name": "WARNING",
    "memberof": "public/statefulpatterns.mjs",
    "static": true,
    "longname": "public/statefulpatterns.mjs~WARNING",
    "access": "public",
    "export": true,
    "importPath": "./public/statefulpatterns.mjs",
    "importStyle": "{WARNING}",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 325,
    "kind": "variable",
    "name": "ERROR",
    "memberof": "public/statefulpatterns.mjs",
    "static": true,
    "longname": "public/statefulpatterns.mjs~ERROR",
    "access": "public",
    "export": true,
    "importPath": "./public/statefulpatterns.mjs",
    "importStyle": "{ERROR}",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 326,
    "kind": "variable",
    "name": "NEVER",
    "memberof": "public/statefulpatterns.mjs",
    "static": true,
    "longname": "public/statefulpatterns.mjs~NEVER",
    "access": "public",
    "export": true,
    "importPath": "./public/statefulpatterns.mjs",
    "importStyle": "{NEVER}",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 327,
    "kind": "function",
    "name": "diagnostic",
    "memberof": "public/statefulpatterns.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "public/statefulpatterns.mjs~diagnostic",
    "access": "public",
    "export": true,
    "importPath": "./public/statefulpatterns.mjs",
    "importStyle": "{diagnostic}",
    "description": "Prints a diagnostic message to both the Strudel logger and the Csound \nlog. Messages are printed only for the specifed diagnostic level or less.",
    "lineNumber": 40,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      },
      {
        "name": "level",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": "WARNING",
        "defaultValue": "WARNING"
      }
    ],
    "return": null
  },
  {
    "__docId__": 328,
    "kind": "class",
    "name": "StatefulPatterns",
    "memberof": "public/statefulpatterns.mjs",
    "static": true,
    "longname": "public/statefulpatterns.mjs~StatefulPatterns",
    "access": "public",
    "export": true,
    "importPath": "./public/statefulpatterns.mjs",
    "importStyle": "{StatefulPatterns}",
    "description": "This is a base class that can be used to _automatically_ define Patterns \nthat hold state between queries. Derived classes, which must be defined at \nmodule scope, must in their constructor call `this.registerPatterns`, which \nwill automatically register (most of) of their methods as Strudel Patterns, \neach of which takes an instance of the class as a first parameter, and the \nPattern as the last parameter. Class methods must have the following syntax \nand semantics:\n```\nClass.Pat(is_onset, [0 or more arguments to be patternified], hap) {...}\n```\nStrudel will pass `true` for `is_onset` on the onset of the Pattern's cycle, \nand `false` for `is_onset` for every query in that cycle. Therefore, the \nclass method must update its state if `is_onset` is true, and return the \nhap, without changing its value; and if 'is_onset' is false, the method must \nupdate and return the hap, and its usually new value.\n\nIn this way, derived classes act like stateful values that have Pattern \nmethods as class methods.",
    "lineNumber": 68,
    "interface": false
  },
  {
    "__docId__": 329,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "public/statefulpatterns.mjs~StatefulPatterns",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/statefulpatterns.mjs~StatefulPatterns#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true
  },
  {
    "__docId__": 330,
    "kind": "method",
    "name": "registerPatterns",
    "memberof": "public/statefulpatterns.mjs~StatefulPatterns",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "public/statefulpatterns.mjs~StatefulPatterns#registerPatterns",
    "access": "public",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "kind": "index",
    "content": "# [cloud-5](https://github.com/gogins/cloud-5)\n#### An HTML5-based computer music system with Csound, CsoundAC, and Strudel by [Michael Gogins](https://michaelgogins.tumblr.com) \n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"><img alt=\"Creative Commons License\" \nstyle=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" />\n</a><br />Musical examples herein are licensed under a <a rel=\"license\" \nhref=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">\nCreative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</a>. \n\nCode written as part of cloud-5 is licensed under the terms of the same \nlicense as Csound, the \n[GNU Lesser Public License, version 2.1](https://github.com/csound/csound/blob/master/COPYING). \nComponents and libraries used by cloud-5 come under a variety of open source \nlicenses; see the links to individual packages for more information.\n\n## Introduction\n\nWelcome to cloud-5, a system for making sophisticated computer music purely in \nthe HTML5 environment! The system is especially suited for pieces that play \nonline, for pieces that play indefinitely, for visual music, for algorithmic \ncomposition, and for live coding.\n\ncloud-5 runs on every system with an audio output that can run a Web server \nand a standards compliant Web browser. That includes _all_ computers \nrunning macOS, Linux, or Windows, as well as most Android devices. It is also \npossible to run cloud-5 on single-board computers (SBCs) such as [Bela](https://bela.io/), \n[Norns](https://monome.org/docs/norns/), [BeagleBoards](https://www.beagleboard.org/), \n[Raspberry Pi](https://www.raspberrypi.com/), and others. However, running \ncloud-5 on a SBC requires installing at least a Web server (and probably also \na Web browser) on the device. Most users without special need for a SBC (such \nas an installation or kiosk) will be better off just using a personal \ncomputer.\n\ncloud-5 is used by my own Web site of \"always-on\" computer music pieces, \n[cloud-music](https://gogins.github.io/). The underlying technology is my \n<a href=\"https://github.com/gogins/csound-wasm\">own WebAssembly builds of \nCsound and CsoundAC</a>. Some pieces may use third party libraries. The home \npage of Csound itself is <a href=\"https://csound.com/\">here</a>.\n\nFor recent changes, see the _[Release Notes](#release-notes)_ at the end of \nthis document.\n\n### Components\n\n - [Csound](https://csound.com/) version 6.18, one of the oldest and most \n   powerful sound programming languages, compiled for WebAssembly to run in \n   Web browers in [csound-wasm](https://github.com/gogins/csound-wasm).\n   \n - [CsoundAC](https://github.com/gogins/csound-ac), my C++ library for \n   algorithmic composition with Csound, compiled for WebAssembly to run in \n   Web browsers in [csound-wasm](https://github.com/gogins/csound-wasm), and \n   incorporating my implementation of mathematical theories of chord space and \n   neo-Reimannian operations, and scales and functional harmony, by \n   [Dmitri Tymoczko](http://dmitri.mycpanel.princeton.edu/).\n   \n - A collection of predefined Csound instrument definitions by me from \n   [CsoundAC](https://github.com/gogins/csound-ac/tree/master/patches).\n \n - [Strudel](https://strudel.tidalcycles.org/), a JavaScript port of the \n   widely used live coding system [Tidal Cycles](http://tidalcycles.org/), by \n   Alex McLean, Felix Roos, and others. _Note_: cloud-5 makes several \n   necessary patches to the Strudel source code and distribution.\n   \n - Of course, a standards-compliant Web browser, which has an awesome set of \n   capabilities, including the most widely used programming language, \n   JavaScript, which can call Csound, CsoundAC, and Strudel.\n   \n### Capabilities\n\n - High-resolution, sample-accurate sound synthesis using one of the largest and \n   most capable libraries that exists for synthesis and signal processing, the \n   [Csound opcodes](https://csound.com/docs/manual/index.html).\n   \n - Interactive live music coding using the domain-specific, real-time music \n   programming language Strudel; this includes a neat animated piano roll \n   display of currently playing notes in the music.\n   \n - Control of Csound from Strudel. This includes both real-time notes \n   generated by Strudel patches for the `csound` and `csoundm` outputs, and \n   real-time control channel values created by Strudel Patterns, including the \n   new `slider` widget.\n   \n - MIDI input and output from Csound and Strudel.\n \n - Open Sound Control input and output from Csound and Strudel.\n   \n - Several systems for time-frequency analysis/synthesis, from Csound, including \n   Victor Lazzarini's \n   [phase vocoder streaming](https://csound.com/docs/manual/SpectralRealTime.html) \n   (PVS) opcodes.\n \n - Several high-fidelity sample players, from Csound \n   ([Fluidsynth opcodes](https://csound.com/docs/manual/SiggenSample.html#SiggenSampleSF)) \n   and Strudel ([superdough](https://github.com/tidalcycles/strudel/tree/main/packages/superdough)).\n \n - High-resolution, three-dimensional, animated computer graphics using \n   WebGL and/or OpenGL Shader Language (GLSL), from the Web browser.\n   \n - All of the staggering panoply of capabilities that are built into every \n   standards-compliant Web browser, see [HTML5 Test](https://html5test.com/).\n\n## Running in the Browser\n\n### Limitations\n\nThe major limitation of running in the browser is that csound-5 pieces are \nsandboxed, and cannot write to the file system. In other words, cloud-5 \ncannot write soundfiles, or any other kind of files. That means all audio is \nstreaming audio. \n\nHowever, it _is_ possible to use an audio loopback driver such as \n[BlackHole](https://github.com/ExistentialAudio/BlackHole) to route \naudio produced by cloud-5 to a digital audio workstation that _can_ write \nsoundfiles. The maximum resolution of such soundfiles is floating-point \nsamples at 48 KHz, significantly higher resolution than the CD format.\n\nTo set this up on the Mac, open the Audio MIDI Setup app, click on the `+` at\nthe bottom, and click on Create Multi-Ouput Device, including both your \nstandard audio output and BlackHole. Then, in the Sound settings, select that \nMulti-Output Device as the default output. Finally, in your DAW or recording \nsoftware, select BlackHole as the audio input device.\n\n## Getting Started\n\n### Pre-requisites\n\n - A Web server that will run from a configurable directory in which you can \n   read, edit, and write files. On most systems, the simplest way to get a Web \n   server is to install [Python 3](https://www.python.org/).\n   \n - A standards-compliant Web browser (currently, that includes nearly all Web \n   browsers). Should already exist on your system. On Android, install a Web \n   server app such as \n   [Phlox](https://play.google.com/store/apps/details?id=com.phlox.simpleserver).\n   \n - A text or code editor for writing your compositions. A simple text editor \n   should already exist on your system. I use \n   [Visual Studio Code](https://code.visualstudio.com/) myself, as it is very \n   powerful and yet easy to customize. On Android, install a text editor such as\n   [QuickEdit Pro](https://play.google.com/store/apps/details?id=com.rhmsoft.edit.pro). \n   \n - Of course, an audio driver that will play audio from Web browsers! Should \n   already be part of your operating system.\n\n### Installation\n\nThere is no installation! Simply download the release, and unzip it.\n\ncloud-5 can be stored on a USB thumb drive, and will run with all functionality \n_from_ the thumb drive. This makes it possible to carry all of your work in \nprogress from computer to device to computer.\n\nOr, simply copy the entire cloud-5 directory with all contents to your computer \nor device. Make sure you can execute, read, edit, and write files in your \ncloud-5 directory.\n\n### Configuration\n\nThere is no configuration!\n\nWell, actually there might be one thing. You might need to configure your \nlocal Web server to serve files from your cloud-5 directory.\n\n### Running\n\n 1. Start a local Web server to serve the cloud-5 directory. The easiest way \n    to do this on most systems is to open a terminal, change to your cloud-5 \n    directory, and execute `python3 -m http.server`. \n\n 2. Start your Web browser, and navigate to your cloud-5 Web site (usually \n    just something like `https://localhost:8000`). Some users have problems \n    with Firefox, e.g. with WebMIDI permissions. If you experience this, try \n    the Chrome browser.\n\n 3. You should see this README as a Web page. Click on \n    [cloud_music_no_1.html](cloud_music_no_1.html) and verify that you see \n    animated graphics, and can play and hear the piece.\n\n 4. Some cloud-5 pieces use the dat.gui library to create a popup menu of \n    controls for Csound instruments or other purposes. You can create new \n    presets, and you can get the Web browser to remember the current preset \n    parameters in local storage. If you need to revert to the hard-coded \n    parameters in a piece, clear local storage in the browser settings, or \n    in the browser's debugger.\n\n## Making Music\n\nIn cloud-5, musical compositions are written as Web pages, i.e. as .html \nfiles. \n\nIt's a good idea for each composition to be written as just one .html file. \nIt must be in your cloud-5 directory. Any Csound orchestra code, JavaScript \ncode, and GLSL shader programs should simply be embedded in the HTML file in, \ne.g., template strings (string literals) in JavaScript code, or included as \n`<script>` or `<textview>` elements.\n\nThere are many ways to write compositions, because the capabilities of Csound, \nStrudel, and HTML5 are so vast. Start out by a making a copy of one of the \nexamples below, and edit it to suit your own purposes. The examples start \nout simple, and get more and more complicated and capable.\n\n - A [minimal example](minimal.html) that just plays an embedded Csound piece.\n \n - A [Csound Player](player.html) that will play, and let you edit, any \n   Csound piece that you paste into the text area.\n   \n - [Message from Another Planet](message.html), a Csound piece with a basic \n   HTML user interface.\n \n - [Strudel REPL](strudel_repl.html), exactly the same as the main Strudel Web \n   site.\n \n - [Trichord Space](trichord_space.cloud5.html), an interactive piece that displays \n   Dmitri Tymoczko's chord space for trichords, with the ability to perform, \n   hear, and visualize various operations on the chords in the space.\n \n - [Scrims](scrims.html), a JavaScript piece that samples an animated WebGL \n   hopalong fractal to obtain notes that are then harmonized using CsoundAC's \n   chord space operations.\n   \n - [Cloud Music No. 1](cloud_music_no_1.html), a piece that generates an \n   abstract flowing visual using a GLSL shader. Data from the moving image \n   is sampled to obtain musical notes, which are then harmonized using \n   chords, scales, and modulations generated by CsoundAC, and rendered as \n   audio using Csound.\n   \n - [Cloud Music No. 9](cloud_music_no_9.html), a Strudel piece in an \n   alternative tuning system that uses Csound for synthesis, with a music \n   visualization written in GLSL. There is an embedded Strudel REPL that \n   allows the user to live code the piece, while showing an animated piano \n   roll display of the generated notes.\n   \n - [Cloud Music No. 14](cloud_music_no_14.html), a piece that generates an \n   abstract flowing visual using a GLSL shader. Data from the moving image \n   is sampled to obtain musical notes, which are then harmonized using \n   chords, scales, and modulations generated by CsoundAC, and rendered as \n   audio using Csound. The _Record_ button begins to record the performance,\n   and the _Pause_ button stops recording and downloads the recording to the \n   user's computer.\n   \n - [Cancycle](cancycle.html), a piece in three sections designed for live \n   coding.\n\n## Tutorial Pieces\n\nThese are pieces designed to show how to use the new architecture for cloud-5 \nbased on `cloud-5.js`, a library of resuable Web components that greatly \nsimplifies writing cloud music pieces.\n\n- [`cloud5-example-simple.html`](cloud5-example-simple.html): a very simple \n  composition that illustrates my paper on cloud-music. \n  \n- [`cloud5-example-score-generator.html`](cloud5-example-score-generator.html): \n  a fixed-length piece with a score generated by CsoundAC, with an animated \n  piano roll display and audio visualization.\n\n- [`cloud5-example-strudel.html`](cloud5-example-strudel.html): always-on \n  music produced by a Strudel patch, with audio visualization. This piece is \n  live-codeable.\n\n- [`cloud5-example-visual-music.html`](cloud5-example-visual-music.html): \n  always-on visual music produced by a GLSL shader that is sampled and \n  shaped using CsoundAC.\n\n## Documentation\n\n - [My paper on the cloud-5 system](cloud-5.pdf).\n\n - [cloud-5 reference](jsdocs).\n\n - [Strudel documentation](https://strudel.tidalcycles.org/workshop/getting-started).\n\n - [Csound reference](https://csound.com/docs/manual/index.html).\n   \n## Extending cloud-5\n\nYou can extend the capabilities of cloud-5 in several ways, including:\n\n - Write user-defined opcodes (UDOs) in Csound that you can `#include` in any \n   Csound orchestra.\n   \n - Write a custom JavaScript module that you can use in any .html file.\n \n - Write code in another high-level language and compile it for WebAssembly, \n   so that it will run in any standards-compliant Web browser.\n\n - Subclass any of cloud-5's custom HTML elements, or create your own.\n   \n - Adapt for your musical purposes any other software that can run in a Web \n   browser and be controlled by JavaScript. That covers rather a lot of \n   ground....\n   \n## Contributing to cloud-5\n\n - Enter an issue in the cloud-5 GitHub repository: either a bug, or a \n   feature request. It should briefly describe what you are going to \n   contribute.\n\n - Make your own fork of the cloud-5 repository.\n \n - Make any contributions or changes in your fork.\n \n - Create a pull request in your fork. Reference the issue you have \n   created.\n \n - I will review the pull request, and I will probably merge it if it does not \n   break existing functionality, is in keeping with the general objectives of \n   cloud-5, and builds and runs for me.\n \nAvoid introducing new external dependencies as much as possible. Avoid \nintroducing new programming languages as much as possible. Do not load \ndependencies from content distribution networks (CDNs); all dependendencies \nused by cloud-5 must be static resources in the cloud-5 directory \n(obviously, Strudel is a big exception, but I want to keep that the only one; \nbesides, the build process bundles Strudel into .js files that _are_ \nstatically served from the cloud-5 directory).\n\n## Building\n\nBuilding cloud-5 is not normally necessary, as pieces will run directly from \nthe downloaded files. However, if you plan to make substantial contributions \nto, or alterations of, cloud-5. these are the instructions for building.\n\nInstall [pnpm](https://www.npmjs.com/package/pnpm), which cloud-5 and \nStrudel use rather than npm. On macOS (I don't know about other platforms), \nyou may need to specifically install node@18.\n\nTo initialize the local repository, obtain dependencies, build a static Web \nsite, and run it locally, execute the following commands:\n\n```\npnpm install\npnpm run setup\npnpm run build\npnpm run debug\n```\nThese commands will patch Strudel with my addons; build everything; make a \ndistributable copy of the cloud-5 Web site in the `cloud-5` directory, with \nall resources statically available; and run a local Web site, which is source \nlevel debuggable, in that directory. Examine `package.json` for details. \n\nThis may fail due to failure to build `canvas.node` (not actually used here). \nIf that happens, execute `cd cloud-5/strudel/packages/canvas` and \n`node-gyp rebuild`, and try again from `pnpm run build`.\n\nBefore updating Strudel from GitHub, make a branch to contain the updates if \nthey break cloud-5.\n\nIf you see warnings or errors, don't panic unless browsing localhost does not \nopen a working Web site with playable pieces! \n\nIt may be necessary to clear the browser cache and application site data to \nsee updated pieces.\n\n_**NOTE WELL**_: The `gogins.github.io` repository is maintained using \n`pnpm run deploy` in _this_ `cloud-5` repository. _DO NOT_ delete any files \nfrom `gogins.github.io`, although pieces may be added there. In other words, \n`gogins.github.io` can be the same as, or a superset of, `cloud-5`.\n\n## Running in NW.js\n\nIt also is possible to run cloud-5 pieces locally in [NW.js](https://nwjs.io/) \nusing [csound.node](https://github.com/gogins/csound-extended-node). In this \ncase, csound.node provides a native code build of Csound, and such pieces can \nload native code plugins and read and write to the local filesystem.\n\nThis involves installing a number of pre-requisites, but the advantages \ninclude somewhat higher performance from native code Csound, the ability to \nuse native plugins (both Csound plugin opcodes and VST3 plugins), and the \nability to read and write in the local filesystem.\n\n### Installation\n\n 1. Install regular [Csound for desktop computers](https://csound.com/download.html).\n 2. Install [pnpm](https://pnpm.io/installation).\n 2. Install [csound.node](https://github.com/gogins/csound-extended-node). Note that \n    the API for csound.node is virtually the same as the API for my WebAssembly build \n    of Csound.\n 2. Install [NW.js](https://nwjs.io/).\n\n### Configuration and Running\n\nRead about [csound.node](https://github.com/gogins/csound-extended-node) \nand make sure that the application directory for your `csound.node` pieces is the \n`cloud-5` directory, which includes necessary resources.\n\n## Release Notes\n\n### [v1.0](xxx)\n\n - Added cloud-5.js, cloud-5.css, example pieces, and my paper on using \n   cloud-5. These greatly simplify writing cloud music pieces.\n\n - Various bug fixes ported from CsoundAC's Silencio score, used for the piano \n   roll display.\n\n - Updated Csound, CsoundAC, and Strudel.\n\n### [v0.2](https://github.com/gogins/cloud-5/commits/v0.2)\n\n - Added _Record_ and _Pause_ button to _Cloud Music No. 14_, for the user to\n download a soundfile that records the performance using Csound's `fout` \n opcode.\n\n - Updated Csound, [csound-wasm](https://github.com/gogins/csound-wasm), \n   and Strudel to current versions.\n\n ### [v0.1](https://github.com/gogins/cloud-5/commits/v0.1)\n\n - Improved user interface and code organization in some pieces, making them \n   more usable as templates for newer pieces.\n\n - Improved documentation.\n\n - Updated Csound, [csound-wasm](https://github.com/gogins/csound-wasm), \n   and Strudel to current versions.\n\n - Pieces in cloud-5, including pieces using Strudel, can now also run locally \n   in [NW.js](https://nwjs.io/) using \n   [csound.node](https://github.com/gogins/csound-extended-node).\n\n### [v0.1beta7](https://github.com/gogins/cloud-5/commits/v0.1beta7)\n\n - Updated Csound to version 6.19.0.\n\n - Improved [csound-wasm](https://github.com/gogins/csound-wasm) \n   and the [Cloud Music No. 9](cloud_music_no_9.html) example to support \n   running either in NW.js with native Csound, or in Web browsers with \n   Csound for WebAssembly. This makes it possible to compose pieces \n   using Strudel that use native Csound, VST plugins, access to the local \n   filesystem, and so on.\n\n### [v0.1beta6](https://github.com/gogins/cloud-5/commits/v0.1beta6)\n\n - Introduced the CsoundAC `track` function, a variant of Strudel's `arrange` \n   that does not crash when the number of cycles for a section is set to zero \n   to silence it.\n   \n - Improved the CsoundAC `csoundn` output to send all control parameters \n   with names beginning `gi` or `gk` to Csound as control channel values; \n   these channels must first be set up in the Csound orchestra with the same \n   names.\n   \n - Added `cancyle.html`, a piece designed for live performance by doing a \n   modest amount of live coding during play.\n   \n\n### [v0.1beta5](https://github.com/gogins/cloud-5/commits/v0.1beta5)\n\n - Updated Strudel to get the extremely useful `slider`, which can be either \n   discrete or continuous. The `slider` is embedded directly into the Strudel \n   patch.\n \n - Added some code to `csoundn` that sends the value of any Strudel control \n   registered with `createParam` and whose name begins with `gi` or `gk` to \n   Csound as a control channel value. This also means that the new `slider` \n   widget in Strudel can send its value to the Csound control channel.\n \n### [v0.1beta4](https://github.com/gogins/cloud-5/commits/v0.1beta4)\n\n - Attempts have been made to correct the scheduling of the `csoundn` output \n   based on a trigger, and to get `csoundn` to output correct piano roll \n   events.\n \n - Put in diagnostic messages marked `sync` for testing.\n \n - Colorize notes in the piano roll that come from `csoundn`.\n \n - In `package.json` always make a releasable zip file in each build.\n\n### [v0.1beta3](https://github.com/gogins/cloud-5/commits/v0.1beta3)\n\n - Put in needed patch for `cyclist.mjs`.\n \n - Restored concatenated Strudel controls string in `csoundac.mjs`.\n\n### [v0.1beta2](https://github.com/gogins/cloud-5/commits/v0.1beta2)\n\n - Improved README.md/index.html.\n\n - Corrected broken links and incorrect credits in example pieces.\n\n - Replaced the favicon from Strudel with cloud-5's own favicon.\n \n### [v0.1beta](https://github.com/gogins/cloud-5/commits/v0.1beta)\n\n - This was the initial release.\n",
    "longname": "/Users/michaelgogins/cloud-5/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  }
]