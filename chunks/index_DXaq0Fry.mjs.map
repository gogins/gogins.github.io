{"version":3,"file":"index_DXaq0Fry.mjs","sources":["../../../node_modules/.pnpm/webmidi@3.1.8/node_modules/webmidi/dist/esm/webmidi.esm.js","../../../packages/midi/midi.mjs"],"sourcesContent":["/**\n * WEBMIDI.js v3.1.8\n * A JavaScript library to kickstart your MIDI projects\n * https://webmidijs.org\n * Build generated on December 16th, 2023.\n *\n * © Copyright 2015-2023, Jean-Philippe Côté.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n */\n\n/* Version: 3.1.8 - December 16, 2023 12:45:37 */\n/**\n * The `EventEmitter` class provides methods to implement the _observable_ design pattern. This\n * pattern allows one to _register_ a function to execute when a specific event is _emitted_ by the\n * emitter.\n *\n * It is intended to be an abstract class meant to be extended by (or mixed into) other objects.\n */\nclass EventEmitter {\n\n  /**\n   * Creates a new `EventEmitter`object.\n   *\n   * @param {boolean} [eventsSuspended=false] Whether the `EventEmitter` is initially in a suspended\n   * state (i.e. not executing callbacks).\n   */\n  constructor(eventsSuspended = false) {\n\n    /**\n     * An object containing a property for each event with at least one registered listener. Each\n     * event property contains an array of all the [`Listener`]{@link Listener} objects registered\n     * for the event.\n     *\n     * @type {Object}\n     * @readonly\n     */\n    this.eventMap = {};\n\n    /**\n     * Whether or not the execution of callbacks is currently suspended for this emitter.\n     *\n     * @type {boolean}\n     */\n    this.eventsSuspended = eventsSuspended == true ? true : false;\n\n  }\n\n  /**\n   * The callback function is executed when the associated event is triggered via [`emit()`](#emit).\n   * The [`emit()`](#emit) method relays all additional arguments it received to the callback\n   * functions. Since [`emit()`](#emit) can be passed a variable number of arguments, it is up to\n   * the developer to make sure the arguments match those of the associated callback. In addition,\n   * the callback also separately receives all the arguments present in the listener's\n   * [`arguments`](Listener#arguments) property. This makes it easy to pass data from where the\n   * listener is added to where the listener is executed.\n   *\n   * @callback EventEmitter~callback\n   * @param {...*} [args] A variable number of arguments matching the ones (if any) that were passed\n   * to the [`emit()`](#emit) method (except, the first one) followed by the arguments found in the\n   * listener's [`arguments`](Listener#arguments) array.\n   */\n\n  /**\n   * Adds a listener for the specified event. It returns the [`Listener`]{@link Listener} object\n   * that was created and attached to the event.\n   *\n   * To attach a global listener that will be triggered for any events, use\n   * [`EventEmitter.ANY_EVENT`]{@link #ANY_EVENT} as the first parameter. Note that a global\n   * listener will also be triggered by non-registered events.\n   *\n   * @param {string|Symbol} event The event to listen to.\n   * @param {EventEmitter~callback} callback The callback function to execute when the event occurs.\n   * @param {Object} [options={}]\n   * @param {Object} [options.context=this] The value of `this` in the callback function.\n   * @param {boolean} [options.prepend=false] Whether the listener should be added at the beginning\n   * of the listeners array and thus executed first.\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the listener\n   * automatically expires.\n   * @param {number} [options.remaining=Infinity] The number of times after which the callback\n   * should automatically be removed.\n   * @param {array} [options.arguments] An array of arguments which will be passed separately to the\n   * callback function. This array is stored in the [`arguments`]{@link Listener#arguments}\n   * property of the [`Listener`]{@link Listener} object and can be retrieved or modified as\n   * desired.\n   *\n   * @returns {Listener} The newly created [`Listener`]{@link Listener} object.\n   *\n   * @throws {TypeError} The `event` parameter must be a string or\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}.\n   * @throws {TypeError} The `callback` parameter must be a function.\n   */\n  addListener(event, callback, options = {}) {\n\n    if (\n      (typeof event === \"string\" && event.length < 1) ||\n      (event instanceof String && event.length < 1) ||\n      (typeof event !== \"string\" && !(event instanceof String) && event !== EventEmitter.ANY_EVENT)\n    ) {\n      throw new TypeError(\"The 'event' parameter must be a string or EventEmitter.ANY_EVENT.\");\n    }\n\n    if (typeof callback !== \"function\") throw new TypeError(\"The callback must be a function.\");\n\n    const listener = new Listener(event, this, callback, options);\n\n    if (!this.eventMap[event]) this.eventMap[event] = [];\n\n    if (options.prepend) {\n      this.eventMap[event].unshift(listener);\n    } else {\n      this.eventMap[event].push(listener);\n    }\n\n    return listener;\n\n  }\n\n  /**\n   * Adds a one-time listener for the specified event. The listener will be executed once and then\n   * destroyed. It returns the [`Listener`]{@link Listener} object that was created and attached\n   * to the event.\n   *\n   * To attach a global listener that will be triggered for any events, use\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} as the first parameter. Note that a\n   * global listener will also be triggered by non-registered events.\n   *\n   * @param {string|Symbol} event The event to listen to\n   * @param {EventEmitter~callback} callback The callback function to execute when the event occurs\n   * @param {Object} [options={}]\n   * @param {Object} [options.context=this] The context to invoke the callback function in.\n   * @param {boolean} [options.prepend=false] Whether the listener should be added at the beginning\n   * of the listeners array and thus executed first.\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the listener\n   * automatically expires.\n   * @param {array} [options.arguments] An array of arguments which will be passed separately to the\n   * callback function. This array is stored in the [`arguments`]{@link Listener#arguments}\n   * property of the [`Listener`]{@link Listener} object and can be retrieved or modified as\n   * desired.\n   *\n   * @returns {Listener} The newly created [`Listener`]{@link Listener} object.\n   *\n   * @throws {TypeError} The `event` parameter must be a string or\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}.\n   * @throws {TypeError} The `callback` parameter must be a function.\n   */\n  addOneTimeListener(event, callback, options = {}) {\n    options.remaining = 1;\n    this.addListener(event, callback, options);\n  }\n\n  /**\n   * Identifier to use when adding or removing a listener that should be triggered when any events\n   * occur.\n   *\n   * @type {Symbol}\n   */\n  static get ANY_EVENT() {\n    return Symbol.for(\"Any event\");\n  }\n\n  /**\n   * Returns `true` if the specified event has at least one registered listener. If no event is\n   * specified, the method returns `true` if any event has at least one listener registered (this\n   * includes global listeners registered to\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}).\n   *\n   * Note: to specifically check for global listeners added with\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}, use\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} as the parameter.\n   *\n   * @param {string|Symbol} [event=(any event)] The event to check\n   * @param {function|Listener} [callback=(any callback)] The actual function that was added to the\n   * event or the {@link Listener} object returned by `addListener()`.\n   * @returns {boolean}\n   */\n  hasListener(event, callback) {\n\n    if (event === undefined) {\n\n      // Check for ANY_EVENT\n      if (\n        this.eventMap[EventEmitter.ANY_EVENT] && this.eventMap[EventEmitter.ANY_EVENT].length > 0\n      ) {\n        return true;\n      }\n\n      // Check for any regular events\n      return Object.entries(this.eventMap).some(([, value]) => {\n        return value.length > 0;\n      });\n\n    } else {\n\n      if (this.eventMap[event] && this.eventMap[event].length > 0) {\n\n        if (callback instanceof Listener) {\n          let result = this.eventMap[event].filter(listener => listener === callback);\n          return result.length > 0;\n        } else if (typeof callback === \"function\") {\n          let result = this.eventMap[event].filter(listener => listener.callback === callback);\n          return result.length > 0;\n        } else if (callback != undefined) {\n          return false;\n        }\n\n        return true;\n\n      } else {\n        return false;\n      }\n\n\n    }\n\n  }\n\n  /**\n   * An array of all the unique event names for which the emitter has at least one registered\n   * listener.\n   *\n   * Note: this excludes global events registered with\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} because they are not tied to a\n   * specific event.\n   *\n   * @type {string[]}\n   * @readonly\n   */\n  get eventNames() {\n    return Object.keys(this.eventMap);\n  }\n\n  /**\n   * Returns an array of all the [`Listener`]{@link Listener} objects that have been registered for\n   * a specific event.\n   *\n   * Please note that global events (those added with\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}) are not returned for \"regular\"\n   * events. To get the list of global listeners, specifically use\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} as the parameter.\n   *\n   * @param {string|Symbol} event The event to get listeners for.\n   * @returns {Listener[]} An array of [`Listener`]{@link Listener} objects.\n   */\n  getListeners(event) {\n    return this.eventMap[event] || [];\n  }\n\n  /**\n   * Suspends execution of all callbacks functions registered for the specified event type.\n   *\n   * You can suspend execution of callbacks registered with\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} by passing\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} to `suspendEvent()`. Beware that this\n   * will not suspend all callbacks but only those registered with\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}. While this may seem counter-intuitive\n   * at first glance, it allows the selective suspension of global listeners while leaving other\n   * listeners alone. If you truly want to suspends all callbacks for a specific\n   * [`EventEmitter`]{@link EventEmitter}, simply set its `eventsSuspended` property to `true`.\n   *\n   * @param {string|Symbol} event The event name (or `EventEmitter.ANY_EVENT`) for which to suspend\n   * execution of all callback functions.\n   */\n  suspendEvent(event) {\n    this.getListeners(event).forEach(listener => {\n      listener.suspended = true;\n    });\n  }\n\n  /**\n   * Resumes execution of all suspended callback functions registered for the specified event type.\n   *\n   * You can resume execution of callbacks registered with\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} by passing\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} to `unsuspendEvent()`. Beware that\n   * this will not resume all callbacks but only those registered with\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}. While this may seem\n   * counter-intuitive, it allows the selective unsuspension of global listeners while leaving other\n   * callbacks alone.\n   *\n   * @param {string|Symbol} event The event name (or `EventEmitter.ANY_EVENT`) for which to resume\n   * execution of all callback functions.\n   */\n  unsuspendEvent(event) {\n    this.getListeners(event).forEach(listener => {\n      listener.suspended = false;\n    });\n  }\n\n  /**\n   * Returns the number of listeners registered for a specific event.\n   *\n   * Please note that global events (those added with\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}) do not count towards the remaining\n   * number for a \"regular\" event. To get the number of global listeners, specifically use\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} as the parameter.\n   *\n   * @param {string|Symbol} event The event which is usually a string but can also be the special\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} symbol.\n   * @returns {number} An integer representing the number of listeners registered for the specified\n   * event.\n   */\n  getListenerCount(event) {\n    return this.getListeners(event).length;\n  }\n\n  /**\n   * Executes the callback function of all the [`Listener`]{@link Listener} objects registered for\n   * a given event. The callback functions are passed the additional arguments passed to `emit()`\n   * (if any) followed by the arguments present in the [`arguments`](Listener#arguments) property of\n   * the [`Listener`](Listener) object (if any).\n   *\n   * If the [`eventsSuspended`]{@link #eventsSuspended} property is `true` or the\n   * [`Listener.suspended`]{@link Listener#suspended} property is `true`, the callback functions\n   * will not be executed.\n   *\n   * This function returns an array containing the return values of each of the callbacks.\n   *\n   * It should be noted that the regular listeners are triggered first followed by the global\n   * listeners (those added with [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}).\n   *\n   * @param {string} event The event\n   * @param {...*} args Arbitrary number of arguments to pass along to the callback functions\n   *\n   * @returns {Array} An array containing the return value of each of the executed listener\n   * functions.\n   *\n   * @throws {TypeError} The `event` parameter must be a string.\n   */\n  emit(event, ...args) {\n\n    if (typeof event !== \"string\" && !(event instanceof String)) {\n      throw new TypeError(\"The 'event' parameter must be a string.\");\n    }\n\n    if (this.eventsSuspended) return;\n\n    // We collect return values from all listeners here\n    let results = [];\n\n    // We must make sure that we do not have undefined otherwise concat() will add an undefined\n    // entry in the array.\n    let listeners = this.eventMap[EventEmitter.ANY_EVENT] || [];\n    if (this.eventMap[event]) listeners = listeners.concat(this.eventMap[event]);\n\n    listeners.forEach(listener => {\n\n      // This is the per-listener suspension check\n      if (listener.suspended) return;\n\n      let params = [...args];\n      if (Array.isArray(listener.arguments)) params = params.concat(listener.arguments);\n\n      if (listener.remaining > 0) {\n        results.push(listener.callback.apply(listener.context, params));\n        listener.count++;\n      }\n\n      if (--listener.remaining < 1) listener.remove();\n\n    });\n\n    return results;\n\n  }\n\n  /**\n   * Removes all the listeners that were added to the object upon which the method is called and\n   * that match the specified criterias. If no parameters are passed, all listeners added to this\n   * object will be removed. If only the `event` parameter is passed, all listeners for that event\n   * will be removed from that object. You can remove global listeners by using\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} as the first parameter.\n   *\n   * To use more granular options, you must at least define the `event`. Then, you can specify the\n   * callback to match or one or more of the additional options.\n   *\n   * @param {string} [event] The event name.\n   * @param {EventEmitter~callback} [callback] Only remove the listeners that match this exact\n   * callback function.\n   * @param {Object} [options]\n   * @param {*} [options.context] Only remove the listeners that have this exact context.\n   * @param {number} [options.remaining] Only remove the listener if it has exactly that many\n   * remaining times to be executed.\n   */\n  removeListener(event, callback, options = {}) {\n\n    if (event === undefined) {\n      this.eventMap = {};\n      return;\n    } else if (!this.eventMap[event]) {\n      return;\n    }\n\n    // Find listeners that do not match the criterias (those are the ones we will keep)\n    let listeners = this.eventMap[event].filter(listener => {\n\n      return (callback && listener.callback !== callback) ||\n        (options.remaining && options.remaining !== listener.remaining) ||\n        (options.context && options.context !== listener.context);\n\n    });\n\n    if (listeners.length) {\n      this.eventMap[event] = listeners;\n    } else {\n      delete this.eventMap[event];\n    }\n\n  }\n\n  /**\n   * The `waitFor()` method is an async function which returns a promise. The promise is fulfilled\n   * when the specified event occurs. The event can be a regular event or\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} (if you want to resolve as soon as any\n   * event is emitted).\n   *\n   * If the `duration` option is set, the promise will only be fulfilled if the event is emitted\n   * within the specified duration. If the event has not been fulfilled after the specified\n   * duration, the promise is rejected. This makes it super easy to wait for an event and timeout\n   * after a certain time if the event is not triggered.\n   *\n   * @param {string|Symbol} event The event to wait for\n   * @param {Object} [options={}]\n   * @param {number} [options.duration=Infinity] The number of milliseconds to wait before the\n   * promise is automatically rejected.\n   */\n  async waitFor(event, options = {}) {\n\n    options.duration = parseInt(options.duration);\n    if (isNaN(options.duration) || options.duration <= 0) options.duration = Infinity;\n\n    return new Promise((resolve, reject) => {\n\n      let timeout;\n\n      let listener = this.addListener(event, () => {\n        clearTimeout(timeout);\n        resolve();\n      }, {remaining: 1});\n\n      if (options.duration !== Infinity) {\n        timeout = setTimeout(() => {\n          listener.remove();\n          reject(\"The duration expired before the event was emitted.\");\n        }, options.duration);\n      }\n\n    });\n\n  }\n\n  /**\n   * The number of unique events that have registered listeners.\n   *\n   * Note: this excludes global events registered with\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} because they are not tied to a\n   * specific event.\n   *\n   * @type {number}\n   * @readonly\n   */\n  get eventCount() {\n    return Object.keys(this.eventMap).length;\n  }\n\n}\n\n/**\n * The `Listener` class represents a single event listener object. Such objects keep all relevant\n * contextual information such as the event being listened to, the object the listener was attached\n * to, the callback function and so on.\n *\n */\nclass Listener {\n\n  /**\n   * Creates a new `Listener` object\n   *\n   * @param {string|Symbol} event The event being listened to\n   * @param {EventEmitter} target The [`EventEmitter`]{@link EventEmitter} object that the listener\n   * is attached to.\n   * @param {EventEmitter~callback} callback The function to call when the listener is triggered\n   * @param {Object} [options={}]\n   * @param {Object} [options.context=target] The context to invoke the listener in (a.k.a. the\n   * value of `this` inside the callback function).\n   * @param {number} [options.remaining=Infinity] The remaining number of times after which the\n   * callback should automatically be removed.\n   * @param {array} [options.arguments] An array of arguments that will be passed separately to the\n   * callback function upon execution. The array is stored in the [`arguments`]{@link #arguments}\n   * property and can be retrieved or modified as desired.\n   *\n   * @throws {TypeError} The `event` parameter must be a string or\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}.\n   * @throws {ReferenceError} The `target` parameter is mandatory.\n   * @throws {TypeError} The `callback` must be a function.\n   */\n  constructor(event, target, callback, options = {}) {\n\n    if (\n      typeof event !== \"string\" &&\n      !(event instanceof String) &&\n      event !== EventEmitter.ANY_EVENT\n    ) {\n      throw new TypeError(\"The 'event' parameter must be a string or EventEmitter.ANY_EVENT.\");\n    }\n\n    if (!target) {\n      throw new ReferenceError(\"The 'target' parameter is mandatory.\");\n    }\n\n    if (typeof callback !== \"function\") {\n      throw new TypeError(\"The 'callback' must be a function.\");\n    }\n\n    // Convert single value argument to array\n    if (options.arguments !== undefined && !Array.isArray(options.arguments)) {\n      options.arguments = [options.arguments];\n    }\n\n    // Define default options and merge declared options into them,\n    options = Object.assign({\n      context: target,\n      remaining: Infinity,\n      arguments: undefined,\n      duration: Infinity,\n    }, options);\n\n    // Make sure it is eventually deleted if a duration is supplied\n    if (options.duration !== Infinity) {\n      setTimeout(() => this.remove(), options.duration);\n    }\n\n    /**\n     * An array of arguments to pass to the callback function upon execution.\n     * @type {array}\n     */\n    this.arguments = options.arguments;\n\n    /**\n     * The callback function to execute.\n     * @type {Function}\n     */\n    this.callback = callback;\n\n    /**\n     * The context to execute the callback function in (a.k.a. the value of `this` inside the\n     * callback function)\n     * @type {Object}\n     */\n    this.context = options.context;\n\n    /**\n     * The number of times the listener function was executed.\n     * @type {number}\n     */\n    this.count = 0;\n\n    /**\n     * The event name.\n     * @type {string}\n     */\n    this.event = event;\n\n    /**\n     * The remaining number of times after which the callback should automatically be removed.\n     * @type {number}\n     */\n    this.remaining = parseInt(options.remaining) >= 1 ? parseInt(options.remaining) : Infinity;\n\n    /**\n     * Whether this listener is currently suspended or not.\n     * @type {boolean}\n     */\n    this.suspended = false;\n\n    /**\n     * The object that the event is attached to (or that emitted the event).\n     * @type {EventEmitter}\n     */\n    this.target = target;\n\n  }\n\n  /**\n   * Removes the listener from its target.\n   */\n  remove() {\n    this.target.removeListener(\n      this.event,\n      this.callback,\n      {context: this.context, remaining: this.remaining}\n    );\n  }\n\n}\n\n/**\n * The `Enumerations` class contains enumerations and arrays of elements used throughout the\n * library. All its properties are static and should be referenced using the class name. For\n * example: `Enumerations.CHANNEL_MESSAGES`.\n *\n * @license Apache-2.0\n * @since 3.0.0\n */\nclass Enumerations {\n\n  /**\n   * @enum {Object.<string, number>}\n   * @readonly\n   * @deprecated since 3.1 (use Enumerations.CHANNEL_MESSAGES instead)\n   * @private\n   * @static\n   */\n  static get MIDI_CHANNEL_MESSAGES() {\n\n    if (this.validation) {\n      console.warn(\n        \"The MIDI_CHANNEL_MESSAGES enum has been deprecated. Use the \" +\n        \"Enumerations.CHANNEL_MESSAGES enum instead.\"\n      );\n    }\n\n    return Enumerations.CHANNEL_MESSAGES;\n\n  }\n\n  /**\n   * Enumeration of all MIDI channel message names and their associated 4-bit numerical value:\n   *\n   * | Message Name        | Hexadecimal | Decimal |\n   * |---------------------|-------------|---------|\n   * | `noteoff`           | 0x8         | 8       |\n   * | `noteon`            | 0x9         | 9       |\n   * | `keyaftertouch`     | 0xA         | 10      |\n   * | `controlchange`     | 0xB         | 11      |\n   * | `programchange`     | 0xC         | 12      |\n   * | `channelaftertouch` | 0xD         | 13      |\n   * | `pitchbend`         | 0xE         | 14      |\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   * @since 3.1\n   * @static\n   */\n  static get CHANNEL_MESSAGES() {\n\n    return {\n      noteoff: 0x8,           // 8\n      noteon: 0x9,            // 9\n      keyaftertouch: 0xA,     // 10\n      controlchange: 0xB,     // 11\n      programchange: 0xC,     // 12\n      channelaftertouch: 0xD, // 13\n      pitchbend: 0xE          // 14\n    };\n\n  }\n\n  /**\n   * A simple array of the 16 valid MIDI channel numbers (`1` to `16`):\n   *\n   * @type {number[]}\n   * @readonly\n   * @since 3.1\n   * @static\n   */\n  static get CHANNEL_NUMBERS() {\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\n  }\n\n  /**\n   * @type {number[]}\n   * @readonly\n   * @deprecated since 3.1 (use Enumerations.CHANNEL_NUMBERS instead)\n   * @private\n   * @static\n   */\n  static get MIDI_CHANNEL_NUMBERS() {\n\n    if (this.validation) {\n      console.warn(\n        \"The MIDI_CHANNEL_NUMBERS array has been deprecated. Use the \" +\n        \"Enumerations.CHANNEL_NUMBERS array instead.\"\n      );\n    }\n\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\n\n  }\n\n  /**\n   * Enumeration of all MIDI channel mode message names and their associated numerical value:\n   *\n   *\n   * | Message Name          | Hexadecimal | Decimal |\n   * |-----------------------|-------------|---------|\n   * | `allsoundoff`         | 0x78        | 120     |\n   * | `resetallcontrollers` | 0x79        | 121     |\n   * | `localcontrol`        | 0x7A        | 122     |\n   * | `allnotesoff`         | 0x7B        | 123     |\n   * | `omnimodeoff`         | 0x7C        | 124     |\n   * | `omnimodeon`          | 0x7D        | 125     |\n   * | `monomodeon`          | 0x7E        | 126     |\n   * | `polymodeon`          | 0x7F        | 127     |\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   * @since 3.1\n   * @static\n   */\n  static get CHANNEL_MODE_MESSAGES() {\n\n    return {\n      allsoundoff: 120,\n      resetallcontrollers: 121,\n      localcontrol: 122,\n      allnotesoff: 123,\n      omnimodeoff: 124,\n      omnimodeon: 125,\n      monomodeon: 126,\n      polymodeon: 127\n    };\n\n  }\n\n  /**\n   * @enum {Object.<string, number>}\n   * @deprecated since 3.1 (use Enumerations.CHANNEL_MODE_MESSAGES instead)\n   * @private\n   * @readonly\n   * @static\n   */\n  static get MIDI_CHANNEL_MODE_MESSAGES() {\n\n    if (this.validation) {\n      console.warn(\n        \"The MIDI_CHANNEL_MODE_MESSAGES enum has been deprecated. Use the \" +\n        \"Enumerations.CHANNEL_MODE_MESSAGES enum instead.\"\n      );\n    }\n\n    return Enumerations.CHANNEL_MODE_MESSAGES;\n\n  }\n\n  /**\n   * @enum {Object.<string, number>}\n   * @readonly\n   * @static\n   * @private\n   * @deprecated since version 3.0.26 (use `CONTROL_CHANGE_MESSAGES` instead)\n   */\n  static get MIDI_CONTROL_CHANGE_MESSAGES() {\n\n    if (this.validation) {\n      console.warn(\n        \"The MIDI_CONTROL_CHANGE_MESSAGES enum has been deprecated. Use the \" +\n        \"Enumerations.CONTROL_CHANGE_MESSAGES array instead.\"\n      );\n    }\n\n    return {\n\n      bankselectcoarse: 0,\n      modulationwheelcoarse: 1,\n      breathcontrollercoarse: 2,\n      controller3: 3,\n      footcontrollercoarse: 4,\n      portamentotimecoarse: 5,\n      dataentrycoarse: 6,\n      volumecoarse: 7,\n      balancecoarse: 8,\n      controller9: 9,\n      pancoarse: 10,\n      expressioncoarse: 11,\n      effectcontrol1coarse: 12,\n      effectcontrol2coarse: 13,\n      controller14: 14,\n      controller15: 15,\n      generalpurposeslider1: 16,\n      generalpurposeslider2: 17,\n      generalpurposeslider3: 18,\n      generalpurposeslider4: 19,\n      controller20: 20,\n      controller21: 21,\n      controller22: 22,\n      controller23: 23,\n      controller24: 24,\n      controller25: 25,\n      controller26: 26,\n      controller27: 27,\n      controller28: 28,\n      controller29: 29,\n      controller30: 30,\n      controller31: 31,\n      bankselectfine: 32,\n      modulationwheelfine: 33,\n      breathcontrollerfine: 34,\n      controller35: 35,\n      footcontrollerfine: 36,\n      portamentotimefine: 37,\n      dataentryfine: 38,\n      volumefine: 39,\n      balancefine: 40,\n      controller41: 41,\n      panfine: 42,\n      expressionfine: 43,\n      effectcontrol1fine: 44,\n      effectcontrol2fine: 45,\n      controller46: 46,\n      controller47: 47,\n      controller48: 48,\n      controller49: 49,\n      controller50: 50,\n      controller51: 51,\n      controller52: 52,\n      controller53: 53,\n      controller54: 54,\n      controller55: 55,\n      controller56: 56,\n      controller57: 57,\n      controller58: 58,\n      controller59: 59,\n      controller60: 60,\n      controller61: 61,\n      controller62: 62,\n      controller63: 63,\n      holdpedal: 64,\n      portamento: 65,\n      sustenutopedal: 66,\n      softpedal: 67,\n      legatopedal: 68,\n      hold2pedal: 69,\n      soundvariation: 70,\n      resonance: 71,\n      soundreleasetime: 72,\n      soundattacktime: 73,\n      brightness: 74,\n      soundcontrol6: 75,\n      soundcontrol7: 76,\n      soundcontrol8: 77,\n      soundcontrol9: 78,\n      soundcontrol10: 79,\n      generalpurposebutton1: 80,\n      generalpurposebutton2: 81,\n      generalpurposebutton3: 82,\n      generalpurposebutton4: 83,\n      controller84: 84,\n      controller85: 85,\n      controller86: 86,\n      controller87: 87,\n      controller88: 88,\n      controller89: 89,\n      controller90: 90,\n      reverblevel: 91,\n      tremololevel: 92,\n      choruslevel: 93,\n      celestelevel: 94,\n      phaserlevel: 95,\n      databuttonincrement: 96,\n      databuttondecrement: 97,\n      nonregisteredparametercoarse: 98,\n      nonregisteredparameterfine: 99,\n      registeredparametercoarse: 100,\n      registeredparameterfine: 101,\n      controller102: 102,\n      controller103: 103,\n      controller104: 104,\n      controller105: 105,\n      controller106: 106,\n      controller107: 107,\n      controller108: 108,\n      controller109: 109,\n      controller110: 110,\n      controller111: 111,\n      controller112: 112,\n      controller113: 113,\n      controller114: 114,\n      controller115: 115,\n      controller116: 116,\n      controller117: 117,\n      controller118: 118,\n      controller119: 119,\n      allsoundoff: 120,\n      resetallcontrollers: 121,\n      localcontrol: 122,\n      allnotesoff: 123,\n      omnimodeoff: 124,\n      omnimodeon: 125,\n      monomodeon: 126,\n      polymodeon: 127\n\n    };\n\n  }\n\n  /**\n   * An array of objects, ordered by control number, describing control change messages. Each object\n   * in the array has 3 properties with some objects having a fourth one (`position`) :\n   *\n   *  * `number`: MIDI control number (0-127);\n   *  * `name`: name of emitted event (eg: `bankselectcoarse`, `choruslevel`, etc) that can be\n   *  listened to;\n   *  * `description`: user-friendly description of the controller's purpose;\n   *  * `position` (optional): whether this controller's value should be considered an `msb` or\n   *  `lsb`\n   *\n   * Not all controllers have a predefined function. For those that don't, `name` is the word\n   * \"controller\" followed by the number (e.g. `controller112`).\n   *\n   * | Event name                     | Control Number |\n   * |--------------------------------|----------------|\n   * | `bankselectcoarse`             | 0              |\n   * | `modulationwheelcoarse`        | 1              |\n   * | `breathcontrollercoarse`       | 2              |\n   * | `controller3`                  | 3              |\n   * | `footcontrollercoarse`         | 4              |\n   * | `portamentotimecoarse`         | 5              |\n   * | `dataentrycoarse`              | 6              |\n   * | `volumecoarse`                 | 7              |\n   * | `balancecoarse`                | 8              |\n   * | `controller9`                  | 9              |\n   * | `pancoarse`                    | 10             |\n   * | `expressioncoarse`             | 11             |\n   * | `effectcontrol1coarse`         | 12             |\n   * | `effectcontrol2coarse`         | 13             |\n   * | `controller14`                 | 14             |\n   * | `controller15`                 | 15             |\n   * | `generalpurposecontroller1`    | 16             |\n   * | `generalpurposecontroller2`    | 17             |\n   * | `generalpurposecontroller3`    | 18             |\n   * | `generalpurposecontroller4`    | 19             |\n   * | `controller20`                 | 20             |\n   * | `controller21`                 | 21             |\n   * | `controller22`                 | 22             |\n   * | `controller23`                 | 23             |\n   * | `controller24`                 | 24             |\n   * | `controller25`                 | 25             |\n   * | `controller26`                 | 26             |\n   * | `controller27`                 | 27             |\n   * | `controller28`                 | 28             |\n   * | `controller29`                 | 29             |\n   * | `controller30`                 | 30             |\n   * | `controller31`                 | 31             |\n   * | `bankselectfine`               | 32             |\n   * | `modulationwheelfine`          | 33             |\n   * | `breathcontrollerfine`         | 34             |\n   * | `controller35`                 | 35             |\n   * | `footcontrollerfine`           | 36             |\n   * | `portamentotimefine`           | 37             |\n   * | `dataentryfine`                | 38             |\n   * | `channelvolumefine`            | 39             |\n   * | `balancefine`                  | 40             |\n   * | `controller41`                 | 41             |\n   * | `panfine`                      | 42             |\n   * | `expressionfine`               | 43             |\n   * | `effectcontrol1fine`           | 44             |\n   * | `effectcontrol2fine`           | 45             |\n   * | `controller46`                 | 46             |\n   * | `controller47`                 | 47             |\n   * | `controller48`                 | 48             |\n   * | `controller49`                 | 49             |\n   * | `controller50`                 | 50             |\n   * | `controller51`                 | 51             |\n   * | `controller52`                 | 52             |\n   * | `controller53`                 | 53             |\n   * | `controller54`                 | 54             |\n   * | `controller55`                 | 55             |\n   * | `controller56`                 | 56             |\n   * | `controller57`                 | 57             |\n   * | `controller58`                 | 58             |\n   * | `controller59`                 | 59             |\n   * | `controller60`                 | 60             |\n   * | `controller61`                 | 61             |\n   * | `controller62`                 | 62             |\n   * | `controller63`                 | 63             |\n   * | `damperpedal`                  | 64             |\n   * | `portamento`                   | 65             |\n   * | `sostenuto`                    | 66             |\n   * | `softpedal`                    | 67             |\n   * | `legatopedal`                  | 68             |\n   * | `hold2`                        | 69             |\n   * | `soundvariation`               | 70             |\n   * | `resonance`                    | 71             |\n   * | `releasetime`                  | 72             |\n   * | `attacktime`                   | 73             |\n   * | `brightness`                   | 74             |\n   * | `decaytime`                    | 75             |\n   * | `vibratorate`                  | 76             |\n   * | `vibratodepth`                 | 77             |\n   * | `vibratodelay`                 | 78             |\n   * | `controller79`                 | 79             |\n   * | `generalpurposecontroller5`    | 80             |\n   * | `generalpurposecontroller6`    | 81             |\n   * | `generalpurposecontroller7`    | 82             |\n   * | `generalpurposecontroller8`    | 83             |\n   * | `portamentocontrol`            | 84             |\n   * | `controller85`                 | 85             |\n   * | `controller86`                 | 86             |\n   * | `controller87`                 | 87             |\n   * | `highresolutionvelocityprefix` | 88             |\n   * | `controller89`                 | 89             |\n   * | `controller90`                 | 90             |\n   * | `effect1depth`                 | 91             |\n   * | `effect2depth`                 | 92             |\n   * | `effect3depth`                 | 93             |\n   * | `effect4depth`                 | 94             |\n   * | `effect5depth`                 | 95             |\n   * | `dataincrement`                | 96             |\n   * | `datadecrement`                | 97             |\n   * | `nonregisteredparameterfine`   | 98             |\n   * | `nonregisteredparametercoarse` | 99             |\n   * | `nonregisteredparameterfine`   | 100            |\n   * | `registeredparametercoarse`    | 101            |\n   * | `controller102`                | 102            |\n   * | `controller103`                | 103            |\n   * | `controller104`                | 104            |\n   * | `controller105`                | 105            |\n   * | `controller106`                | 106            |\n   * | `controller107`                | 107            |\n   * | `controller108`                | 108            |\n   * | `controller109`                | 109            |\n   * | `controller110`                | 110            |\n   * | `controller111`                | 111            |\n   * | `controller112`                | 112            |\n   * | `controller113`                | 113            |\n   * | `controller114`                | 114            |\n   * | `controller115`                | 115            |\n   * | `controller116`                | 116            |\n   * | `controller117`                | 117            |\n   * | `controller118`                | 118            |\n   * | `controller119`                | 119            |\n   * | `allsoundoff`                  | 120            |\n   * | `resetallcontrollers`          | 121            |\n   * | `localcontrol`                 | 122            |\n   * | `allnotesoff`                  | 123            |\n   * | `omnimodeoff`                  | 124            |\n   * | `omnimodeon`                   | 125            |\n   * | `monomodeon`                   | 126            |\n   * | `polymodeon`                   | 127            |\n   *\n   * @type {object[]}\n   * @readonly\n   * @static\n   * @since 3.1\n   */\n  static get CONTROL_CHANGE_MESSAGES() {\n\n    return [\n      {\n        number: 0,\n        name: \"bankselectcoarse\",\n        description: \"Bank Select (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 1,\n        name: \"modulationwheelcoarse\",\n        description: \"Modulation Wheel (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 2,\n        name: \"breathcontrollercoarse\",\n        description: \"Breath Controller (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 3,\n        name: \"controller3\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 4,\n        name: \"footcontrollercoarse\",\n        description: \"Foot Controller (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 5,\n        name: \"portamentotimecoarse\",\n        description: \"Portamento Time (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 6,\n        name: \"dataentrycoarse\",\n        description: \"Data Entry (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 7,\n        name: \"volumecoarse\",\n        description: \"Channel Volume (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 8,\n        name: \"balancecoarse\",\n        description: \"Balance (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 9,\n        name: \"controller9\",\n        description: \"Controller 9 (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 10,\n        name: \"pancoarse\",\n        description: \"Pan (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 11,\n        name: \"expressioncoarse\",\n        description: \"Expression Controller (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 12,\n        name: \"effectcontrol1coarse\",\n        description: \"Effect Control 1 (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 13,\n        name: \"effectcontrol2coarse\",\n        description: \"Effect Control 2 (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 14,\n        name: \"controller14\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 15,\n        name: \"controller15\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 16,\n        name: \"generalpurposecontroller1\",\n        description: \"General Purpose Controller 1 (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 17,\n        name: \"generalpurposecontroller2\",\n        description: \"General Purpose Controller 2 (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 18,\n        name: \"generalpurposecontroller3\",\n        description: \"General Purpose Controller 3 (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 19,\n        name: \"generalpurposecontroller4\",\n        description: \"General Purpose Controller 4 (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 20,\n        name: \"controller20\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 21,\n        name: \"controller21\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 22,\n        name: \"controller22\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 23,\n        name: \"controller23\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 24,\n        name: \"controller24\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 25,\n        name: \"controller25\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 26,\n        name: \"controller26\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 27,\n        name: \"controller27\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 28,\n        name: \"controller28\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 29,\n        name: \"controller29\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 30,\n        name: \"controller30\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 31,\n        name: \"controller31\",\n        description: \"Undefined\",\n        position: \"msb\"\n      },\n      {\n        number: 32,\n        name: \"bankselectfine\",\n        description: \"Bank Select (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 33,\n        name: \"modulationwheelfine\",\n        description: \"Modulation Wheel (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 34,\n        name: \"breathcontrollerfine\",\n        description: \"Breath Controller (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 35,\n        name: \"controller35\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 36,\n        name: \"footcontrollerfine\",\n        description: \"Foot Controller (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 37,\n        name: \"portamentotimefine\",\n        description: \"Portamento Time (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 38,\n        name: \"dataentryfine\",\n        description: \"Data Entry (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 39,\n        name: \"channelvolumefine\",\n        description: \"Channel Volume (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 40,\n        name: \"balancefine\",\n        description: \"Balance (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 41,\n        name: \"controller41\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 42,\n        name: \"panfine\",\n        description: \"Pan (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 43,\n        name: \"expressionfine\",\n        description: \"Expression Controller (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 44,\n        name: \"effectcontrol1fine\",\n        description: \"Effect control 1 (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 45,\n        name: \"effectcontrol2fine\",\n        description: \"Effect control 2 (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 46,\n        name: \"controller46\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 47,\n        name: \"controller47\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 48,\n        name: \"controller48\",\n        description: \"General Purpose Controller 1 (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 49,\n        name: \"controller49\",\n        description: \"General Purpose Controller 2 (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 50,\n        name: \"controller50\",\n        description: \"General Purpose Controller 3 (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 51,\n        name: \"controller51\",\n        description: \"General Purpose Controller 4 (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 52,\n        name: \"controller52\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 53,\n        name: \"controller53\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 54,\n        name: \"controller54\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 55,\n        name: \"controller55\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 56,\n        name: \"controller56\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 57,\n        name: \"controller57\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 58,\n        name: \"controller58\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 59,\n        name: \"controller59\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 60,\n        name: \"controller60\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 61,\n        name: \"controller61\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 62,\n        name: \"controller62\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 63,\n        name: \"controller63\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 64,\n        name: \"damperpedal\",\n        description: \"Damper Pedal On/Off\"\n      },\n      {\n        number: 65,\n        name: \"portamento\",\n        description: \"Portamento On/Off\"\n      },\n      {\n        number: 66,\n        name: \"sostenuto\",\n        description: \"Sostenuto On/Off\"\n      },\n      {\n        number: 67,\n        name: \"softpedal\",\n        description: \"Soft Pedal On/Off\"\n      },\n      {\n        number: 68,\n        name: \"legatopedal\",\n        description: \"Legato Pedal On/Off\"\n      },\n      {\n        number: 69,\n        name: \"hold2\",\n        description: \"Hold 2 On/Off\"\n      },\n      {\n        number: 70,\n        name: \"soundvariation\",\n        description: \"Sound Variation\",\n        position: \"lsb\"\n      },\n      {\n        number: 71,\n        name: \"resonance\",\n        description: \"Resonance\",\n        position: \"lsb\"\n      },\n      {\n        number: 72,\n        name: \"releasetime\",\n        description: \"Release Time\",\n        position: \"lsb\"\n      },\n      {\n        number: 73,\n        name: \"attacktime\",\n        description: \"Attack Time\",\n        position: \"lsb\"\n      },\n      {\n        number: 74,\n        name: \"brightness\",\n        description: \"Brightness\",\n        position: \"lsb\"\n      },\n      {\n        number: 75,\n        name: \"decaytime\",\n        description: \"Decay Time\",\n        position: \"lsb\"\n      },\n      {\n        number: 76,\n        name: \"vibratorate\",\n        description: \"Vibrato Rate\",\n        position: \"lsb\"\n      },\n      {\n        number: 77,\n        name: \"vibratodepth\",\n        description: \"Vibrato Depth\",\n        position: \"lsb\"\n      },\n      {\n        number: 78,\n        name: \"vibratodelay\",\n        description: \"Vibrato Delay\",\n        position: \"lsb\"\n      },\n      {\n        number: 79,\n        name: \"controller79\",\n        description: \"Undefined\",\n        position: \"lsb\"\n      },\n      {\n        number: 80,\n        name: \"generalpurposecontroller5\",\n        description: \"General Purpose Controller 5\",\n        position: \"lsb\"\n      },\n      {\n        number: 81,\n        name: \"generalpurposecontroller6\",\n        description: \"General Purpose Controller 6\",\n        position: \"lsb\"\n      },\n      {\n        number: 82,\n        name: \"generalpurposecontroller7\",\n        description: \"General Purpose Controller 7\",\n        position: \"lsb\"\n      },\n      {\n        number: 83,\n        name: \"generalpurposecontroller8\",\n        description: \"General Purpose Controller 8\",\n        position: \"lsb\"\n      },\n      {\n        number: 84,\n        name: \"portamentocontrol\",\n        description: \"Portamento Control\",\n        position: \"lsb\"\n      },\n      {\n        number: 85,\n        name: \"controller85\",\n        description: \"Undefined\"\n      },\n      {\n        number: 86,\n        name: \"controller86\",\n        description: \"Undefined\"\n      },\n      {\n        number: 87,\n        name: \"controller87\",\n        description: \"Undefined\"\n      },\n      {\n        number: 88,\n        name: \"highresolutionvelocityprefix\",\n        description: \"High Resolution Velocity Prefix\",\n        position: \"lsb\"\n      },\n      {\n        number: 89,\n        name: \"controller89\",\n        description: \"Undefined\"\n      },\n      {\n        number: 90,\n        name: \"controller90\",\n        description: \"Undefined\"\n      },\n      {\n        number: 91,\n        name: \"effect1depth\",\n        description: \"Effects 1 Depth (Reverb Send Level)\"\n      },\n      {\n        number: 92,\n        name: \"effect2depth\",\n        description: \"Effects 2 Depth\"\n      },\n      {\n        number: 93,\n        name: \"effect3depth\",\n        description: \"Effects 3 Depth (Chorus Send Level)\"\n      },\n      {\n        number: 94,\n        name: \"effect4depth\",\n        description: \"Effects 4 Depth\"\n      },\n      {\n        number: 95,\n        name: \"effect5depth\",\n        description: \"Effects 5 Depth\"\n      },\n      {\n        number: 96,\n        name: \"dataincrement\",\n        description: \"Data Increment\"\n      },\n      {\n        number: 97,\n        name: \"datadecrement\",\n        description: \"Data Decrement\"\n      },\n      {\n        number: 98,\n        name: \"nonregisteredparameterfine\",\n        description: \"Non-Registered Parameter Number (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 99,\n        name: \"nonregisteredparametercoarse\",\n        description: \"Non-Registered Parameter Number (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 100,\n        name: \"registeredparameterfine\",\n        description: \"Registered Parameter Number (Fine)\",\n        position: \"lsb\"\n      },\n      {\n        number: 101,\n        name: \"registeredparametercoarse\",\n        description: \"Registered Parameter Number (Coarse)\",\n        position: \"msb\"\n      },\n      {\n        number: 102,\n        name: \"controller102\",\n        description: \"Undefined\"\n      },\n      {\n        number: 103,\n        name: \"controller103\",\n        description: \"Undefined\"\n      },\n      {\n        number: 104,\n        name: \"controller104\",\n        description: \"Undefined\"\n      },\n      {\n        number: 105,\n        name: \"controller105\",\n        description: \"Undefined\"\n      },\n      {\n        number: 106,\n        name: \"controller106\",\n        description: \"Undefined\"\n      },\n      {\n        number: 107,\n        name: \"controller107\",\n        description: \"Undefined\"\n      },\n      {\n        number: 108,\n        name: \"controller108\",\n        description: \"Undefined\"\n      },\n      {\n        number: 109,\n        name: \"controller109\",\n        description: \"Undefined\"\n      },\n      {\n        number: 110,\n        name: \"controller110\",\n        description: \"Undefined\"\n      },\n      {\n        number: 111,\n        name: \"controller111\",\n        description: \"Undefined\"\n      },\n      {\n        number: 112,\n        name: \"controller112\",\n        description: \"Undefined\"\n      },\n      {\n        number: 113,\n        name: \"controller113\",\n        description: \"Undefined\"\n      },\n      {\n        number: 114,\n        name: \"controller114\",\n        description: \"Undefined\"\n      },\n      {\n        number: 115,\n        name: \"controller115\",\n        description: \"Undefined\"\n      },\n      {\n        number: 116,\n        name: \"controller116\",\n        description: \"Undefined\"\n      },\n      {\n        number: 117,\n        name: \"controller117\",\n        description: \"Undefined\"\n      },\n      {\n        number: 118,\n        name: \"controller118\",\n        description: \"Undefined\"\n      },\n      {\n        number: 119,\n        name: \"controller119\",\n        description: \"Undefined\"\n      },\n      {\n        number: 120,\n        name: \"allsoundoff\",\n        description: \"All Sound Off\"\n      },\n      {\n        number: 121,\n        name: \"resetallcontrollers\",\n        description: \"Reset All Controllers\"\n      },\n      {\n        number: 122,\n        name: \"localcontrol\",\n        description: \"Local Control On/Off\"\n      },\n      {\n        number: 123,\n        name: \"allnotesoff\",\n        description: \"All Notes Off\"\n      },\n      {\n        number: 124,\n        name: \"omnimodeoff\",\n        description: \"Omni Mode Off\"\n      },\n      {\n        number: 125,\n        name: \"omnimodeon\",\n        description: \"Omni Mode On\"\n      },\n      {\n        number: 126,\n        name: \"monomodeon\",\n        description: \"Mono Mode On\"\n      },\n      {\n        number: 127,\n        name: \"polymodeon\",\n        description: \"Poly Mode On\"\n      },\n    ];\n\n  }\n\n  /**\n   * Enumeration of all MIDI registered parameters and their associated pair of numerical values.\n   * MIDI registered parameters extend the original list of control change messages. Currently,\n   * there are only a limited number of them:\n   *\n   *\n   * | Control Function             | [LSB, MSB]   |\n   * |------------------------------|--------------|\n   * | `pitchbendrange`             | [0x00, 0x00] |\n   * | `channelfinetuning`          | [0x00, 0x01] |\n   * | `channelcoarsetuning`        | [0x00, 0x02] |\n   * | `tuningprogram`              | [0x00, 0x03] |\n   * | `tuningbank`                 | [0x00, 0x04] |\n   * | `modulationrange`            | [0x00, 0x05] |\n   * | `azimuthangle`               | [0x3D, 0x00] |\n   * | `elevationangle`             | [0x3D, 0x01] |\n   * | `gain`                       | [0x3D, 0x02] |\n   * | `distanceratio`              | [0x3D, 0x03] |\n   * | `maximumdistance`            | [0x3D, 0x04] |\n   * | `maximumdistancegain`        | [0x3D, 0x05] |\n   * | `referencedistanceratio`     | [0x3D, 0x06] |\n   * | `panspreadangle`             | [0x3D, 0x07] |\n   * | `rollangle`                  | [0x3D, 0x08] |\n   *\n   * @enum {Object.<string, number[]>}\n   * @readonly\n   * @since 3.1\n   * @static\n   */\n  static get REGISTERED_PARAMETERS() {\n\n    return {\n      pitchbendrange: [0x00, 0x00],\n      channelfinetuning: [0x00, 0x01],\n      channelcoarsetuning: [0x00, 0x02],\n      tuningprogram: [0x00, 0x03],\n      tuningbank: [0x00, 0x04],\n\n      modulationrange: [0x00, 0x05],\n      azimuthangle: [0x3D, 0x00],\n      elevationangle: [0x3D, 0x01],\n      gain: [0x3D, 0x02],\n      distanceratio: [0x3D, 0x03],\n      maximumdistance: [0x3D, 0x04],\n      maximumdistancegain: [0x3D, 0x05],\n      referencedistanceratio: [0x3D, 0x06],\n      panspreadangle: [0x3D, 0x07],\n      rollangle: [0x3D, 0x08]\n    };\n\n  }\n\n  /**\n   * @enum {Object.<string, number[]>}\n   * @readonly\n   * @deprecated since 3.1 (use Enumerations.REGISTERED_PARAMETERS instead)\n   * @private\n   * @static\n   */\n  static get MIDI_REGISTERED_PARAMETERS() {\n\n    if (this.validation) {\n      console.warn(\n        \"The MIDI_REGISTERED_PARAMETERS enum has been deprecated. Use the \" +\n        \"Enumerations.REGISTERED_PARAMETERS enum instead.\"\n      );\n    }\n\n    return Enumerations.MIDI_REGISTERED_PARAMETERS;\n\n  }\n\n  /**\n   * Enumeration of all valid MIDI system messages and matching numerical values. This library also\n   * uses two additional custom messages.\n   *\n   * **System Common Messages**\n   *\n   * | Function               | Hexadecimal | Decimal |\n   * |------------------------|-------------|---------|\n   * | `sysex`                | 0xF0        |  240    |\n   * | `timecode`             | 0xF1        |  241    |\n   * | `songposition`         | 0xF2        |  242    |\n   * | `songselect`           | 0xF3        |  243    |\n   * | `tunerequest`          | 0xF6        |  246    |\n   * | `sysexend`             | 0xF7        |  247    |\n   *\n   * The `sysexend` message is never actually received. It simply ends a sysex stream.\n   *\n   * **System Real-Time Messages**\n   *\n   * | Function               | Hexadecimal | Decimal |\n   * |------------------------|-------------|---------|\n   * | `clock`                | 0xF8        |  248    |\n   * | `start`                | 0xFA        |  250    |\n   * | `continue`             | 0xFB        |  251    |\n   * | `stop`                 | 0xFC        |  252    |\n   * | `activesensing`        | 0xFE        |  254    |\n   * | `reset`                | 0xFF        |  255    |\n   *\n   * Values 249 and 253 are relayed by the\n   * [Web MIDI API](https://developer.mozilla.org/en-US/docs/Web/API/Web_MIDI_API) but they do not\n   * serve any specific purpose. The\n   * [MIDI 1.0 spec](https://www.midi.org/specifications/item/table-1-summary-of-midi-message)\n   * simply states that they are undefined/reserved.\n   *\n   * **Custom Messages**\n   *\n   * These two messages are mostly for internal use. They are not MIDI messages and cannot be sent\n   * or forwarded.\n   *\n   * | Function               | Hexadecimal | Decimal |\n   * |------------------------|-------------|---------|\n   * | `midimessage`          |             |  0      |\n   * | `unknownsystemmessage` |             |  -1     |\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   * @since 3.1\n   * @static\n   */\n  static get SYSTEM_MESSAGES() {\n\n    return {\n\n      // System common messages\n      sysex: 0xF0,            // 240\n      timecode: 0xF1,         // 241\n      songposition: 0xF2,     // 242\n      songselect: 0xF3,       // 243\n      tunerequest: 0xF6,      // 246\n      tuningrequest: 0xF6,    // for backwards-compatibility (deprecated in version 3.0)\n      sysexend: 0xF7,         // 247 (never actually received - simply ends a sysex)\n\n      // System real-time messages\n      clock: 0xF8,            // 248\n      start: 0xFA,            // 250\n      continue: 0xFB,         // 251\n      stop: 0xFC,             // 252\n      activesensing: 0xFE,    // 254\n      reset: 0xFF,            // 255\n\n      // Custom WebMidi.js messages\n      midimessage: 0,\n      unknownsystemmessage: -1\n\n    };\n\n  }\n\n  /**\n   * @enum {Object.<string, number>}\n   * @readonly\n   * @deprecated since 3.1 (use Enumerations.SYSTEM_MESSAGES instead)\n   * @private\n   * @static\n   */\n  static get MIDI_SYSTEM_MESSAGES() {\n\n    if (this.validation) {\n      console.warn(\n        \"The MIDI_SYSTEM_MESSAGES enum has been deprecated. Use the \" +\n        \"Enumerations.SYSTEM_MESSAGES enum instead.\"\n      );\n    }\n\n    return Enumerations.SYSTEM_MESSAGES;\n\n  }\n\n  /**\n   * Array of channel-specific event names that can be listened for. This includes channel mode\n   * events and RPN/NRPN events.\n   *\n   * @type {string[]}\n   * @readonly\n   */\n  static get CHANNEL_EVENTS() {\n\n    return [\n\n      // MIDI channel message events\n      \"noteoff\",\n      \"controlchange\",\n      \"noteon\",\n      \"keyaftertouch\",\n      \"programchange\",\n      \"channelaftertouch\",\n      \"pitchbend\",\n\n      // MIDI channel mode events\n      \"allnotesoff\",\n      \"allsoundoff\",\n      \"localcontrol\",\n      \"monomode\",\n      \"omnimode\",\n      \"resetallcontrollers\",\n\n      // RPN/NRPN events\n      \"nrpn\",\n      \"nrpn-dataentrycoarse\",\n      \"nrpn-dataentryfine\",\n      \"nrpn-dataincrement\",\n      \"nrpn-datadecrement\",\n      \"rpn\",\n      \"rpn-dataentrycoarse\",\n      \"rpn-dataentryfine\",\n      \"rpn-dataincrement\",\n      \"rpn-datadecrement\",\n\n      // Legacy (remove in v4)\n      \"nrpn-databuttonincrement\",\n      \"nrpn-databuttondecrement\",\n      \"rpn-databuttonincrement\",\n      \"rpn-databuttondecrement\",\n\n    ];\n  }\n\n}\n\n/**\n * The `Note` class represents a single musical note such as `\"D3\"`, `\"G#4\"`, `\"F-1\"`, `\"Gb7\"`, etc.\n *\n * `Note` objects can be played back on a single channel by calling\n * [`OutputChannel.playNote()`]{@link OutputChannel#playNote} or, on multiple channels of the same\n * output, by calling [`Output.playNote()`]{@link Output#playNote}.\n *\n * The note has [`attack`](#attack) and [`release`](#release) velocities set at `0.5` by default.\n * These can be changed by passing in the appropriate option. It is also possible to set a\n * system-wide default for attack and release velocities by using the\n * [`WebMidi.defaults`](WebMidi#defaults) property.\n *\n * If you prefer to work with raw MIDI values (`0` to `127`), you can use [`rawAttack`](#rawAttack) and\n * [`rawRelease`](#rawRelease) to both get and set the values.\n *\n * The note may have a [`duration`](#duration). If it does, playback will be automatically stopped\n * when the duration has elapsed by sending a `\"noteoff\"` event. By default, the duration is set to\n * `Infinity`. In this case, it will never stop playing unless explicitly stopped by calling a\n * method such as [`OutputChannel.stopNote()`]{@link OutputChannel#stopNote},\n * [`Output.stopNote()`]{@link Output#stopNote} or similar.\n *\n * @license Apache-2.0\n * @since 3.0.0\n */\nclass Note {\n\n  /**\n   * Creates a `Note` object.\n   *\n   * @param value {string|number} The value used to create the note. If an identifier string is used,\n   * it must start with the note letter, optionally followed by an accidental and followed by the\n   * octave number (`\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`, etc.). If a number is used, it must be an\n   * integer between 0 and 127. In this case, middle C is considered to be C4 (note number 60).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the note should be\n   * explicitly stopped.\n   *\n   * @param {number} [options.attack=0.5] The note's attack velocity as a float between 0 and 1. If\n   * you wish to use an integer between 0 and 127, use the `rawAttack` option instead. If both\n   * `attack` and `rawAttack` are specified, the latter has precedence.\n   *\n   * @param {number} [options.release=0.5] The note's release velocity as a float between 0 and 1. If\n   * you wish to use an integer between 0 and 127, use the `rawRelease` option instead. If both\n   * `release` and `rawRelease` are specified, the latter has precedence.\n   *\n   * @param {number} [options.rawAttack=64] The note's attack velocity as an integer between 0 and\n   * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n   * `attack` and `rawAttack` are specified, the latter has precedence.\n   *\n   * @param {number} [options.rawRelease=64] The note's release velocity as an integer between 0 and\n   * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n   * `release` and `rawRelease` are specified, the latter has precedence.\n   *\n   * @throws {Error} Invalid note identifier\n   * @throws {RangeError} Invalid name value\n   * @throws {RangeError} Invalid accidental value\n   * @throws {RangeError} Invalid octave value\n   * @throws {RangeError} Invalid duration value\n   * @throws {RangeError} Invalid attack value\n   * @throws {RangeError} Invalid release value\n   */\n  constructor(value, options = {}) {\n\n    // Assign property defaults\n    this.duration = wm.defaults.note.duration;\n    this.attack = wm.defaults.note.attack;\n    this.release = wm.defaults.note.release;\n\n    // Assign property values from options (validation occurs in setter)\n    if (options.duration != undefined) this.duration = options.duration;\n    if (options.attack != undefined) this.attack = options.attack;\n    if (options.rawAttack != undefined) this.attack = Utilities.from7bitToFloat(options.rawAttack);\n    if (options.release != undefined) this.release = options.release;\n    if (options.rawRelease != undefined) {\n      this.release = Utilities.from7bitToFloat(options.rawRelease);\n    }\n\n    // Assign note depending on the way it was specified (name or number)\n    if (Number.isInteger(value)) {\n      this.identifier = Utilities.toNoteIdentifier(value);\n    } else {\n      this.identifier = value;\n    }\n\n  }\n\n  /**\n   * The name, optional accidental and octave of the note, as a string.\n   * @type {string}\n   * @since 3.0.0\n   */\n  get identifier() {\n    return this._name + (this._accidental || \"\") + this._octave;\n  }\n  set identifier(value) {\n\n    const fragments = Utilities.getNoteDetails(value);\n\n    if (wm.validation) {\n      if (!value) throw new Error(\"Invalid note identifier\");\n    }\n\n    this._name = fragments.name;\n    this._accidental = fragments.accidental;\n    this._octave = fragments.octave;\n\n  }\n\n  /**\n   * The name (letter) of the note. If you need the full name with octave and accidental, you can\n   * use the [`identifier`]{@link Note#identifier} property instead.\n   * @type {string}\n   * @since 3.0.0\n   */\n  get name() {\n    return this._name;\n  }\n  set name(value) {\n\n    if (wm.validation) {\n      value = value.toUpperCase();\n      if (![\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"].includes(value)) {\n        throw new Error(\"Invalid name value\");\n      }\n    }\n\n    this._name = value;\n\n  }\n\n  /**\n   * The accidental (#, ##, b or bb) of the note.\n   * @type {string}\n   * @since 3.0.0\n   */\n  get accidental() {\n    return this._accidental;\n  }\n  set accidental(value) {\n\n    if (wm.validation) {\n      value = value.toLowerCase();\n      if (![\"#\", \"##\", \"b\", \"bb\"].includes(value)) throw new Error(\"Invalid accidental value\");\n    }\n\n    this._accidental = value;\n\n  }\n\n  /**\n   * The octave of the note.\n   * @type {number}\n   * @since 3.0.0\n   */\n  get octave() {\n    return this._octave;\n  }\n  set octave(value) {\n\n    if (wm.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new Error(\"Invalid octave value\");\n    }\n\n    this._octave = value;\n\n  }\n\n  /**\n   * The duration of the note as a positive decimal number representing the number of milliseconds\n   * that the note should play for.\n   *\n   * @type {number}\n   * @since 3.0.0\n   */\n  get duration() {\n    return this._duration;\n  }\n  set duration(value) {\n\n    if (wm.validation) {\n      value = parseFloat(value);\n      if (isNaN(value) || value === null || value < 0) {\n        throw new RangeError(\"Invalid duration value.\");\n      }\n    }\n\n    this._duration = value;\n\n  }\n\n  /**\n   * The attack velocity of the note as an integer between 0 and 1.\n   * @type {number}\n   * @since 3.0.0\n   */\n  get attack() {\n    return this._attack;\n  }\n  set attack(value) {\n\n    if (wm.validation) {\n      value = parseFloat(value);\n      if (isNaN(value) || !(value >= 0 && value <= 1)) {\n        throw new RangeError(\"Invalid attack value.\");\n      }\n    }\n\n    this._attack = value;\n\n  }\n\n  /**\n   * The release velocity of the note as an integer between 0 and 1.\n   * @type {number}\n   * @since 3.0.0\n   */\n  get release() {\n    return this._release;\n  }\n  set release(value) {\n\n    if (wm.validation) {\n      value = parseFloat(value);\n      if (isNaN(value) || !(value >= 0 && value <= 1)) {\n        throw new RangeError(\"Invalid release value.\");\n      }\n    }\n\n    this._release = value;\n\n  }\n\n  /**\n   * The attack velocity of the note as a positive integer between 0 and 127.\n   * @type {number}\n   * @since 3.0.0\n   */\n  get rawAttack() {\n    return Utilities.fromFloatTo7Bit(this._attack);\n  }\n  set rawAttack(value) {\n    this._attack = Utilities.from7bitToFloat(value);\n  }\n\n  /**\n   * The release velocity of the note as a positive integer between 0 and 127.\n   * @type {number}\n   * @since 3.0.0\n   */\n  get rawRelease() {\n    return Utilities.fromFloatTo7Bit(this._release);\n  }\n  set rawRelease(value) {\n    this._release = Utilities.from7bitToFloat(value);\n  }\n\n  /**\n   * The MIDI number of the note (`0` - `127`). This number is derived from the note identifier\n   * using C4 as a reference for middle C.\n   *\n   * @type {number}\n   * @readonly\n   * @since 3.0.0\n   */\n  get number() {\n    return Utilities.toNoteNumber(this.identifier);\n  }\n\n  /**\n   * Returns a MIDI note number offset by octave and/or semitone. If the calculated value is less\n   * than 0, 0 will be returned. If the calculated value is more than 127, 127 will be returned. If\n   * an invalid value is supplied, 0 will be used.\n   *\n   * @param [octaveOffset] {number} An integer to offset the note number by octave.\n   * @param [semitoneOffset] {number} An integer to offset the note number by semitone.\n   * @returns {number} An integer between 0 and 127\n   */\n  getOffsetNumber(octaveOffset = 0, semitoneOffset = 0) {\n\n    if (wm.validation) {\n      octaveOffset = parseInt(octaveOffset) || 0;\n      semitoneOffset = parseInt(semitoneOffset) || 0;\n    }\n\n    return Math.min(Math.max(this.number + (octaveOffset * 12) + semitoneOffset, 0), 127);\n\n  }\n\n}\n\n/**\n * The `Utilities` class contains general-purpose utility methods. All methods are static and\n * should be called using the class name. For example: `Utilities.getNoteDetails(\"C4\")`.\n *\n * @license Apache-2.0\n * @since 3.0.0\n */\nclass Utilities {\n\n  /**\n   * Returns a MIDI note number matching the identifier passed in the form of a string. The\n   * identifier must include the octave number. The identifier also optionally include a sharp (#),\n   * a double sharp (##), a flat (b) or a double flat (bb) symbol. For example, these are all valid\n   * identifiers: C5, G4, D#-1, F0, Gb7, Eb-1, Abb4, B##6, etc.\n   *\n   * When converting note identifiers to numbers, C4 is considered to be middle C (MIDI note number\n   * 60) as per the scientific pitch notation standard.\n   *\n   * The resulting note number can be offset by using the `octaveOffset` parameter.\n   *\n   * @param identifier {string} The identifier in the form of a letter, followed by an optional \"#\",\n   * \"##\", \"b\" or \"bb\" followed by the octave number. For exemple: C5, G4, D#-1, F0, Gb7, Eb-1,\n   * Abb4, B##6, etc.\n   *\n   * @param {number} [octaveOffset=0] A integer to offset the octave by.\n   *\n   * @returns {number} The MIDI note number (an integer between 0 and 127).\n   *\n   * @throws RangeError Invalid 'octaveOffset' value\n   *\n   * @throws TypeError Invalid note identifier\n   *\n   * @license Apache-2.0\n   * @since 3.0.0\n   * @static\n   */\n  static toNoteNumber(identifier, octaveOffset = 0) {\n\n    // Validation\n    octaveOffset = octaveOffset == undefined ? 0 : parseInt(octaveOffset);\n    if (isNaN(octaveOffset)) throw new RangeError(\"Invalid 'octaveOffset' value\");\n    if (typeof identifier !== \"string\") identifier = \"\";\n\n    const fragments = this.getNoteDetails(identifier);\n    if (!fragments) throw new TypeError(\"Invalid note identifier\");\n\n    const notes = { C: 0, D: 2, E: 4, F: 5, G: 7, A: 9, B: 11 };\n    let result = (fragments.octave + 1 + octaveOffset) * 12;\n    result += notes[fragments.name];\n\n    if (fragments.accidental) {\n      if (fragments.accidental.startsWith(\"b\")) {\n        result -= fragments.accidental.length;\n      } else {\n        result += fragments.accidental.length;\n      }\n    }\n\n    if (result < 0 || result > 127) throw new RangeError(\"Invalid octaveOffset value\");\n\n    return result;\n\n  }\n\n  /**\n   * Given a proper note identifier (`C#4`, `Gb-1`, etc.) or a valid MIDI note number (0-127), this\n   * method returns an object containing broken down details about the specified note (uppercase\n   * letter, accidental and octave).\n   *\n   * When a number is specified, the translation to note is done using a value of 60 for middle C\n   * (C4 = middle C).\n   *\n   * @param value {string|number} A note identifier A  atring (\"C#4\", \"Gb-1\", etc.) or a MIDI note\n   * number (0-127).\n   *\n   * @returns {{accidental: string, identifier: string, name: string, octave: number }}\n   *\n   * @throws TypeError Invalid note identifier\n   *\n   * @since 3.0.0\n   * @static\n   */\n  static getNoteDetails(value) {\n\n    if (Number.isInteger(value)) value = this.toNoteIdentifier(value);\n\n    const matches = value.match(/^([CDEFGAB])(#{0,2}|b{0,2})(-?\\d+)$/i);\n    if (!matches) throw new TypeError(\"Invalid note identifier\");\n\n    const name = matches[1].toUpperCase();\n    const octave = parseInt(matches[3]);\n    let accidental = matches[2].toLowerCase();\n    accidental = accidental === \"\" ? undefined : accidental;\n\n    const fragments = {\n      accidental: accidental,\n      identifier: name + (accidental || \"\") + octave,\n      name: name,\n      octave: octave\n    };\n\n    return fragments;\n\n  }\n\n  /**\n   * Returns a sanitized array of valid MIDI channel numbers (1-16). The parameter should be a\n   * single integer or an array of integers.\n   *\n   * For backwards-compatibility, passing `undefined` as a parameter to this method results in all\n   * channels being returned (1-16). Otherwise, parameters that cannot successfully be parsed to\n   * integers between 1 and 16 are silently ignored.\n   *\n   * @param [channel] {number|number[]} An integer or an array of integers to parse as channel\n   * numbers.\n   *\n   * @returns {number[]} An array of 0 or more valid MIDI channel numbers.\n   *\n   * @since 3.0.0\n   * @static\n   */\n  static sanitizeChannels(channel) {\n\n    let channels;\n\n    if (wm.validation) {\n\n      if (channel === \"all\") { // backwards-compatibility\n        channels = [\"all\"];\n      } else if (channel === \"none\") { // backwards-compatibility\n        return [];\n      }\n\n    }\n\n    if (!Array.isArray(channel)) {\n      channels = [channel];\n    } else {\n      channels = channel;\n    }\n\n    // In order to preserve backwards-compatibility, we let this assignment as it is.\n    if (channels.indexOf(\"all\") > -1) {\n      channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n    }\n\n    return channels\n      .map(function(ch) {\n        return parseInt(ch);\n      })\n      .filter(function(ch) {\n        return (ch >= 1 && ch <= 16);\n      });\n\n  }\n\n  /**\n   * Returns a valid timestamp, relative to the navigation start of the document, derived from the\n   * `time` parameter. If the parameter is a string starting with the \"+\" sign and followed by a\n   * number, the resulting timestamp will be the sum of the current timestamp plus that number. If\n   * the parameter is a positive number, it will be returned as is. Otherwise, false will be\n   * returned.\n   *\n   * @param [time] {number|string} The time string (e.g. `\"+2000\"`) or number to parse\n   * @return {number|false} A positive number or `false` (if the time cannot be converted)\n   *\n   * @since 3.0.0\n   * @static\n   */\n  static toTimestamp(time) {\n\n    let value = false;\n\n    const parsed = parseFloat(time);\n    if (isNaN(parsed)) return false;\n\n    if (typeof time === \"string\" && time.substring(0, 1) === \"+\") {\n      if (parsed >= 0) value = wm.time + parsed;\n    } else {\n      if (parsed >= 0) value = parsed;\n    }\n\n    return value;\n\n  }\n\n  /**\n   * Returns a valid MIDI note number (0-127) given the specified input. The input usually is a\n   * string containing a note identifier (`\"C3\"`, `\"F#4\"`, `\"D-2\"`, `\"G8\"`, etc.). If an integer\n   * between 0 and 127 is passed, it will simply be returned as is (for convenience). Other strings\n   * will be parsed for integer value, if possible.\n   *\n   * If the input is an identifier, the resulting note number is offset by the `octaveOffset`\n   * parameter. For example, if you pass in \"C4\" (note number 60) and the `octaveOffset` value is\n   * -2, the resulting MIDI note number will be 36.\n   *\n   * @param input {string|number} A string or number to extract the MIDI note number from.\n   * @param octaveOffset {number} An integer to offset the octave by\n   *\n   * @returns {number|false} A valid MIDI note number (0-127) or `false` if the input could not\n   * successfully be parsed to a note number.\n   *\n   * @since 3.0.0\n   * @static\n   */\n  static guessNoteNumber(input, octaveOffset) {\n\n    // Validate and, if necessary, assign default\n    octaveOffset = parseInt(octaveOffset) || 0;\n\n    let output = false;\n\n    // Check input type\n    if (Number.isInteger(input) && input >= 0 && input <= 127) {        // uint\n      output = parseInt(input);\n    } else if (parseInt(input) >= 0 && parseInt(input) <= 127) {        // float or uint as string\n      output = parseInt(input);\n    } else if (typeof input === \"string\" || input instanceof String) {  // string\n      try {\n        output = this.toNoteNumber(input.trim(), octaveOffset);\n      } catch (e) {\n        return false;\n      }\n    }\n\n    return output;\n\n  }\n\n  /**\n   * Returns an identifier string representing a note name (with optional accidental) followed by an\n   * octave number. The octave can be offset by using the `octaveOffset` parameter.\n   *\n   * @param {number} number The MIDI note number to convert to a note identifier\n   * @param {number} octaveOffset An offset to apply to the resulting octave\n   *\n   * @returns {string}\n   *\n   * @throws RangeError Invalid note number\n   * @throws RangeError Invalid octaveOffset value\n   *\n   * @since 3.0.0\n   * @static\n   */\n  static toNoteIdentifier(number, octaveOffset) {\n\n    number = parseInt(number);\n    if (isNaN(number) || number < 0 || number > 127) throw new RangeError(\"Invalid note number\");\n\n    octaveOffset = octaveOffset == undefined ? 0 : parseInt(octaveOffset);\n    if (isNaN(octaveOffset)) throw new RangeError(\"Invalid octaveOffset value\");\n\n    const notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n    const octave = Math.floor(number / 12 - 1) + octaveOffset;\n    return notes[number % 12] + octave.toString();\n\n  }\n\n  /**\n   * Converts the `input` parameter to a valid [`Note`]{@link Note} object. The input usually is an\n   * unsigned integer (0-127) or a note identifier (`\"C4\"`, `\"G#5\"`, etc.). If the input is a\n   * [`Note`]{@link Note} object, it will be returned as is.\n   *\n   * If the input is a note number or identifier, it is possible to specify options by providing the\n   * `options` parameter.\n   *\n   * @param [input] {number|string|Note}\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the note should\n   * be explicitly stopped.\n   *\n   * @param {number} [options.attack=0.5] The note's attack velocity as a float between 0 and 1. If\n   * you wish to use an integer between 0 and 127, use the `rawAttack` option instead. If both\n   * `attack` and `rawAttack` are specified, the latter has precedence.\n   *\n   * @param {number} [options.release=0.5] The note's release velocity as a float between 0 and 1. If\n   * you wish to use an integer between 0 and 127, use the `rawRelease` option instead. If both\n   * `release` and `rawRelease` are specified, the latter has precedence.\n   *\n   * @param {number} [options.rawAttack=64] The note's attack velocity as an integer between 0 and\n   * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n   * `attack` and `rawAttack` are specified, the latter has precedence.\n   *\n   * @param {number} [options.rawRelease=64] The note's release velocity as an integer between 0 and\n   * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n   * `release` and `rawRelease` are specified, the latter has precedence.\n   *\n   * @param {number} [options.octaveOffset=0] An integer to offset the octave by. **This is only\n   * used when the input value is a note identifier.**\n   *\n   * @returns {Note}\n   *\n   * @throws TypeError The input could not be parsed to a note\n   *\n   * @since version 3.0.0\n   * @static\n   */\n  static buildNote(input, options= {}) {\n\n    options.octaveOffset = parseInt(options.octaveOffset) || 0;\n\n    // If it's already a Note, we're done\n    if (input instanceof Note) return input;\n\n    let number = this.guessNoteNumber(input, options.octaveOffset);\n\n    if (number === false) { // We use a comparison b/c the note can be 0 (which equates to false)\n      throw new TypeError(`The input could not be parsed as a note (${input})`);\n    }\n\n    // If we got here, we have a proper note number. Before creating the new note, we strip out\n    // 'octaveOffset' because it has already been factored in when calling guessNoteNumber().\n    options.octaveOffset = undefined;\n    return new Note(number, options);\n\n  }\n\n  /**\n   * Converts an input value, which can be an unsigned integer (0-127), a note identifier, a\n   * [`Note`]{@link Note}  object or an array of the previous types, to an array of\n   * [`Note`]{@link Note}  objects.\n   *\n   * [`Note`]{@link Note}  objects are returned as is. For note numbers and identifiers, a\n   * [`Note`]{@link Note} object is created with the options specified. An error will be thrown when\n   * encountering invalid input.\n   *\n   * Note: if both the `attack` and `rawAttack` options are specified, the later has priority. The\n   * same goes for `release` and `rawRelease`.\n   *\n   * @param [notes] {number|string|Note|number[]|string[]|Note[]}\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the note should\n   * be explicitly stopped.\n   *\n   * @param {number} [options.attack=0.5] The note's attack velocity as a float between 0 and 1. If\n   * you wish to use an integer between 0 and 127, use the `rawAttack` option instead. If both\n   * `attack` and `rawAttack` are specified, the latter has precedence.\n   *\n   * @param {number} [options.release=0.5] The note's release velocity as a float between 0 and 1. If\n   * you wish to use an integer between 0 and 127, use the `rawRelease` option instead. If both\n   * `release` and `rawRelease` are specified, the latter has precedence.\n   *\n   * @param {number} [options.rawAttack=64] The note's attack velocity as an integer between 0 and\n   * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n   * `attack` and `rawAttack` are specified, the latter has precedence.\n   *\n   * @param {number} [options.rawRelease=64] The note's release velocity as an integer between 0 and\n   * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n   * `release` and `rawRelease` are specified, the latter has precedence.\n   *\n   * @param {number} [options.octaveOffset=0] An integer to offset the octave by. **This is only\n   * used when the input value is a note identifier.**\n   *\n   * @returns {Note[]}\n   *\n   * @throws TypeError An element could not be parsed as a note.\n   *\n   * @since 3.0.0\n   * @static\n   */\n  static buildNoteArray(notes, options = {}) {\n\n    let result = [];\n    if (!Array.isArray(notes)) notes = [notes];\n\n    notes.forEach(note => {\n      result.push(this.buildNote(note, options));\n    });\n\n    return result;\n\n  }\n\n  /**\n   * Returns a number between 0 and 1 representing the ratio of the input value divided by 127 (7\n   * bit). The returned value is restricted between 0 and 1 even if the input is greater than 127 or\n   * smaller than 0.\n   *\n   * Passing `Infinity` will return `1` and passing `-Infinity` will return `0`. Otherwise, when the\n   * input value cannot be converted to an integer, the method returns 0.\n   *\n   * @param value {number} A positive integer between 0 and 127 (inclusive)\n   * @returns {number} A number between 0 and 1 (inclusive)\n   * @static\n   */\n  static from7bitToFloat(value) {\n    if (value === Infinity) value = 127;\n    value = parseInt(value) || 0;\n    return Math.min(Math.max(value / 127, 0), 1);\n  }\n\n  /**\n   * Returns an integer between 0 and 127 which is the result of multiplying the input value by\n   * 127. The input value should be a number between 0 and 1 (inclusively). The returned value is\n   * restricted between 0 and 127 even if the input is greater than 1 or smaller than 0.\n   *\n   * Passing `Infinity` will return `127` and passing `-Infinity` will return `0`. Otherwise, when\n   * the input value cannot be converted to a number, the method returns 0.\n   *\n   * @param value {number} A positive float between 0 and 1 (inclusive)\n   * @returns {number} A number between 0 and 127 (inclusive)\n   * @static\n   */\n  static fromFloatTo7Bit(value) {\n    if (value === Infinity) value = 1;\n    value = parseFloat(value) || 0;\n    return Math.min(Math.max(Math.round(value * 127), 0), 127);\n  }\n\n  /**\n   * Combines and converts MSB and LSB values (0-127) to a float between 0 and 1. The returned value\n   * is within between 0 and 1 even if the result is greater than 1 or smaller than 0.\n   *\n   * @param msb {number} The most significant byte as a integer between 0 and 127.\n   * @param [lsb=0] {number} The least significant byte as a integer between 0 and 127.\n   * @returns {number} A float between 0 and 1.\n   */\n  static fromMsbLsbToFloat(msb, lsb = 0) {\n\n    if (wm.validation) {\n      msb = Math.min(Math.max(parseInt(msb) || 0, 0), 127);\n      lsb = Math.min(Math.max(parseInt(lsb) || 0, 0), 127);\n    }\n\n    const value = ((msb << 7) + lsb) / 16383;\n    return Math.min(Math.max(value, 0), 1);\n\n  }\n\n  /**\n   * Extracts 7bit MSB and LSB values from the supplied float.\n   *\n   * @param value {number} A float between 0 and 1\n   * @returns {{lsb: number, msb: number}}\n   */\n  static fromFloatToMsbLsb(value) {\n\n    if (wm.validation) {\n      value = Math.min(Math.max(parseFloat(value) || 0, 0), 1);\n    }\n\n    const multiplied = Math.round(value * 16383);\n\n    return {\n      msb: multiplied >> 7,\n      lsb: multiplied & 0x7F\n    };\n\n  }\n\n  /**\n   * Returns the supplied MIDI note number offset by the requested octave and semitone values. If\n   * the calculated value is less than 0, 0 will be returned. If the calculated value is more than\n   * 127, 127 will be returned. If an invalid offset value is supplied, 0 will be used.\n   *\n   * @param number {number} The MIDI note to offset as an integer between 0 and 127.\n   * @param octaveOffset {number} An integer to offset the note by (in octave)\n   * @param octaveOffset {number} An integer to offset the note by (in semitones)\n   * @returns {number} An integer between 0 and 127\n   *\n   * @throws {Error} Invalid note number\n   * @static\n   */\n  static offsetNumber(number, octaveOffset = 0, semitoneOffset = 0) {\n\n    if (wm.validation) {\n      number = parseInt(number);\n      if (isNaN(number)) throw new Error(\"Invalid note number\");\n      octaveOffset = parseInt(octaveOffset) || 0;\n      semitoneOffset = parseInt(semitoneOffset) || 0;\n    }\n\n    return Math.min(Math.max(number + (octaveOffset * 12) + semitoneOffset, 0), 127);\n\n  }\n\n  /**\n   * Returns the name of the first property of the supplied object whose value is equal to the one\n   * supplied. If nothing is found, `undefined` is returned.\n   *\n   * @param object {object} The object to look for the property in.\n   * @param value {*} Any value that can be expected to be found in the object's properties.\n   * @returns {string|undefined} The name of the matching property or `undefined` if nothing is\n   * found.\n   * @static\n   */\n  static getPropertyByValue(object, value) {\n    return Object.keys(object).find(key => object[key] === value);\n  }\n\n  /**\n   * Returns the name of a control change message matching the specified number (0-127). Some valid\n   * control change numbers do not have a specific name or purpose assigned in the MIDI\n   * [spec](https://midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2).\n   * In these cases, the method returns `controllerXXX` (where XXX is the number).\n   *\n   * @param {number} number An integer (0-127) representing the control change message\n   * @returns {string|undefined} The matching control change name or `undefined` if no match was\n   * found.\n   *\n   * @static\n   */\n  static getCcNameByNumber(number) {\n\n    if (wm.validation) {\n      number = parseInt(number);\n      if (!(number >= 0 && number <= 127)) return undefined;\n    }\n\n    return Enumerations.CONTROL_CHANGE_MESSAGES[number].name;\n\n  }\n\n  /**\n   * Returns the number of a control change message matching the specified name.\n   *\n   * @param {string} name A string representing the control change message\n   * @returns {string|undefined} The matching control change number or `undefined` if no match was\n   * found.\n   *\n   * @since 3.1\n   * @static\n   */\n  static getCcNumberByName(name) {\n    let message = Enumerations.CONTROL_CHANGE_MESSAGES.find(element => element.name === name);\n    if (message) {\n      return message.number;\n    } else {\n      // Legacy (remove in v4)\n      return Enumerations.MIDI_CONTROL_CHANGE_MESSAGES[name];\n    }\n  }\n\n  /**\n   * Returns the channel mode name matching the specified number. If no match is found, the function\n   * returns `false`.\n   *\n   * @param {number} number An integer representing the channel mode message (120-127)\n   * @returns {string|false} The name of the matching channel mode or `false` if no match could be\n   * found.\n   *\n   * @since 2.0.0\n   */\n  static getChannelModeByNumber(number) {\n\n    if ( !(number >= 120 && number <= 127) ) return false;\n\n    for (let cm in Enumerations.CHANNEL_MODE_MESSAGES) {\n\n      if (\n        Enumerations.CHANNEL_MODE_MESSAGES.hasOwnProperty(cm) &&\n        number === Enumerations.CHANNEL_MODE_MESSAGES[cm]\n      ) {\n        return cm;\n      }\n\n    }\n\n    return false;\n\n  }\n\n  /**\n   * Indicates whether the execution environment is Node.js (`true`) or not (`false`)\n   * @type {boolean}\n   */\n  static get isNode() {\n    return typeof process !== \"undefined\" &&\n      process.versions != null &&\n      process.versions.node != null;\n  }\n\n  /**\n   * Indicates whether the execution environment is a browser (`true`) or not (`false`)\n   * @type {boolean}\n   */\n  static get isBrowser() {\n    return typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\n  }\n\n}\n\n/**\n * The `OutputChannel` class represents a single output MIDI channel. `OutputChannel` objects are\n * provided by an [`Output`](Output) port which, itself, is made available by a device. The\n * `OutputChannel` object is derived from the host's MIDI subsystem and should not be instantiated\n * directly.\n *\n * All 16 `OutputChannel` objects can be found inside the parent output's\n * [`channels`]{@link Output#channels} property.\n *\n * @param {Output} output The [`Output`](Output) this channel belongs to.\n * @param {number} number The MIDI channel number (`1` - `16`).\n *\n * @extends EventEmitter\n * @license Apache-2.0\n * @since 3.0.0\n */\nclass OutputChannel extends EventEmitter {\n\n  /**\n   * Creates an `OutputChannel` object.\n   *\n   * @param {Output} output The [`Output`](Output) this channel belongs to.\n   * @param {number} number The MIDI channel number (`1` - `16`).\n   */\n  constructor(output, number) {\n\n    super();\n\n    /**\n     * @type {Output}\n     * @private\n     */\n    this._output = output;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._number = number;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._octaveOffset = 0;\n\n  }\n\n  /**\n   * Unlinks the MIDI subsystem, removes all listeners attached to the channel and nulls the channel\n   * number. This method is mostly for internal use. It has not been prefixed with an underscore\n   * since it is called by other objects such as the `Output` object.\n   *\n   * @private\n   */\n  destroy() {\n    this._output = null;\n    this._number = null;\n    this._octaveOffset = 0;\n    this.removeListener();\n  }\n\n  /**\n   * Sends a MIDI message on the MIDI output port. If no time is specified, the message will be\n   * sent immediately. The message should be an array of 8-bit unsigned integers (`0` - `225`),\n   * a\n   * [`Uint8Array`]{@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array}\n   * object or a [`Message`](Message) object.\n   *\n   * It is usually not necessary to use this method directly as you can use one of the simpler\n   * helper methods such as [`playNote()`](#playNote), [`stopNote()`](#stopNote),\n   * [`sendControlChange()`](#sendControlChange), etc.\n   *\n   * Details on the format of MIDI messages are available in the summary of\n   * [MIDI messages]{@link https://www.midi.org/specifications-old/item/table-1-summary-of-midi-message}\n   * from the MIDI Manufacturers Association.\n   *\n   * @param message {number[]|Uint8Array|Message} A `Message` object, an array of 8-bit unsigned\n   * integers or a `Uint8Array` object (not available in Node.js) containing the message bytes.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The first byte (status) must be an integer between 128 and 255.\n   *\n   * @throws {RangeError} Data bytes must be integers between 0 and 255.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  send(message, options = {time: 0}) {\n    this.output.send(message, options);\n    return this;\n  }\n\n  /**\n   * Sends a MIDI **key aftertouch** message at the scheduled time. This is a key-specific\n   * aftertouch. For a channel-wide aftertouch message, use\n   * [`sendChannelAftertouch()`]{@link #sendChannelAftertouch}.\n   *\n   * @param target {number|Note|string|number[]|Note[]|string[]} The note(s) for which you are sending\n   * an aftertouch value. The notes can be specified by using a MIDI note number (`0` - `127`), a\n   * [`Note`](Note) object, a note identifier (e.g. `C3`, `G#4`, `F-1`, `Db7`) or an array of the\n   * previous types. When using a note identifier, octave range must be between `-1` and `9`. The\n   * lowest note is `C-1` (MIDI note number `0`) and the highest note is `G9` (MIDI note number\n   * `127`).\n   *\n   * When using a note identifier, the octave value will be offset by the local\n   * [`octaveOffset`](#octaveOffset) and by\n   * [`Output.octaveOffset`](Output#octaveOffset) and [`WebMidi.octaveOffset`](WebMidi#octaveOffset)\n   * (if those values are not `0`). When using a key number, `octaveOffset` values are ignored.\n   *\n   * @param [pressure=0.5] {number} The pressure level (between `0` and `1`). An invalid pressure\n   * value will silently trigger the default behaviour. If the `rawValue` option is set to `true`,\n   * the pressure is defined by using an integer between `0` and `127`.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered a float between `0` and `1.0` (default) or a raw integer between `0` and `127`.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @return {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   *\n   * @throws RangeError Invalid key aftertouch value.\n   */\n  sendKeyAftertouch(target, pressure, options = {}) {\n\n    if (wm.validation) {\n\n      // Legacy support\n      if (options.useRawValue) options.rawValue = options.useRawValue;\n\n      if (isNaN(parseFloat(pressure))) {\n        throw new RangeError(\"Invalid key aftertouch value.\");\n      }\n      if (options.rawValue) {\n        if (!(pressure >= 0 && pressure <= 127 && Number.isInteger(pressure))) {\n          throw new RangeError(\"Key aftertouch raw value must be an integer between 0 and 127.\");\n        }\n      } else {\n        if (!(pressure >= 0 && pressure <= 1)) {\n          throw new RangeError(\"Key aftertouch value must be a float between 0 and 1.\");\n        }\n      }\n\n    }\n\n    // Normalize pressure to integer\n    if (!options.rawValue) pressure = Utilities.fromFloatTo7Bit(pressure);\n\n    // Plot total offset\n    const offset = wm.octaveOffset + this.output.octaveOffset + this.octaveOffset;\n\n    // Make sure we are dealing with an array\n    if (!Array.isArray(target)) target = [target];\n\n    Utilities.buildNoteArray(target).forEach(n => {\n      this.send(\n        [\n          (Enumerations.CHANNEL_MESSAGES.keyaftertouch << 4) + (this.number - 1),\n          n.getOffsetNumber(offset),\n          pressure\n        ],\n        {time: Utilities.toTimestamp(options.time)}\n      );\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **control change** message to the channel at the scheduled time. The control\n   * change message to send can be specified numerically (`0` to `127`) or by using one of the\n   * following common names:\n   *\n   * | Number | Name                          |\n   * |--------|-------------------------------|\n   * | 0      |`bankselectcoarse`             |\n   * | 1      |`modulationwheelcoarse`        |\n   * | 2      |`breathcontrollercoarse`       |\n   * | 4      |`footcontrollercoarse`         |\n   * | 5      |`portamentotimecoarse`         |\n   * | 6      |`dataentrycoarse`              |\n   * | 7      |`volumecoarse`                 |\n   * | 8      |`balancecoarse`                |\n   * | 10     |`pancoarse`                    |\n   * | 11     |`expressioncoarse`             |\n   * | 12     |`effectcontrol1coarse`         |\n   * | 13     |`effectcontrol2coarse`         |\n   * | 18     |`generalpurposeslider3`        |\n   * | 19     |`generalpurposeslider4`        |\n   * | 32     |`bankselectfine`               |\n   * | 33     |`modulationwheelfine`          |\n   * | 34     |`breathcontrollerfine`         |\n   * | 36     |`footcontrollerfine`           |\n   * | 37     |`portamentotimefine`           |\n   * | 38     |`dataentryfine`                |\n   * | 39     |`volumefine`                   |\n   * | 40     |`balancefine`                  |\n   * | 42     |`panfine`                      |\n   * | 43     |`expressionfine`               |\n   * | 44     |`effectcontrol1fine`           |\n   * | 45     |`effectcontrol2fine`           |\n   * | 64     |`holdpedal`                    |\n   * | 65     |`portamento`                   |\n   * | 66     |`sustenutopedal`               |\n   * | 67     |`softpedal`                    |\n   * | 68     |`legatopedal`                  |\n   * | 69     |`hold2pedal`                   |\n   * | 70     |`soundvariation`               |\n   * | 71     |`resonance`                    |\n   * | 72     |`soundreleasetime`             |\n   * | 73     |`soundattacktime`              |\n   * | 74     |`brightness`                   |\n   * | 75     |`soundcontrol6`                |\n   * | 76     |`soundcontrol7`                |\n   * | 77     |`soundcontrol8`                |\n   * | 78     |`soundcontrol9`                |\n   * | 79     |`soundcontrol10`               |\n   * | 80     |`generalpurposebutton1`        |\n   * | 81     |`generalpurposebutton2`        |\n   * | 82     |`generalpurposebutton3`        |\n   * | 83     |`generalpurposebutton4`        |\n   * | 91     |`reverblevel`                  |\n   * | 92     |`tremololevel`                 |\n   * | 93     |`choruslevel`                  |\n   * | 94     |`celestelevel`                 |\n   * | 95     |`phaserlevel`                  |\n   * | 96     |`dataincrement`                |\n   * | 97     |`datadecrement`                |\n   * | 98     |`nonregisteredparametercoarse` |\n   * | 99     |`nonregisteredparameterfine`   |\n   * | 100    |`registeredparametercoarse`    |\n   * | 101    |`registeredparameterfine`      |\n   * | 120    |`allsoundoff`                  |\n   * | 121    |`resetallcontrollers`          |\n   * | 122    |`localcontrol`                 |\n   * | 123    |`allnotesoff`                  |\n   * | 124    |`omnimodeoff`                  |\n   * | 125    |`omnimodeon`                   |\n   * | 126    |`monomodeon`                   |\n   * | 127    |`polymodeon`                   |\n   *\n   * As you can see above, not all control change message have a matching name. This does not mean\n   * you cannot use the others. It simply means you will need to use their number\n   * (`0` to `127`) instead of their name. While you can still use them, numbers `120` to `127` are\n   * usually reserved for *channel mode* messages. See\n   * [`sendChannelMode()`]{@link OutputChannel#sendChannelMode} method for more info.\n   *\n   * To view a detailed list of all available **control change** messages, please consult \"Table 3 -\n   * Control Change Messages\" from the [MIDI Messages](\n   * https://www.midi.org/specifications/item/table-3-control-change-messages-data-bytes-2)\n   * specification.\n   *\n   * **Note**: messages #0-31 (MSB) are paired with messages #32-63 (LSB). For example, message #1\n   * (`modulationwheelcoarse`) can be accompanied by a second control change message for\n   * `modulationwheelfine` to achieve a greater level of precision. if you want to specify both MSB\n   * and LSB for messages between `0` and `31`, you can do so by passing a 2-value array as the\n   * second parameter.\n   *\n   * @param {number|string} controller The MIDI controller name or number (`0` - `127`).\n   *\n   * @param {number|number[]} value The value to send (0-127). You can also use a two-position array\n   * for controllers 0 to 31. In this scenario, the first value will be sent as usual and the second\n   * value will be sent to the matching LSB controller (which is obtained by adding 32 to the first\n   * controller)\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} Controller numbers must be between 0 and 127.\n   * @throws {RangeError} Invalid controller name.\n   * @throws {TypeError} The value array must have a length of 2.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   *\n   * @license Apache-2.0\n   * @since 3.0.0\n   */\n  sendControlChange(controller, value, options = {}) {\n\n    if (typeof controller === \"string\") {\n      controller = Utilities.getCcNumberByName(controller);\n    }\n\n    if (!Array.isArray(value)) value = [value];\n\n    if (wm.validation) {\n\n      if (controller === undefined) {\n        throw new TypeError(\n          \"Control change must be identified with a valid name or an integer between 0 and 127.\"\n        );\n      }\n\n      if (!Number.isInteger(controller) || !(controller >= 0 && controller <= 127)) {\n        throw new TypeError(\"Control change number must be an integer between 0 and 127.\");\n      }\n\n      value = value.map(item => {\n        const output = Math.min(Math.max(parseInt(item), 0), 127);\n        if (isNaN(output)) throw new TypeError(\"Values must be integers between 0 and 127\");\n        return output;\n      });\n\n      if (value.length === 2 && controller >= 32) {\n        throw new TypeError(\"To use a value array, the controller must be between 0 and 31\");\n      }\n\n    }\n\n    value.forEach((item, index) => {\n\n      this.send(\n        [\n          (Enumerations.CHANNEL_MESSAGES.controlchange << 4) + (this.number - 1),\n          controller + (index * 32),\n          value[index]\n        ],\n        {time: Utilities.toTimestamp(options.time)}\n      );\n\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Selects a MIDI non-registered parameter so it is affected by upcoming data entry, data\n   * increment and data decrement messages.\n   *\n   * @param parameter {number[]} A two-position array specifying the two control bytes that identify\n   * the registered parameter. The NRPN MSB (99 or 0x63) is a position 0. The NRPN LSB (98 or 0x62)\n   * is at position 1.\n   *\n   * @private\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  _selectNonRegisteredParameter(parameter, options = {}) {\n\n    // parameter[0] = Math.floor(parameter[0]);\n    // if (!(parameter[0] >= 0 && parameter[0] <= 127)) {\n    //   throw new RangeError(\"The control63 value must be between 0 and 127.\");\n    // }\n    //\n    // parameter[1] = Math.floor(parameter[1]);\n    // if (!(parameter[1] >= 0 && parameter[1] <= 127)) {\n    //   throw new RangeError(\"The control62 value must be between 0 and 127.\");\n    // }\n\n    this.sendControlChange(0x63, parameter[0], options);\n    this.sendControlChange(0x62, parameter[1], options);\n\n    return this;\n\n  }\n\n  /**\n   * Deselects the currently active MIDI registered parameter so it is no longer affected by data\n   * entry, data increment and data decrement messages.\n   *\n   * Current best practice recommends doing that after each call to\n   * [_setCurrentParameter()]{@link #_setCurrentParameter}.\n   *\n   * @private\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  _deselectRegisteredParameter(options = {}) {\n    this.sendControlChange(0x65, 0x7F, options);\n    this.sendControlChange(0x64, 0x7F, options);\n    return this;\n  }\n\n  /**\n   * Deselects the currently active MIDI non-registered parameter so it is no longer affected by\n   * data entry, data increment and data decrement messages.\n   *\n   * @private\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  _deselectNonRegisteredParameter(options = {}) {\n    this.sendControlChange(0x65, 0x7F, options);\n    this.sendControlChange(0x64, 0x7F, options);\n    return this;\n  }\n\n  /**\n   * Selects a MIDI registered parameter so it is affected by upcoming data entry, data increment\n   * and data decrement messages.\n   *\n   * @private\n   *\n   * @param parameter {number[]} A two-position array of integers specifying the two control bytes\n   * (0x65, 0x64) that identify the registered parameter. The integers must be between 0 and 127.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  _selectRegisteredParameter(parameter, options = {}) {\n    this.sendControlChange(0x65, parameter[0], options);\n    this.sendControlChange(0x64, parameter[1], options);\n    return this;\n  }\n\n  /**\n   * Sets the value of the currently selected MIDI registered parameter.\n   *\n   * @private\n   *\n   * @param data {number|number[]}\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  _setCurrentParameter(data, options = {}) {\n\n    data = [].concat(data);\n\n    // MSB\n    // data[0] = parseInt(data[0]);\n    // if (!isNaN(data[0]) && data[0] >= 0 && data[0] <= 127) {\n    this.sendControlChange(0x06, data[0], options);\n    // } else {\n    //   throw new RangeError(\"The msb value must be between 0 and 127.\");\n    // }\n\n    if (data.length < 2) return this;\n\n    // LSB\n    // data[1] = parseInt(data[1]);\n\n    // if (!isNaN(data[1]) && data[1] >= 0 && data[1] <= 127) {\n    this.sendControlChange(0x26, data[1], options);\n    // } else {\n    //   throw new RangeError(\"The lsb value must be between 0 and 127.\");\n    // }\n\n    return this;\n\n  }\n\n  /**\n   * Decrements the specified MIDI registered parameter by 1. Here is the full list of parameter\n   * names that can be used with this function:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {String|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n   * parameter.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws TypeError The specified registered parameter is invalid.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendRpnDecrement(parameter, options = {}) {\n\n    if (!Array.isArray(parameter)) parameter = Enumerations.REGISTERED_PARAMETERS[parameter];\n\n    if (wm.validation) {\n\n      if (parameter === undefined) {\n        throw new TypeError(\"The specified registered parameter is invalid.\");\n      }\n\n      let valid = false;\n\n      Object.getOwnPropertyNames(Enumerations.REGISTERED_PARAMETERS).forEach(p => {\n        if (\n          Enumerations.REGISTERED_PARAMETERS[p][0] === parameter[0] &&\n          Enumerations.REGISTERED_PARAMETERS[p][1] === parameter[1]\n        ) {\n          valid = true;\n        }\n      });\n\n      if (!valid) throw new TypeError(\"The specified registered parameter is invalid.\");\n\n    }\n\n    this._selectRegisteredParameter(parameter, options);\n    this.sendControlChange(0x61, 0, options);\n    this._deselectRegisteredParameter(options);\n\n    return this;\n\n  }\n\n  /**\n   * Increments the specified MIDI registered parameter by 1. Here is the full list of parameter\n   * names that can be used with this function:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {String|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n   * parameter.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws TypeError The specified registered parameter is invalid.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendRpnIncrement(parameter, options = {}) {\n\n    if (!Array.isArray(parameter)) parameter = Enumerations.REGISTERED_PARAMETERS[parameter];\n\n    if (wm.validation) {\n\n      if (parameter === undefined) {\n        throw new TypeError(\"The specified registered parameter is invalid.\");\n      }\n\n      let valid = false;\n\n      Object.getOwnPropertyNames(Enumerations.REGISTERED_PARAMETERS).forEach(p => {\n        if (\n          Enumerations.REGISTERED_PARAMETERS[p][0] === parameter[0] &&\n          Enumerations.REGISTERED_PARAMETERS[p][1] === parameter[1]\n        ) {\n          valid = true;\n        }\n      });\n\n      if (!valid) throw new TypeError(\"The specified registered parameter is invalid.\");\n\n    }\n\n    this._selectRegisteredParameter(parameter, options);\n    this.sendControlChange(0x60, 0, options);\n    this._deselectRegisteredParameter(options);\n\n    return this;\n\n  }\n\n  /**\n   * Plays a note or an array of notes on the channel. The first parameter is the note to play. It\n   * can be a single value or an array of the following valid values:\n   *\n   *  - A [`Note`]{@link Note} object\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note name, followed by the octave (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *\n   * The `playNote()` method sends a **note on** MIDI message for all specified notes. If a\n   * `duration` is set in the `options` parameter or in the [`Note`]{@link Note} object's\n   * [`duration`]{@link Note#duration} property, it will also schedule a **note off** message\n   * to end the note after said duration. If no `duration` is set, the note will simply play until\n   * a matching **note off** message is sent with [`stopNote()`]{@link OutputChannel#stopNote} or\n   * [`sendNoteOff()`]{@link OutputChannel#sendNoteOff}.\n   *\n   *  The execution of the **note on** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using [`Note`]{@link Note} objects, the durations and velocities defined in the\n   * [`Note`]{@link Note} objects have precedence over the ones specified via the method's `options`\n   * parameter.\n   *\n   * **Note**: per the MIDI standard, a **note on** message with an attack velocity of `0` is\n   * functionally equivalent to a **note off** message.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to play. The notes can be\n   * specified by using a MIDI note number (`0` - `127`), a note identifier (e.g. `C3`, `G#4`,\n   * `F-1`, `Db7`), a [`Note`]{@link Note} object or an array of the previous types. When using a\n   * note identifier, the octave range must be between `-1` and `9`. The lowest note is `C-1` (MIDI\n   * note number `0`) and the highest note is `G9` (MIDI note number `127`).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number} [options.duration] A positive decimal number larger than `0` representing the\n   * number of milliseconds to wait before sending a **note off** message. If invalid or left\n   * undefined, only a **note on** message will be sent.\n   *\n   * @param {number} [options.attack=0.5] The velocity at which to play the note (between `0` and\n   * `1`). If the `rawAttack` option is also defined, it will have priority. An invalid velocity\n   * value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawAttack=64] The attack velocity at which to play the note (between\n   * `0` and `127`). This has priority over the `attack` property. An invalid velocity value will\n   * silently trigger the default of 64.\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note (between `0`\n   * and `1`). If the `rawRelease` option is also defined, it will have priority. An invalid\n   * velocity value will silently trigger the default of `0.5`. This is only used with the\n   * **note off** event triggered when `options.duration` is set.\n   *\n   * @param {number} [options.rawRelease=64] The velocity at which to release the note (between `0`\n   * and `127`). This has priority over the `release` property. An invalid velocity value will\n   * silently trigger the default of 64. This is only used with the **note off** event triggered\n   * when `options.duration` is set.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  playNote(note, options = {}) {\n\n    // Send note on and, optionally, note off message (if duration is a positive number)\n    this.sendNoteOn(note, options);\n\n    const notes = Array.isArray(note) ? note : [note];\n\n    for(let note of notes) {\n      if (parseInt(note.duration) > 0) {\n        const noteOffOptions = {\n          time: (Utilities.toTimestamp(options.time) || wm.time) + parseInt(note.duration),\n          release: note.release,\n          rawRelease: note.rawRelease\n        };\n        this.sendNoteOff(note, noteOffOptions);\n      } else if (parseInt(options.duration) > 0) {\n        const noteOffOptions = {\n          time: (Utilities.toTimestamp(options.time) || wm.time) + parseInt(options.duration),\n          release: options.release,\n          rawRelease: options.rawRelease\n        };\n        this.sendNoteOff(note, noteOffOptions);\n      }\n    }\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **note off** message for the specified notes on the channel. The first parameter is the\n   * note. It can be a single value or an array of the following valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note name, followed by the octave (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A [`Note`]{@link Note} object\n   *\n   * The execution of the **note off** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using [`Note`]{@link Note} objects, the release velocity defined in the\n   * [`Note`]{@link Note} objects has precedence over the one specified via the method's `options`\n   * parameter.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to stop. The notes can be\n   * specified by using a MIDI note number (0-127), a note identifier (e.g. C3, G#4, F-1, Db7), a\n   * [`Note`]{@link Note} object or an array of the previous types. When using a note name, octave\n   * range must be between -1 and 9. The lowest note is C-1 (MIDI note number 0) and the highest\n   * note is G9 (MIDI note number 127).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note\n   * (between `0` and `1`).  If the `rawRelease` option is also defined, `rawRelease` will have\n   * priority. An invalid velocity value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawRelease=64] The velocity at which to release the note\n   * (between `0` and `127`). If the `release` option is also defined, `rawRelease` will have\n   * priority. An invalid velocity value will silently trigger the default of `64`.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendNoteOff(note, options = {}) {\n\n    if (wm.validation) {\n\n      if (\n        options.rawRelease != undefined &&\n        !(options.rawRelease >= 0 && options.rawRelease <= 127)\n      ) {\n        throw new RangeError(\"The 'rawRelease' option must be an integer between 0 and 127\");\n      }\n\n      if (options.release != undefined && !(options.release >= 0 && options.release <= 1)) {\n        throw new RangeError(\"The 'release' option must be an number between 0 and 1\");\n      }\n\n      // Legacy compatibility warnings\n      if (options.rawVelocity) {\n        options.rawRelease = options.velocity;\n        console.warn(\"The 'rawVelocity' option is deprecated. Use 'rawRelease' instead.\");\n      }\n      if (options.velocity) {\n        options.release = options.velocity;\n        console.warn(\"The 'velocity' option is deprecated. Use 'attack' instead.\");\n      }\n\n    }\n\n    let nVelocity = 64;\n\n    if (options.rawRelease != undefined) {\n      nVelocity = options.rawRelease;\n    } else {\n      if (!isNaN(options.release)) nVelocity = Math.round(options.release * 127);\n    }\n\n    // Plot total octave offset\n    const offset = wm.octaveOffset + this.output.octaveOffset + this.octaveOffset;\n\n    Utilities.buildNoteArray(note, {rawRelease: parseInt(nVelocity)}).forEach(n => {\n      this.send(\n        [\n          (Enumerations.CHANNEL_MESSAGES.noteoff << 4) + (this.number - 1),\n          n.getOffsetNumber(offset),\n          n.rawRelease,\n        ],\n        {time: Utilities.toTimestamp(options.time)}\n      );\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **note off** message for the specified MIDI note number. The first parameter is the\n   * note to stop. It can be a single value or an array of the following valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note identifier (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A [`Note`](Note) object\n   *\n   * The execution of the **note off** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * @param note {number|Note|string|number[]|Note[]|string[]} The note(s) to stop. The notes can be\n   * specified by using a MIDI note number (`0` - `127`), a note identifier (e.g. `C3`, `G#4`, `F-1`,\n   * `Db7`) or an array of the previous types. When using a note identifier, octave range must be\n   * between `-1` and `9`. The lowest note is `C-1` (MIDI note number `0`) and the highest note is\n   * `G9` (MIDI note number `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note\n   * (between `0` and `1`).  If the `rawRelease` option is also defined, `rawRelease` will have\n   * priority. An invalid velocity value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawRelease=64] The velocity at which to release the note\n   * (between `0` and `127`). If the `release` option is also defined, `rawRelease` will have\n   * priority. An invalid velocity value will silently trigger the default of `64`.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  stopNote(note, options = {}) {\n    return this.sendNoteOff(note, options);\n  }\n\n  /**\n   * Sends a **note on** message for the specified note(s) on the channel. The first parameter is\n   * the note. It can be a single value or an array of the following valid values:\n   *\n   *  - A [`Note`]{@link Note} object\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note identifier (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *\n   *  When passing a [`Note`]{@link Note}object or a note name, the `octaveOffset` will be applied.\n   *  This is not the case when using a note number. In this case, we assume you know exactly which\n   *  MIDI note number should be sent out.\n   *\n   * The execution of the **note on** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using [`Note`]{@link Note} objects, the attack velocity defined in the\n   * [`Note`]{@link Note} objects has precedence over the one specified via the method's `options`\n   * parameter. Also, the `duration` is ignored. If you want to also send a **note off** message,\n   * use the [`playNote()`]{@link #playNote} method instead.\n   *\n   * **Note**: As per the MIDI standard, a **note on** message with an attack velocity of `0` is\n   * functionally equivalent to a **note off** message.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to play. The notes can be\n   * specified by using a MIDI note number (0-127), a note identifier (e.g. C3, G#4, F-1, Db7), a\n   * [`Note`]{@link Note} object or an array of the previous types.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @param {number} [options.attack=0.5] The velocity at which to play the note (between `0` and\n   * `1`).  If the `rawAttack` option is also defined, `rawAttack` will have priority. An invalid\n   * velocity value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawAttack=64] The velocity at which to release the note (between `0`\n   * and `127`). If the `attack` option is also defined, `rawAttack` will have priority. An invalid\n   * velocity value will silently trigger the default of `64`.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendNoteOn(note, options = {}) {\n\n    if (wm.validation) {\n\n      if (options.rawAttack != undefined && !(options.rawAttack >= 0 && options.rawAttack <= 127)) {\n        throw new RangeError(\"The 'rawAttack' option must be an integer between 0 and 127\");\n      }\n\n      if (options.attack != undefined && !(options.attack >= 0 && options.attack <= 1)) {\n        throw new RangeError(\"The 'attack' option must be an number between 0 and 1\");\n      }\n\n      // Legacy compatibility warnings\n      if (options.rawVelocity) {\n        options.rawAttack = options.velocity;\n        options.rawRelease = options.release;\n        console.warn(\"The 'rawVelocity' option is deprecated. Use 'rawAttack' or 'rawRelease'.\");\n      }\n      if (options.velocity) {\n        options.attack = options.velocity;\n        console.warn(\"The 'velocity' option is deprecated. Use 'attack' instead.\");\n      }\n\n    }\n\n    let nVelocity = 64;\n\n    if (options.rawAttack != undefined) {\n      nVelocity = options.rawAttack;\n    } else {\n      if (!isNaN(options.attack)) nVelocity = Math.round(options.attack * 127);\n    }\n\n    // Plot total octave offset\n    const offset = wm.octaveOffset + this.output.octaveOffset + this.octaveOffset;\n\n    Utilities.buildNoteArray(note, {rawAttack: nVelocity}).forEach(n => {\n      this.send(\n        [\n          (Enumerations.CHANNEL_MESSAGES.noteon << 4) + (this.number - 1),\n          n.getOffsetNumber(offset),\n          n.rawAttack\n        ],\n        {time: Utilities.toTimestamp(options.time)}\n      );\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **channel mode** message. The channel mode message to send can be specified\n   * numerically or by using one of the following common names:\n   *\n   * |  Type                |Number| Shortcut Method                                               |\n   * | ---------------------|------|-------------------------------------------------------------- |\n   * | `allsoundoff`        | 120  | [`sendAllSoundOff()`]{@link #sendAllSoundOff}                 |\n   * | `resetallcontrollers`| 121  | [`sendResetAllControllers()`]{@link #sendResetAllControllers} |\n   * | `localcontrol`       | 122  | [`sendLocalControl()`]{@link #sendLocalControl}               |\n   * | `allnotesoff`        | 123  | [`sendAllNotesOff()`]{@link #sendAllNotesOff}                 |\n   * | `omnimodeoff`        | 124  | [`sendOmniMode(false)`]{@link #sendOmniMode}                  |\n   * | `omnimodeon`         | 125  | [`sendOmniMode(true)`]{@link #sendOmniMode}                   |\n   * | `monomodeon`         | 126  | [`sendPolyphonicMode(\"mono\")`]{@link #sendPolyphonicMode}     |\n   * | `polymodeon`         | 127  | [`sendPolyphonicMode(\"poly\")`]{@link #sendPolyphonicMode}     |\n   *\n   * **Note**: as you can see above, to make it easier, all channel mode messages also have a matching\n   * helper method.\n   *\n   * It should be noted that, per the MIDI specification, only `localcontrol` and `monomodeon` may\n   * require a value that's not zero. For that reason, the `value` parameter is optional and\n   * defaults to 0.\n   *\n   * @param {number|string} command The numerical identifier of the channel mode message (integer\n   * between `120` and `127`) or its name as a string.\n   *\n   * @param {number} [value=0] The value to send (integer between `0` - `127`).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendChannelMode(command, value = 0, options = {}) {\n\n    // Normalize command to integer\n    if (typeof command === \"string\") command = Enumerations.CHANNEL_MODE_MESSAGES[command];\n\n    if (wm.validation) {\n\n      if (command === undefined) {\n        throw new TypeError(\"Invalid channel mode message name or number.\");\n      }\n\n      if (isNaN(command) || !(command >= 120 && command <= 127)) {\n        throw new TypeError(\"Invalid channel mode message number.\");\n      }\n\n      if (isNaN(parseInt(value)) || value < 0 || value > 127) {\n        throw new RangeError(\"Value must be an integer between 0 and 127.\");\n      }\n\n    }\n\n    this.send(\n      [\n        (Enumerations.CHANNEL_MESSAGES.controlchange << 4) + (this.number - 1),\n        command,\n        value\n      ],\n      {time: Utilities.toTimestamp(options.time)}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sets OMNI mode to `\"on\"` or `\"off\"`. MIDI's OMNI mode causes the instrument to respond to\n   * messages from all channels.\n   *\n   * It should be noted that support for OMNI mode is not as common as it used to be.\n   *\n   * @param [state=true] {boolean} Whether to activate OMNI mode (`true`) or not (`false`).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Invalid channel mode message name.\n   * @throws {RangeError} Channel mode controller numbers must be between 120 and 127.\n   * @throws {RangeError} Value must be an integer between 0 and 127.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendOmniMode(state, options = {}) {\n\n    if (state === undefined || state) {\n      this.sendChannelMode(\"omnimodeon\", 0, options);\n    } else {\n      this.sendChannelMode(\"omnimodeoff\", 0, options);\n    }\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **channel aftertouch** message. For key-specific aftertouch, you should instead\n   * use [`sendKeyAftertouch()`]{@link #sendKeyAftertouch}.\n   *\n   * @param [pressure] {number} The pressure level (between `0` and `1`). If the `rawValue` option\n   * is set to `true`, the pressure can be defined by using an integer between `0` and `127`.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered a float between `0` and `1.0` (default) or a raw integer between `0` and `127`.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   *\n   * @throws RangeError Invalid channel aftertouch value.\n   */\n  sendChannelAftertouch(pressure, options = {}) {\n\n    if (wm.validation) {\n\n      if (isNaN(parseFloat(pressure))) {\n        throw new RangeError(\"Invalid channel aftertouch value.\");\n      }\n\n      if (options.rawValue) {\n        if (!(pressure >= 0 && pressure <= 127 && Number.isInteger(pressure))) {\n          throw new RangeError(\n            \"Channel aftertouch raw value must be an integer between 0 and 127.\")\n          ;\n        }\n      } else {\n        if (!(pressure >= 0 && pressure <= 1)) {\n          throw new RangeError(\"Channel aftertouch value must be a float between 0 and 1.\");\n        }\n      }\n\n    }\n\n    // Normalize pressure to integer\n    if (!options.rawValue) pressure = Utilities.fromFloatTo7Bit(pressure);\n\n    this.send(\n      [\n        (Enumerations.CHANNEL_MESSAGES.channelaftertouch << 4) + (this.number - 1),\n        Math.round(pressure)\n      ],\n      {time: Utilities.toTimestamp(options.time)}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **master tuning** message. The value is decimal and must be larger than -65 semitones\n   * and smaller than 64 semitones.\n   *\n   * Because of the way the MIDI specification works, the decimal portion of the value will be\n   * encoded with a resolution of 14bit. The integer portion must be between -64 and 63\n   * inclusively. This function actually generates two MIDI messages: a **Master Coarse Tuning** and\n   * a **Master Fine Tuning** RPN messages.\n   *\n   * @param [value=0.0] {number} The desired decimal adjustment value in semitones (-65 < x < 64)\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The value must be a decimal number between larger than -65 and smaller\n   * than 64.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendMasterTuning(value, options = {}) {\n\n    // @todo allow passing value as msb/lsb pair (the same as pitch bend range)\n\n    value = parseFloat(value) || 0.0;\n\n    if (wm.validation) {\n\n      if (!(value > -65 && value < 64)) {\n        throw new RangeError(\n          \"The value must be a decimal number larger than -65 and smaller than 64.\"\n        );\n      }\n\n    }\n\n    let coarse = Math.floor(value) + 64;\n    let fine = value - Math.floor(value);\n\n    // Calculate MSB and LSB for fine adjustment (14bit resolution)\n    fine = Math.round((fine + 1) / 2 * 16383);\n    let msb = (fine >> 7) & 0x7F;\n    let lsb = fine & 0x7F;\n\n    this.sendRpnValue(\"channelcoarsetuning\", coarse, options);\n    this.sendRpnValue(\"channelfinetuning\", [msb, lsb], options);\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **modulation depth range** message to adjust the depth of the modulation wheel's range.\n   * The range can be specified with the `semitones` parameter, the `cents` parameter or by\n   * specifying both parameters at the same time.\n   *\n   * @param {number} semitones The desired adjustment value in semitones (integer between 0 and\n   * 127).\n   *\n   * @param {number} [cents=0] The desired adjustment value in cents (integer between 0 and 127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendModulationRange(semitones, cents, options = {}) {\n\n    // @todo allow passing value as msb/lsb pair (the same as pitch bend range)\n    // when passing a single argument, semitones and cents shoud be combined\n\n    if (wm.validation) {\n\n      if (!Number.isInteger(semitones) || !(semitones >= 0 && semitones <= 127)) {\n        throw new RangeError(\"The semitones value must be an integer between 0 and 127.\");\n      }\n\n      if (!(cents == undefined) && (!Number.isInteger(cents) || !(cents >= 0 && cents <= 127))) {\n        throw new RangeError(\"If specified, the cents value must be an integer between 0 and 127.\");\n      }\n\n    }\n\n    // Default value for cents\n    if (!(cents >= 0 && cents <= 127)) cents = 0;\n\n    this.sendRpnValue(\"modulationrange\", [semitones, cents], options);\n\n    return this;\n\n  }\n\n  /**\n   * Sets a non-registered parameter (NRPN) to the specified value. The NRPN is selected by passing\n   * in a two-position array specifying the values of the two control bytes. The value is specified\n   * by passing in a single integer (most cases) or an array of two integers.\n   *\n   * NRPNs are not standardized in any way. Each manufacturer is free to implement them any way\n   * they see fit. For example, according to the Roland GS specification, you can control the\n   * **vibrato rate** using NRPN (1, 8). Therefore, to set the **vibrato rate** value to **123** you\n   * would use:\n   *\n   * ```js\n   * WebMidi.outputs[0].channels[0].sendNrpnValue([1, 8], 123);\n   * ```\n   *\n   * In some rarer cases, you need to send two values with your NRPN messages. In such cases, you\n   * would use a 2-position array. For example, for its **ClockBPM** parameter (2, 63), Novation\n   * uses a 14-bit value that combines an MSB and an LSB (7-bit values). So, for example, if the\n   * value to send was 10, you could use:\n   *\n   * ```js\n   * WebMidi.outputs[0].channels[0].sendNrpnValue([2, 63], [0, 10]);\n   * ```\n   *\n   * For further implementation details, refer to the manufacturer's documentation.\n   *\n   * @param nrpn {number[]} A two-position array specifying the two control bytes (0x63,\n   * 0x62) that identify the non-registered parameter.\n   *\n   * @param [data=[]] {number|number[]} An integer or an array of integers with a length of 1 or 2\n   * specifying the desired data.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The control value must be between 0 and 127.\n   * @throws {RangeError} The msb value must be between 0 and 127\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendNrpnValue(nrpn, data, options = {}) {\n\n    data = [].concat(data);\n\n    if (wm.validation) {\n\n      if (!Array.isArray(nrpn) || !Number.isInteger(nrpn[0]) || !Number.isInteger(nrpn[1])) {\n        throw new TypeError(\"The specified NRPN is invalid.\");\n      }\n\n      if (!(nrpn[0] >= 0 && nrpn[0] <= 127)) {\n        throw new RangeError(\"The first byte of the NRPN must be between 0 and 127.\");\n      }\n\n      if (!(nrpn[1] >= 0 && nrpn[1] <= 127)) {\n        throw new RangeError(\"The second byte of the NRPN must be between 0 and 127.\");\n      }\n\n      data.forEach(value => {\n        if (!(value >= 0 && value <= 127)) {\n          throw new RangeError(\"The data bytes of the NRPN must be between 0 and 127.\");\n        }\n      });\n\n    }\n\n    this._selectNonRegisteredParameter(nrpn, options);\n    this._setCurrentParameter(data, options);\n    this._deselectNonRegisteredParameter(options);\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **pitch bend** message at the scheduled time. The resulting bend is relative to\n   * the pitch bend range that has been defined. The range can be set with\n   * [`sendPitchBendRange()`]{@link #sendPitchBendRange}. So, for example, if the pitch\n   * bend range has been set to 12 semitones, using a bend value of -1 will bend the note 1 octave\n   * below its nominal value.\n   *\n   * @param {number|number[]} [value] The intensity of the bend (between -1.0 and 1.0). A value of\n   * zero means no bend. If the `rawValue` option is set to `true`, the intensity of the bend can be\n   * defined by either using a single integer between 0 and 127 (MSB) or an array of two integers\n   * between 0 and 127 representing, respectively, the MSB (most significant byte) and the LSB\n   * (least significant byte). The MSB is expressed in semitones with `64` meaning no bend. A value\n   * lower than `64` bends downwards while a value higher than `64` bends upwards. The LSB is\n   * expressed in cents (1/100 of a semitone). An LSB of `64` also means no bend.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered as a float between -1.0 and 1.0 (default) or as raw integer between 0 and 127 (or\n   * an array of 2 integers if using both MSB and LSB).\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendPitchBend(value, options = {}) {\n\n    // @todo standardize the way msb/lsb are passed in\n\n    if (wm.validation) {\n\n      if (options.rawValue && Array.isArray(value)) {\n\n        if (!(value[0] >= 0 && value[0] <= 127)) {\n          throw new RangeError(\"The pitch bend MSB must be an integer between 0 and 127.\");\n        }\n        if (!(value[1] >= 0 && value[1] <= 127)) {\n          throw new RangeError(\"The pitch bend LSB must be an integer between 0 and 127.\");\n        }\n\n      } else if (options.rawValue && !Array.isArray(value)) {\n\n        if (!(value >= 0 && value <= 127)) {\n          throw new RangeError(\"The pitch bend MSB must be an integer between 0 and 127.\");\n        }\n\n      } else {\n\n        if (isNaN(value) || value === null) {\n          throw new RangeError(\"Invalid pitch bend value.\");\n        }\n\n        if (!(value >= -1 && value <= 1)) {\n          throw new RangeError(\"The pitch bend value must be a float between -1 and 1.\");\n        }\n\n      }\n\n    }\n\n    let msb = 0;\n    let lsb = 0;\n\n    // Calculate MSB and LSB for both scenarios\n    if (options.rawValue && Array.isArray(value)) {\n      msb = value[0];\n      lsb = value[1];\n    } else if (options.rawValue && !Array.isArray(value)) {\n      msb = value;\n    } else {\n      const result = Utilities.fromFloatToMsbLsb((value + 1) / 2); // b/c value is -1 to 1\n      msb = result.msb;\n      lsb = result.lsb;\n    }\n\n    this.send(\n      [\n        (Enumerations.CHANNEL_MESSAGES.pitchbend << 4) + (this.number - 1),\n        lsb,\n        msb\n      ],\n      {time: Utilities.toTimestamp(options.time)}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **pitch bend range** message at the scheduled time to adjust the range used by the\n   * pitch bend lever. The range is specified by using the `semitones` and `cents` parameters. For\n   * example, setting the `semitones` parameter to `12` means that the pitch bend range will be 12\n   * semitones above and below the nominal pitch.\n   *\n   * @param semitones {number} The desired adjustment value in semitones (between 0 and 127). While\n   * nothing imposes that in the specification, it is very common for manufacturers to limit the\n   * range to 2 octaves (-12 semitones to 12 semitones).\n   *\n   * @param [cents=0] {number} The desired adjustment value in cents (integer between 0-127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The semitones value must be an integer between 0 and 127.\n   * @throws {RangeError} The cents value must be an integer between 0 and 127.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendPitchBendRange(semitones, cents, options = {}) {\n\n    // @todo use single value as parameter or pair of msb/lsb\n\n    if (wm.validation) {\n\n      if (!Number.isInteger(semitones) || !(semitones >= 0 && semitones <= 127)) {\n        throw new RangeError(\"The semitones value must be an integer between 0 and 127.\");\n      }\n\n      if (!Number.isInteger(cents) || !(cents >= 0 && cents <= 127)) {\n        throw new RangeError(\"The cents value must be an integer between 0 and 127.\");\n      }\n\n    }\n\n    this.sendRpnValue(\"pitchbendrange\", [semitones, cents], options);\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **program change** message at the scheduled time.\n   *\n   * @param [program=1] {number} The MIDI patch (program) number (integer between `0` and `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index 1 is greater\n   * than 0xFF.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   *\n   */\n  sendProgramChange(program, options = {}) {\n\n    program = parseInt(program) || 0;\n\n    if (wm.validation) {\n\n      if (!(program >= 0 && program <= 127)) {\n        throw new RangeError(\"The program number must be between 0 and 127.\");\n      }\n\n    }\n\n    this.send(\n      [\n        (Enumerations.CHANNEL_MESSAGES.programchange << 4) + (this.number - 1),\n        program\n      ],\n      {time: Utilities.toTimestamp(options.time)}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sets the specified MIDI registered parameter to the desired value. The value is defined with\n   * up to two bytes of data (msb, lsb) that each can go from 0 to 127.\n   *\n   * MIDI\n   * [registered parameters](https://www.midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2)\n   * extend the original list of control change messages. The MIDI 1.0 specification lists only a\n   * limited number of them:\n   *\n   * | Numbers      | Function                 |\n   * |--------------|--------------------------|\n   * | (0x00, 0x00) | `pitchbendrange`         |\n   * | (0x00, 0x01) | `channelfinetuning`      |\n   * | (0x00, 0x02) | `channelcoarsetuning`    |\n   * | (0x00, 0x03) | `tuningprogram`          |\n   * | (0x00, 0x04) | `tuningbank`             |\n   * | (0x00, 0x05) | `modulationrange`        |\n   * | (0x3D, 0x00) | `azimuthangle`           |\n   * | (0x3D, 0x01) | `elevationangle`         |\n   * | (0x3D, 0x02) | `gain`                   |\n   * | (0x3D, 0x03) | `distanceratio`          |\n   * | (0x3D, 0x04) | `maximumdistance`        |\n   * | (0x3D, 0x05) | `maximumdistancegain`    |\n   * | (0x3D, 0x06) | `referencedistanceratio` |\n   * | (0x3D, 0x07) | `panspreadangle`         |\n   * | (0x3D, 0x08) | `rollangle`              |\n   *\n   * Note that the **Tuning Program** and **Tuning Bank** parameters are part of the *MIDI Tuning\n   * Standard*, which is not widely implemented.\n   *\n   * @param rpn {string|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (e.g. `[0x65, 0x64]`) that identify the\n   * registered parameter.\n   *\n   * @param [data=[]] {number|number[]} An single integer or an array of integers with a maximum\n   * length of 2 specifying the desired data.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendRpnValue(rpn, data, options = {}) {\n\n    if (!Array.isArray(rpn)) rpn = Enumerations.REGISTERED_PARAMETERS[rpn];\n\n    if (wm.validation) {\n\n      if (!Number.isInteger(rpn[0]) || !Number.isInteger(rpn[1])) {\n        throw new TypeError(\"The specified NRPN is invalid.\");\n      }\n\n      if (!(rpn[0] >= 0 && rpn[0] <= 127)) {\n        throw new RangeError(\"The first byte of the RPN must be between 0 and 127.\");\n      }\n\n      if (!(rpn[1] >= 0 && rpn[1] <= 127)) {\n        throw new RangeError(\"The second byte of the RPN must be between 0 and 127.\");\n      }\n\n      [].concat(data).forEach(value => {\n        if (!(value >= 0 && value <= 127)) {\n          throw new RangeError(\"The data bytes of the RPN must be between 0 and 127.\");\n        }\n      });\n\n    }\n\n    this._selectRegisteredParameter(rpn, options);\n    this._setCurrentParameter(data, options);\n    this._deselectRegisteredParameter(options);\n\n    return this;\n\n  }\n\n  /**\n   * Sets the MIDI tuning bank to use. Note that the **Tuning Bank** parameter is part of the\n   * *MIDI Tuning Standard*, which is not widely implemented.\n   *\n   * @param value {number} The desired tuning bank (integer between `0` and `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The bank value must be between 0 and 127.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendTuningBank(value, options = {}) {\n\n    if (wm.validation) {\n\n      if (!Number.isInteger(value) || !(value >= 0 && value <= 127)) {\n        throw new RangeError(\"The tuning bank number must be between 0 and 127.\");\n      }\n\n    }\n\n    this.sendRpnValue(\"tuningbank\", value, options);\n    return this;\n\n  }\n\n  /**\n   * Sets the MIDI tuning program to use. Note that the **Tuning Program** parameter is part of the\n   * *MIDI Tuning Standard*, which is not widely implemented.\n   *\n   * @param value {number} The desired tuning program (integer between `0` and `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The program value must be between 0 and 127.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendTuningProgram(value, options = {}) {\n\n    if (wm.validation) {\n\n      if (!Number.isInteger(value) || !(value >= 0 && value <= 127)) {\n        throw new RangeError(\"The tuning program number must be between 0 and 127.\");\n      }\n\n    }\n\n    this.sendRpnValue(\"tuningprogram\", value, options);\n    return this;\n\n  }\n\n  /**\n   * Turns local control on or off. Local control is usually enabled by default. If you disable it,\n   * the instrument will no longer trigger its own sounds. It will only send the MIDI messages to\n   * its out port.\n   *\n   * @param [state=false] {boolean} Whether to activate local control (`true`) or disable it\n   * (`false`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendLocalControl(state, options = {}) {\n    if (state) {\n      return this.sendChannelMode(\"localcontrol\", 127, options);\n    } else {\n      return this.sendChannelMode(\"localcontrol\", 0, options);\n    }\n  }\n\n  /**\n   * Sends an **all notes off** channel mode message. This will make all currently playing notes\n   * fade out just as if their key had been released. This is different from the\n   * [`sendAllSoundOff()`]{@link #sendAllSoundOff} method which mutes all sounds immediately.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendAllNotesOff(options = {}) {\n    return this.sendChannelMode(\"allnotesoff\", 0, options);\n  }\n\n  /**\n   * Sends an **all sound off** channel mode message. This will silence all sounds playing on that\n   * channel but will not prevent new sounds from being triggered.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendAllSoundOff(options = {}) {\n    return this.sendChannelMode(\"allsoundoff\", 0, options);\n  }\n\n  /**\n   * Sends a **reset all controllers** channel mode message. This resets all controllers, such as\n   * the pitch bend, to their default value.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendResetAllControllers(options = {}) {\n    return this.sendChannelMode(\"resetallcontrollers\", 0, options);\n  }\n\n  /**\n   * Sets the polyphonic mode. In `\"poly\"` mode (usually the default), multiple notes can be played\n   * and heard at the same time. In `\"mono\"` mode, only one note will be heard at once even if\n   * multiple notes are being played.\n   *\n   * @param {string} [mode=poly] The mode to use: `\"mono\"` or `\"poly\"`.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendPolyphonicMode(mode, options = {}) {\n    if (mode === \"mono\") {\n      return this.sendChannelMode(\"monomodeon\", 0, options);\n    } else {\n      return this.sendChannelMode(\"polymodeon\", 0, options);\n    }\n  }\n\n  /**\n   * An integer to offset the reported octave of outgoing note-specific messages (`noteon`,\n   * `noteoff` and `keyaftertouch`). By default, middle C (MIDI note number 60) is placed on the 4th\n   * octave (C4).\n   *\n   * Note that this value is combined with the global offset value defined in\n   * [`WebMidi.octaveOffset`](WebMidi#octaveOffset) and with the parent value defined in\n   * [`Output.octaveOffset`]{@link Output#octaveOffset}.\n   *\n   * @type {number}\n   *\n   * @since 3.0\n   */\n  get octaveOffset() {\n    return this._octaveOffset;\n  }\n  set octaveOffset(value) {\n\n    if (this.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n    }\n\n    this._octaveOffset = value;\n\n  }\n\n  /**\n   * The parent [`Output`]{@link Output} this channel belongs to.\n   * @type {Output}\n   * @since 3.0\n   */\n  get output() {\n    return this._output;\n  }\n\n  /**\n   * This channel's MIDI number (`1` - `16`).\n   * @type {number}\n   * @since 3.0\n   */\n  get number() {\n    return this._number;\n  }\n\n}\n\n/**\n * The `Output` class represents a single MIDI output port (not to be confused with a MIDI channel).\n * A port is made available by a MIDI device. A MIDI device can advertise several input and output\n * ports. Each port has 16 MIDI channels which can be accessed via the [`channels`](#channels)\n * property.\n *\n * The `Output` object is automatically instantiated by the library according to the host's MIDI\n * subsystem and should not be directly instantiated.\n *\n * You can access all available `Output` objects by referring to the\n * [`WebMidi.outputs`](WebMidi#outputs) array or by using methods such as\n * [`WebMidi.getOutputByName()`](WebMidi#getOutputByName) or\n * [`WebMidi.getOutputById()`](WebMidi#getOutputById).\n *\n * @fires Output#opened\n * @fires Output#disconnected\n * @fires Output#closed\n *\n * @extends EventEmitter\n * @license Apache-2.0\n */\nclass Output extends EventEmitter {\n\n  /**\n   * Creates an `Output` object.\n   *\n   * @param {MIDIOutput} midiOutput [`MIDIOutput`](https://developer.mozilla.org/en-US/docs/Web/API/MIDIOutput)\n   * object as provided by the MIDI subsystem.\n   */\n  constructor(midiOutput) {\n\n    super();\n\n    /**\n     * A reference to the `MIDIOutput` object\n     * @type {MIDIOutput}\n     * @private\n     */\n    this._midiOutput = midiOutput;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._octaveOffset = 0;\n\n    /**\n     * Array containing the 16 [`OutputChannel`]{@link OutputChannel} objects available provided by\n     * this `Output`. The channels are numbered 1 through 16.\n     *\n     * @type {OutputChannel[]}\n     */\n    this.channels = [];\n    for (let i = 1; i <= 16; i++) this.channels[i] = new OutputChannel(this, i);\n\n    this._midiOutput.onstatechange = this._onStateChange.bind(this);\n\n  }\n\n  /**\n   * Destroys the `Output`. All listeners are removed, all channels are destroyed and the MIDI\n   * subsystem is unlinked.\n   * @returns {Promise<void>}\n   */\n  async destroy() {\n    this.removeListener();\n    this.channels.forEach(ch => ch.destroy());\n    this.channels = [];\n    if (this._midiOutput) this._midiOutput.onstatechange = null;\n    await this.close();\n    this._midiOutput = null;\n  }\n\n  /**\n   * @private\n   */\n  _onStateChange(e) {\n\n    let event = {\n      timestamp: wm.time\n    };\n\n    if (e.port.connection === \"open\") {\n\n      /**\n       * Event emitted when the {@link Output} has been opened by calling the\n       * [open()]{@link Output#open} method.\n       *\n       * @event Output#opened\n       * @type {object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"opened\"`\n       * @property {Output} target The object to which the listener was originally added (`Output`).\n       * @property {Output} port The port that was opened\n       */\n      event.type = \"opened\";\n      event.target = this;\n      event.port = event.target; // for consistency\n      this.emit(\"opened\", event);\n\n    } else if (e.port.connection === \"closed\" && e.port.state === \"connected\") {\n\n      /**\n       * Event emitted when the {@link Output} has been closed by calling the\n       * [close()]{@link Output#close} method.\n       *\n       * @event Output#closed\n       * @type {object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"closed\"`\n       * @property {Output} target The object to which the listener was originally added (`Output`).\n       * @property {Output} port The port that was closed\n       */\n      event.type = \"closed\";\n      event.target = this;\n      event.port = event.target; // for consistency\n      this.emit(\"closed\", event);\n\n    } else if (e.port.connection === \"closed\" && e.port.state === \"disconnected\") {\n\n      /**\n       * Event emitted when the {@link Output} becomes unavailable. This event is typically fired\n       * when the MIDI device is unplugged.\n       *\n       * @event Output#disconnected\n       * @type {object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp0 when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"disconnected\"`\n       * @property {Output} target The object to which the listener was originally added (`Output`).\n       * @property {object} port Object with properties describing the {@link Output} that was\n       * disconnected. This is not the actual `Output` as it is no longer available.\n       */\n      event.type = \"disconnected\";\n      event.port = {\n        connection: e.port.connection,\n        id: e.port.id,\n        manufacturer: e.port.manufacturer,\n        name: e.port.name,\n        state: e.port.state,\n        type: e.port.type\n      };\n      this.emit(\"disconnected\", event);\n\n    } else if (e.port.connection === \"pending\" && e.port.state === \"disconnected\") ; else {\n      console.warn(\"This statechange event was not caught:\", e.port.connection, e.port.state);\n    }\n\n  }\n\n  /**\n   * Opens the output for usage. When the library is enabled, all ports are automatically opened.\n   * This method is only useful for ports that have been manually closed.\n   *\n   * @returns {Promise<Output>} The promise is fulfilled with the `Output` object.\n   */\n  async open() {\n\n    // Explicitly opens the port for usage. This is not mandatory. When the port is not explicitly\n    // opened, it is implicitly opened (asynchronously) when calling `send()` on the `MIDIOutput`.\n    // We do it explicitly so that 'connected' events are dispatched immediately and we are ready to\n    // send.\n    try {\n      await this._midiOutput.open();\n      return Promise.resolve(this);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n  }\n\n  /**\n   * Closes the output connection. When an output is closed, it cannot be used to send MIDI messages\n   * until the output is opened again by calling [`open()`]{@link #open}. You can check\n   * the connection status by looking at the [`connection`]{@link #connection} property.\n   *\n   * @returns {Promise<void>}\n   */\n  async close() {\n\n    // We close the port. This triggers a 'statechange' event which we listen to to re-trigger the\n    // 'closed' event.\n    if (this._midiOutput) {\n      await this._midiOutput.close();\n    } else {\n      await Promise.resolve();\n    }\n\n  }\n\n  /**\n   * Sends a MIDI message on the MIDI output port. If no time is specified, the message will be\n   * sent immediately. The message should be an array of 8 bit unsigned integers (0-225), a\n   * [`Uint8Array`]{@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array}\n   * object or a [`Message`](Message) object.\n   *\n   * It is usually not necessary to use this method directly as you can use one of the simpler\n   * helper methods such as [`playNote()`](#playNote), [`stopNote()`](#stopNote),\n   * [`sendControlChange()`](#sendControlChange), etc.\n   *\n   * Details on the format of MIDI messages are available in the summary of\n   * [MIDI messages]{@link https://www.midi.org/specifications-old/item/table-1-summary-of-midi-message}\n   * from the MIDI Manufacturers Association.\n   *\n   * @param message {number[]|Uint8Array|Message} An array of 8bit unsigned integers, a `Uint8Array`\n   * object (not available in Node.js) containing the message bytes or a `Message` object.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The first byte (status) must be an integer between 128 and 255.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @license Apache-2.0\n   */\n  send(message, options = {time: 0}, legacy = 0) {\n\n    // If a Message object is passed in we extract the message data (the jzz plugin used on Node.js\n    // does not support using Uint8Array).\n    if (message instanceof Message) {\n      message = Utilities.isNode ? message.data : message.rawData;\n    }\n\n    // If the data is a Uint8Array and we are on Node, we must convert it to array so it works with\n    // the jzz module.\n    if (message instanceof Uint8Array && Utilities.isNode) {\n      message = Array.from(message);\n    }\n\n    // Validation\n    if (wm.validation) {\n\n      // If message is neither an array nor a Uint8Array, then we are in legacy mode\n      if (!Array.isArray(message) && !(message instanceof Uint8Array)) {\n        message = [message];\n        if (Array.isArray(options)) message = message.concat(options);\n        options = isNaN(legacy) ? {time: 0} : {time: legacy};\n      }\n\n      if (!(parseInt(message[0]) >= 128 && parseInt(message[0]) <= 255)) {\n        throw new RangeError(\"The first byte (status) must be an integer between 128 and 255.\");\n      }\n\n      message.slice(1).forEach(value => {\n        value = parseInt(value);\n        if (!(value >= 0 && value <= 255)) {\n          throw new RangeError(\"Data bytes must be integers between 0 and 255.\");\n        }\n      });\n\n      if (!options) options = {time: 0};\n\n    }\n\n    // Send message and return `Output` for chaining\n    this._midiOutput.send(message, Utilities.toTimestamp(options.time));\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI [**system exclusive**]{@link\n    * https://www.midi.org/specifications-old/item/table-4-universal-system-exclusive-messages}\n   * (*sysex*) message. There are two categories of system exclusive messages: manufacturer-specific\n   * messages and universal messages. Universal messages are further divided into three subtypes:\n   *\n   *   * Universal non-commercial (for research and testing): `0x7D`\n   *   * Universal non-realtime: `0x7E`\n   *   * Universal realtime: `0x7F`\n   *\n   * The method's first parameter (`identification`) identifies the type of message. If the value of\n   * `identification` is `0x7D` (125), `0x7E` (126) or `0x7F` (127), the message will be identified\n   * as a **universal non-commercial**, **universal non-realtime** or **universal realtime** message\n   * (respectively).\n   *\n   * If the `identification` value is an array or an integer between 0 and 124, it will be used to\n   * identify the manufacturer targeted by the message. The *MIDI Manufacturers Association*\n   * maintains a full list of\n   * [Manufacturer ID Numbers](https://www.midi.org/specifications-old/item/manufacturer-id-numbers).\n   *\n   * The `data` parameter should only contain the data of the message. When sending out the actual\n   * MIDI message, WEBMIDI.js will automatically prepend the data with the **sysex byte** (`0xF0`)\n   * and the identification byte(s). It will also automatically terminate the message with the\n   * **sysex end byte** (`0xF7`).\n   *\n   * To use the `sendSysex()` method, system exclusive message support must have been enabled. To\n   * do so, you must set the `sysex` option to `true` when calling\n   * [`WebMidi.enable()`]{@link WebMidi#enable}:\n   *\n   * ```js\n   * WebMidi.enable({sysex: true})\n   *   .then(() => console.log(\"System exclusive messages are enabled\");\n   * ```\n   *\n   * ##### Examples of manufacturer-specific system exclusive messages\n   *\n   * If you want to send a sysex message to a Korg device connected to the first output, you would\n   * use the following code:\n   *\n   * ```js\n   * WebMidi.outputs[0].sendSysex(0x42, [0x1, 0x2, 0x3, 0x4, 0x5]);\n   * ```\n   * In this case `0x42` is the ID of the manufacturer (Korg) and `[0x1, 0x2, 0x3, 0x4, 0x5]` is the\n   * data being sent.\n   *\n   * The parameters can be specified using any number notation (decimal, hex, binary, etc.).\n   * Therefore, the code above is equivalent to this code:\n   *\n   * ```js\n   * WebMidi.outputs[0].sendSysex(66, [1, 2, 3, 4, 5]);\n   * ```\n   *\n   * Some manufacturers are identified using 3 bytes. In this case, you would use a 3-position array\n   * as the first parameter. For example, to send the same sysex message to a\n   * *Native Instruments* device:\n   *\n   * ```js\n   * WebMidi.outputs[0].sendSysex([0x00, 0x21, 0x09], [0x1, 0x2, 0x3, 0x4, 0x5]);\n   * ```\n   *\n   * There is no limit for the length of the data array. However, it is generally suggested to keep\n   * system exclusive messages to 64Kb or less.\n   *\n   * ##### Example of universal system exclusive message\n   *\n   * If you want to send a universal sysex message, simply assign the correct identification number\n   * in the first parameter. Number `0x7D` (125) is for non-commercial, `0x7E` (126) is for\n   * non-realtime and `0x7F` (127) is for realtime.\n   *\n   * So, for example, if you wanted to send an identity request non-realtime message (`0x7E`), you\n   * could use the following:\n   *\n   * ```js\n   * WebMidi.outputs[0].sendSysex(0x7E, [0x7F, 0x06, 0x01]);\n   * ```\n   *\n   * For more details on the format of universal messages, consult the list of\n   * [universal sysex messages](https://www.midi.org/specifications-old/item/table-4-universal-system-exclusive-messages).\n   *\n   * @param {number|number[]} identification An unsigned integer or an array of three unsigned\n   * integers between `0` and `127` that either identify the manufacturer or sets the message to be\n   * a **universal non-commercial message** (`0x7D`), a **universal non-realtime message** (`0x7E`)\n   * or a **universal realtime message** (`0x7F`). The *MIDI Manufacturers Association* maintains a\n   * full list of\n   * [Manufacturer ID Numbers](https://www.midi.org/specifications-old/item/manufacturer-id-numbers).\n   *\n   * @param {number[]|Uint8Array} [data] A `Uint8Array` or an array of unsigned integers between `0`\n   * and `127`. This is the data you wish to transfer.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {DOMException} Failed to execute 'send' on 'MIDIOutput': System exclusive message is\n   * not allowed.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index x is greater\n   * than 0xFF.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendSysex(identification, data= [], options = {}) {\n\n    identification = [].concat(identification);\n\n    // Check if data is Uint8Array\n    if (data instanceof Uint8Array) {\n      const merged = new Uint8Array(1 + identification.length + data.length + 1);\n      merged[0] = Enumerations.SYSTEM_MESSAGES.sysex;\n      merged.set(Uint8Array.from(identification), 1);\n      merged.set(data, 1 + identification.length);\n      merged[merged.length - 1] = Enumerations.SYSTEM_MESSAGES.sysexend;\n      this.send(merged, {time: options.time});\n    } else {\n      const merged = identification.concat(data, Enumerations.SYSTEM_MESSAGES.sysexend);\n      this.send([Enumerations.SYSTEM_MESSAGES.sysex].concat(merged), {time: options.time});\n    }\n\n    return this;\n\n  };\n\n  /**\n   * Clears all MIDI messages that have been queued and scheduled but not yet sent.\n   *\n   * **Warning**: this method is defined in the\n   * [Web MIDI API specification](https://www.w3.org/TR/webmidi/#MIDIOutput) but has not been\n   * implemented by all browsers yet. You can follow\n   * [this issue](https://github.com/djipco/webmidi/issues/52) for more info.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  clear() {\n\n    if (this._midiOutput.clear) {\n\n      this._midiOutput.clear();\n\n    } else {\n\n      if (wm.validation) {\n        console.warn(\n          \"The 'clear()' method has not yet been implemented in your environment.\"\n        );\n      }\n\n    }\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **timecode quarter frame** message. Please note that no processing is being done\n   * on the data. It is up to the developer to format the data according to the\n   * [MIDI Timecode](https://en.wikipedia.org/wiki/MIDI_timecode) format.\n   *\n   * @param value {number} The quarter frame message content (integer between 0 and 127).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendTimecodeQuarterFrame(value, options = {}) {\n\n    if (wm.validation) {\n      value = parseInt(value);\n      if (isNaN(value) || !(value >= 0 && value <= 127)) {\n        throw new RangeError(\"The value must be an integer between 0 and 127.\");\n      }\n    }\n\n    this.send(\n      [\n        Enumerations.SYSTEM_MESSAGES.timecode,\n        value\n      ],\n      {time: options.time}\n    );\n\n    return this;\n\n  };\n\n  /**\n   * Sends a **song position** MIDI message. The value is expressed in MIDI beats (between `0` and\n   * `16383`) which are 16th note. Position `0` is always the start of the song.\n   *\n   * @param {number} [value=0] The MIDI beat to cue to (integer between `0` and `16383`).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendSongPosition(value = 0, options = {}) {\n\n    // @todo allow passing in 2-entries array for msb/lsb\n\n    value = Math.floor(value) || 0;\n\n    var msb = (value >> 7) & 0x7F;\n    var lsb = value & 0x7F;\n\n    this.send(\n      [\n        Enumerations.SYSTEM_MESSAGES.songposition,\n        msb,\n        lsb\n      ],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **song select** MIDI message.\n   *\n   * @param {number} [value=0] The number of the song to select (integer between `0` and `127`).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws The song number must be between 0 and 127.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendSongSelect(value = 0, options = {}) {\n\n    if (wm.validation) {\n\n      value = parseInt(value);\n\n      if (isNaN(value) || !(value >= 0 && value <= 127)) {\n        throw new RangeError(\"The program value must be between 0 and 127\");\n      }\n\n    }\n\n    this.send(\n      [\n        Enumerations.SYSTEM_MESSAGES.songselect,\n        value\n      ],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **tune request** real-time message.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendTuneRequest(options = {}) {\n\n    this.send(\n      [Enumerations.SYSTEM_MESSAGES.tunerequest],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **clock** real-time message. According to the standard, there are 24 MIDI clocks\n   * for every quarter note.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendClock(options = {}) {\n\n    this.send(\n      [Enumerations.SYSTEM_MESSAGES.clock],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **start** real-time message. A MIDI Start message starts the playback of the current\n   * song at beat 0. To start playback elsewhere in the song, use the\n   * [`sendContinue()`]{@link #sendContinue} method.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendStart(options = {}) {\n\n    this.send(\n      [Enumerations.SYSTEM_MESSAGES.start],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **continue** real-time message. This resumes song playback where it was previously\n   * stopped or where it was last cued with a song position message. To start playback from the\n   * start, use the [`sendStart()`]{@link Output#sendStart}` method.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendContinue(options = {}) {\n\n    this.send(\n      [Enumerations.SYSTEM_MESSAGES.continue],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **stop** real-time message. This tells the device connected to this output to stop\n   * playback immediately (or at the scheduled time, if specified).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendStop(options = {}) {\n\n    this.send(\n      [Enumerations.SYSTEM_MESSAGES.stop],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends an **active sensing** real-time message. This tells the device connected to this port\n   * that the connection is still good. Active sensing messages are often sent every 300 ms if there\n   * was no other activity on the MIDI port.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendActiveSensing(options = {}) {\n\n    this.send(\n      [Enumerations.SYSTEM_MESSAGES.activesensing],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **reset** real-time message. This tells the device connected to this output that it\n   * should reset itself to a default state.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendReset(options = {}) {\n\n    this.send(\n      [Enumerations.SYSTEM_MESSAGES.reset],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  sendTuningRequest(options = {}) {\n\n    if (wm.validation) {\n      console.warn(\n        \"The sendTuningRequest() method has been deprecated. Use sendTuningRequest() instead.\"\n      );\n    }\n\n    return this.sendTuneRequest(options);\n\n  }\n\n  /**\n   * Sends a MIDI **key aftertouch** message to the specified channel(s) at the scheduled time. This\n   * is a key-specific aftertouch. For a channel-wide aftertouch message, use\n   * [`setChannelAftertouch()`]{@link #setChannelAftertouch}.\n   *\n   * @param note {number|Note|string|number[]|Note[]|string[]} The note(s) for which you are sending\n   * an aftertouch value. The notes can be specified by using a MIDI note number (`0` - `127`), a\n   * [`Note`](Note) object, a note identifier (e.g. `C3`, `G#4`, `F-1`, `Db7`) or an array of the\n   * previous types. When using a note identifier, octave range must be between `-1` and `9`. The\n   * lowest note is `C-1` (MIDI note number `0`) and the highest note is `G9` (MIDI note number\n   * `127`).\n   *\n   * @param [pressure=0.5] {number} The pressure level (between 0 and 1). An invalid pressure value\n   * will silently trigger the default behaviour. If the `rawValue` option is set to `true`, the\n   * pressure can be defined by using an integer between 0 and 127.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered a float between `0` and `1.0` (default) or a raw integer between `0` and `127`.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendKeyAftertouch(note, pressure, options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendKeyAftertouch(note, pressure, options);\n    });\n\n    return this;\n\n  };\n\n  /**\n   * Sends a MIDI **control change** message to the specified channel(s) at the scheduled time. The\n   * control change message to send can be specified numerically (0-127) or by using one of the\n   * following common names:\n   *\n   * | Number | Name                          |\n   * |--------|-------------------------------|\n   * | 0      |`bankselectcoarse`             |\n   * | 1      |`modulationwheelcoarse`        |\n   * | 2      |`breathcontrollercoarse`       |\n   * | 4      |`footcontrollercoarse`         |\n   * | 5      |`portamentotimecoarse`         |\n   * | 6      |`dataentrycoarse`              |\n   * | 7      |`volumecoarse`                 |\n   * | 8      |`balancecoarse`                |\n   * | 10     |`pancoarse`                    |\n   * | 11     |`expressioncoarse`             |\n   * | 12     |`effectcontrol1coarse`         |\n   * | 13     |`effectcontrol2coarse`         |\n   * | 18     |`generalpurposeslider3`        |\n   * | 19     |`generalpurposeslider4`        |\n   * | 32     |`bankselectfine`               |\n   * | 33     |`modulationwheelfine`          |\n   * | 34     |`breathcontrollerfine`         |\n   * | 36     |`footcontrollerfine`           |\n   * | 37     |`portamentotimefine`           |\n   * | 38     |`dataentryfine`                |\n   * | 39     |`volumefine`                   |\n   * | 40     |`balancefine`                  |\n   * | 42     |`panfine`                      |\n   * | 43     |`expressionfine`               |\n   * | 44     |`effectcontrol1fine`           |\n   * | 45     |`effectcontrol2fine`           |\n   * | 64     |`holdpedal`                    |\n   * | 65     |`portamento`                   |\n   * | 66     |`sustenutopedal`               |\n   * | 67     |`softpedal`                    |\n   * | 68     |`legatopedal`                  |\n   * | 69     |`hold2pedal`                   |\n   * | 70     |`soundvariation`               |\n   * | 71     |`resonance`                    |\n   * | 72     |`soundreleasetime`             |\n   * | 73     |`soundattacktime`              |\n   * | 74     |`brightness`                   |\n   * | 75     |`soundcontrol6`                |\n   * | 76     |`soundcontrol7`                |\n   * | 77     |`soundcontrol8`                |\n   * | 78     |`soundcontrol9`                |\n   * | 79     |`soundcontrol10`               |\n   * | 80     |`generalpurposebutton1`        |\n   * | 81     |`generalpurposebutton2`        |\n   * | 82     |`generalpurposebutton3`        |\n   * | 83     |`generalpurposebutton4`        |\n   * | 91     |`reverblevel`                  |\n   * | 92     |`tremololevel`                 |\n   * | 93     |`choruslevel`                  |\n   * | 94     |`celestelevel`                 |\n   * | 95     |`phaserlevel`                  |\n   * | 96     |`dataincrement`                |\n   * | 97     |`datadecrement`                |\n   * | 98     |`nonregisteredparametercoarse` |\n   * | 99     |`nonregisteredparameterfine`   |\n   * | 100    |`registeredparametercoarse`    |\n   * | 101    |`registeredparameterfine`      |\n   * | 120    |`allsoundoff`                  |\n   * | 121    |`resetallcontrollers`          |\n   * | 122    |`localcontrol`                 |\n   * | 123    |`allnotesoff`                  |\n   * | 124    |`omnimodeoff`                  |\n   * | 125    |`omnimodeon`                   |\n   * | 126    |`monomodeon`                   |\n   * | 127    |`polymodeon`                   |\n   *\n   * Note: as you can see above, not all control change message have a matching name. This does not\n   * mean you cannot use the others. It simply means you will need to use their number (`0` - `127`)\n   * instead of their name. While you can still use them, numbers `120` to `127` are usually\n   * reserved for *channel mode* messages. See [`sendChannelMode()`]{@link #sendChannelMode} method\n   * for more info.\n   *\n   * To view a list of all available **control change** messages, please consult [Table 3 - Control\n   * Change Messages](https://www.midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2)\n   * from the MIDI specification.\n   *\n   * @param controller {number|string} The MIDI controller name or number (0-127).\n   *\n   * @param [value=0] {number} The value to send (0-127).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} Controller numbers must be between 0 and 127.\n   * @throws {RangeError} Invalid controller name.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendControlChange(controller, value, options = {}, legacy = {}) {\n\n    if (wm.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendControlChange(controller, value, options);\n    });\n\n    return this;\n\n  };\n\n  /**\n   * Sends a **pitch bend range** message to the specified channel(s) at the scheduled time so that\n   * they adjust the range used by their pitch bend lever. The range is specified by using the\n   * `semitones` and `cents` parameters. For example, setting the `semitones` parameter to `12`\n   * means that the pitch bend range will be 12 semitones above and below the nominal pitch.\n   *\n   * @param {number} [semitones=0] The desired adjustment value in semitones (between `0` and `127`).\n   * While nothing imposes that in the specification, it is very common for manufacturers to limit\n   * the range to 2 octaves (-12 semitones to 12 semitones).\n   *\n   * @param {number} [cents=0] The desired adjustment value in cents (integer between `0` and\n   * `127`).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The msb value must be between 0 and 127.\n   * @throws {RangeError} The lsb value must be between 0 and 127.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendPitchBendRange(semitones= 0, cents = 0, options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendPitchBendRange(semitones, cents, options);\n    });\n\n    return this;\n\n  }\n\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  setPitchBendRange(semitones = 0, cents = 0, channel = \"all\", options = {}) {\n\n    if (wm.validation) {\n\n      console.warn(\n        \"The setPitchBendRange() method is deprecated. Use sendPitchBendRange() instead.\"\n      );\n\n      options.channels = channel;\n      if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    }\n\n    return this.sendPitchBendRange(semitones, cents, options);\n\n  }\n\n  /**\n   * Sets the specified MIDI registered parameter to the desired value. The value is defined with\n   * up to two bytes of data (msb, lsb) that each can go from `0` to `127`.\n   *\n   * MIDI\n   * [registered parameters](https://www.midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2)\n   * extend the original list of control change messages. The MIDI 1.0 specification lists only a\n   * limited number of them:\n   *\n   * | Numbers      | Function                 |\n   * |--------------|--------------------------|\n   * | (0x00, 0x00) | `pitchbendrange`         |\n   * | (0x00, 0x01) | `channelfinetuning`      |\n   * | (0x00, 0x02) | `channelcoarsetuning`    |\n   * | (0x00, 0x03) | `tuningprogram`          |\n   * | (0x00, 0x04) | `tuningbank`             |\n   * | (0x00, 0x05) | `modulationrange`        |\n   * | (0x3D, 0x00) | `azimuthangle`           |\n   * | (0x3D, 0x01) | `elevationangle`         |\n   * | (0x3D, 0x02) | `gain`                   |\n   * | (0x3D, 0x03) | `distanceratio`          |\n   * | (0x3D, 0x04) | `maximumdistance`        |\n   * | (0x3D, 0x05) | `maximumdistancegain`    |\n   * | (0x3D, 0x06) | `referencedistanceratio` |\n   * | (0x3D, 0x07) | `panspreadangle`         |\n   * | (0x3D, 0x08) | `rollangle`              |\n   *\n   * Note that the `tuningprogram` and `tuningbank` parameters are part of the *MIDI Tuning\n   * Standard*, which is not widely implemented.\n   *\n   * @param parameter {string|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (e.g. `[0x65, 0x64]`) that identify the\n   * registered parameter.\n   *\n   * @param [data=[]] {number|number[]} A single integer or an array of integers with a maximum\n   * length of 2 specifying the desired data.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendRpnValue(parameter, data, options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendRpnValue(parameter, data, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  setRegisteredParameter(parameter, data = [], channel = \"all\", options = {}) {\n\n    if (wm.validation) {\n\n      console.warn(\n        \"The setRegisteredParameter() method is deprecated. Use sendRpnValue() instead.\"\n      );\n\n      options.channels = channel;\n      if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    }\n\n    return this.sendRpnValue(parameter, data, options);\n\n  }\n\n  /**\n   * Sends a MIDI **channel aftertouch** message to the specified channel(s). For key-specific\n   * aftertouch, you should instead use [`setKeyAftertouch()`]{@link #setKeyAftertouch}.\n   *\n   * @param [pressure=0.5] {number} The pressure level (between `0` and `1`). An invalid pressure\n   * value will silently trigger the default behaviour. If the `rawValue` option is set to `true`,\n   * the pressure can be defined by using an integer between `0` and `127`.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered a float between `0` and `1.0` (default) or a raw integer between `0` and `127`.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   * @since 3.0.0\n   */\n  sendChannelAftertouch(pressure, options = {}, legacy = {}) {\n\n    if (wm.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendChannelAftertouch(pressure, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **pitch bend** message to the specified channel(s) at the scheduled time.\n   *\n   * The resulting bend is relative to the pitch bend range that has been defined. The range can be\n   * set with [`sendPitchBendRange()`]{@link #sendPitchBendRange}. So, for example, if the pitch\n   * bend range has been set to 12 semitones, using a bend value of `-1` will bend the note 1 octave\n   * below its nominal value.\n   *\n   * @param {number|number[]} value The intensity of the bend (between `-1.0` and `1.0`). A value of\n   * `0` means no bend. If an invalid value is specified, the nearest valid value will be used\n   * instead. If the `rawValue` option is set to `true`, the intensity of the bend can be defined by\n   * either using a single integer between `0` and `127` (MSB) or an array of two integers between\n   * `0` and `127` representing, respectively, the MSB (most significant byte) and the LSB (least\n   * significant byte). The MSB is expressed in semitones with `64` meaning no bend. A value lower\n   * than `64` bends downwards while a value higher than `64` bends upwards. The LSB is expressed\n   * in cents (1/100 of a semitone). An LSB of `64` also means no bend.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered as a float between `-1.0` and `1.0` (default) or as raw integer between `0` and\n   * 127` (or an array of 2 integers if using both MSB and LSB).\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendPitchBend(value, options = {}, legacy = {}) {\n\n    if (wm.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendPitchBend(value, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **program change** message to the specified channel(s) at the scheduled time.\n   *\n   * @param {number} [program=0] The MIDI patch (program) number (integer between `0` and `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index 1 is greater\n   * than 0xFF.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendProgramChange(program = 0, options = {}, legacy = {}) {\n\n    if (wm.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendProgramChange(program, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **modulation depth range** message to the specified channel(s) so that they adjust the\n   * depth of their modulation wheel's range. The range can be specified with the `semitones`\n   * parameter, the `cents` parameter or by specifying both parameters at the same time.\n   *\n   * @param [semitones=0] {number} The desired adjustment value in semitones (integer between\n   * 0 and 127).\n   *\n   * @param [cents=0] {number} The desired adjustment value in cents (integer between 0 and 127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The msb value must be between 0 and 127\n   * @throws {RangeError} The lsb value must be between 0 and 127\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendModulationRange(semitones, cents, options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendModulationRange(semitones, cents, options);\n    });\n\n    return this;\n\n  };\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  setModulationRange(semitones = 0, cents = 0, channel = \"all\", options = {}) {\n\n    if (wm.validation) {\n\n      console.warn(\n        \"The setModulationRange() method is deprecated. Use sendModulationRange() instead.\"\n      );\n\n      options.channels = channel;\n      if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    }\n\n    return this.sendModulationRange(semitones, cents, options);\n\n  }\n\n  /**\n   * Sends a master tuning message to the specified channel(s). The value is decimal and must be\n   * larger than `-65` semitones and smaller than `64` semitones.\n   *\n   * Because of the way the MIDI specification works, the decimal portion of the value will be\n   * encoded with a resolution of 14bit. The integer portion must be between -64 and 63\n   * inclusively. This function actually generates two MIDI messages: a **Master Coarse Tuning** and\n   * a **Master Fine Tuning** RPN messages.\n   *\n   * @param [value=0.0] {number} The desired decimal adjustment value in semitones (-65 < x < 64)\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The value must be a decimal number between larger than -65 and smaller\n   * than 64.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendMasterTuning(value, options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendMasterTuning(value, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  setMasterTuning(value, channel = {}, options = {}) {\n\n    if (wm.validation) {\n\n      console.warn(\n        \"The setMasterTuning() method is deprecated. Use sendMasterTuning() instead.\"\n      );\n\n      options.channels = channel;\n      if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    }\n\n    return this.sendMasterTuning(value, options);\n\n  }\n\n  /**\n   * Sets the MIDI tuning program to use. Note that the **Tuning Program** parameter is part of the\n   * *MIDI Tuning Standard*, which is not widely implemented.\n   *\n   * @param value {number} The desired tuning program (integer between `0` and `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The program value must be between 0 and 127.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendTuningProgram(value, options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendTuningProgram(value, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  setTuningProgram(value, channel = \"all\", options = {}) {\n\n    if (wm.validation) {\n\n      console.warn(\n        \"The setTuningProgram() method is deprecated. Use sendTuningProgram() instead.\"\n      );\n\n      options.channels = channel;\n      if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    }\n\n    return this.sendTuningProgram(value, options);\n\n  }\n\n  /**\n   * Sets the MIDI tuning bank to use. Note that the **Tuning Bank** parameter is part of the\n   * *MIDI Tuning Standard*, which is not widely implemented.\n   *\n   * @param {number} [value=0] The desired tuning bank (integer between `0` and `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The bank value must be between 0 and 127.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendTuningBank(value= 0, options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendTuningBank(value, options);\n    });\n\n    return this;\n\n  };\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  setTuningBank(parameter, channel = \"all\", options = {}) {\n\n    if (wm.validation) {\n\n      console.warn(\n        \"The setTuningBank() method is deprecated. Use sendTuningBank() instead.\"\n      );\n\n      options.channels = channel;\n      if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    }\n\n    return this.sendTuningBank(parameter, options);\n\n  }\n\n  /**\n   * Sends a MIDI **channel mode** message to the specified channel(s). The channel mode message to\n   * send can be specified numerically or by using one of the following common names:\n   *\n   * |  Type                |Number| Shortcut Method                                               |\n   * | ---------------------|------|-------------------------------------------------------------- |\n   * | `allsoundoff`        | 120  | [`sendAllSoundOff()`]{@link #sendAllSoundOff}                 |\n   * | `resetallcontrollers`| 121  | [`sendResetAllControllers()`]{@link #sendResetAllControllers} |\n   * | `localcontrol`       | 122  | [`sendLocalControl()`]{@link #sendLocalControl}               |\n   * | `allnotesoff`        | 123  | [`sendAllNotesOff()`]{@link #sendAllNotesOff}                 |\n   * | `omnimodeoff`        | 124  | [`sendOmniMode(false)`]{@link #sendOmniMode}                  |\n   * | `omnimodeon`         | 125  | [`sendOmniMode(true)`]{@link #sendOmniMode}                   |\n   * | `monomodeon`         | 126  | [`sendPolyphonicMode(\"mono\")`]{@link #sendPolyphonicMode}     |\n   * | `polymodeon`         | 127  | [`sendPolyphonicMode(\"poly\")`]{@link #sendPolyphonicMode}     |\n   *\n   * Note: as you can see above, to make it easier, all channel mode messages also have a matching\n   * helper method.\n   *\n   * It should also be noted that, per the MIDI specification, only `localcontrol` and `monomodeon`\n   * may require a value that's not zero. For that reason, the `value` parameter is optional and\n   * defaults to 0.\n   *\n   * @param {number|string} command The numerical identifier of the channel mode message (integer\n   * between 120-127) or its name as a string.\n   *\n   * @param {number} [value=0] The value to send (integer between 0-127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Invalid channel mode message name.\n   * @throws {RangeError} Channel mode controller numbers must be between 120 and 127.\n   * @throws {RangeError} Value must be an integer between 0 and 127.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   */\n  sendChannelMode(command, value = 0, options = {}, legacy = {}) {\n\n    if (wm.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendChannelMode(command, value, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends an **all sound off** channel mode message. This will silence all sounds playing on that\n   * channel but will not prevent new sounds from being triggered.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output}\n   *\n   * @since 3.0.0\n   */\n  sendAllSoundOff(options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendAllSoundOff(options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends an **all notes off** channel mode message. This will make all currently playing notes\n   * fade out just as if their key had been released. This is different from the\n   * [`sendAllSoundOff()`]{@link #sendAllSoundOff} method which mutes all sounds immediately.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output}\n   *\n   * @since 3.0.0\n   */\n  sendAllNotesOff(options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendAllNotesOff(options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **reset all controllers** channel mode message. This resets all controllers, such as\n   * the pitch bend, to their default value.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output}\n   */\n  sendResetAllControllers(options = {}, legacy = {}) {\n\n    if (wm.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendResetAllControllers(options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sets the polyphonic mode. In `poly` mode (usually the default), multiple notes can be played\n   * and heard at the same time. In `mono` mode, only one note will be heard at once even if\n   * multiple notes are being played.\n   *\n   * @param mode {string} The mode to use: `mono` or `poly`.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendPolyphonicMode(mode, options = {}, legacy = {}) {\n\n    if (wm.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendPolyphonicMode(mode, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Turns local control on or off. Local control is usually enabled by default. If you disable it,\n   * the instrument will no longer trigger its own sounds. It will only send the MIDI messages to\n   * its out port.\n   *\n   * @param [state=false] {boolean} Whether to activate local control (`true`) or disable it\n   * (`false`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendLocalControl(state, options = {}, legacy = {}) {\n\n    if (wm.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendLocalControl(state, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sets OMNI mode to **on** or **off** for the specified channel(s). MIDI's OMNI mode causes the\n   * instrument to respond to messages from all channels.\n   *\n   * It should be noted that support for OMNI mode is not as common as it used to be.\n   *\n   * @param [state] {boolean} Whether to activate OMNI mode (`true`) or not (`false`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Invalid channel mode message name.\n   * @throws {RangeError} Channel mode controller numbers must be between 120 and 127.\n   * @throws {RangeError} Value must be an integer between 0 and 127.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendOmniMode(state, options = {}, legacy = {}) {\n\n    if (wm.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendOmniMode(state, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sets a non-registered parameter to the specified value. The NRPN is selected by passing a\n   * two-position array specifying the values of the two control bytes. The value is specified by\n   * passing a single integer (most cases) or an array of two integers.\n   *\n   * NRPNs are not standardized in any way. Each manufacturer is free to implement them any way\n   * they see fit. For example, according to the Roland GS specification, you can control the\n   * **vibrato rate** using NRPN (`1`, `8`). Therefore, to set the **vibrato rate** value to `123`\n   * you would use:\n   *\n   * ```js\n   * WebMidi.outputs[0].sendNrpnValue([1, 8], 123);\n   * ```\n   *\n   * You probably want to should select a channel so the message is not sent to all channels. For\n   * instance, to send to channel `1` of the first output port, you would use:\n   *\n   * ```js\n   * WebMidi.outputs[0].sendNrpnValue([1, 8], 123, 1);\n   * ```\n   *\n   * In some rarer cases, you need to send two values with your NRPN messages. In such cases, you\n   * would use a 2-position array. For example, for its **ClockBPM** parameter (`2`, `63`), Novation\n   * uses a 14-bit value that combines an MSB and an LSB (7-bit values). So, for example, if the\n   * value to send was `10`, you could use:\n   *\n   * ```js\n   * WebMidi.outputs[0].sendNrpnValue([2, 63], [0, 10], 1);\n   * ```\n   *\n   * For further implementation details, refer to the manufacturer's documentation.\n   *\n   * @param parameter {number[]} A two-position array specifying the two control bytes (`0x63`,\n   * `0x62`) that identify the non-registered parameter.\n   *\n   * @param [data=[]] {number|number[]} An integer or an array of integers with a length of 1 or 2\n   * specifying the desired data.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The control value must be between 0 and 127.\n   * @throws {RangeError} The msb value must be between 0 and 127\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendNrpnValue(parameter, data, options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendNrpnValue(parameter, data, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  setNonRegisteredParameter(parameter, data = [], channel = \"all\", options = {}) {\n\n    if (wm.validation) {\n\n      console.warn(\n        \"The setNonRegisteredParameter() method is deprecated. Use sendNrpnValue() instead.\"\n      );\n\n      options.channels = channel;\n      if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    }\n\n    return this.sendNrpnValue(parameter, data, options);\n\n  }\n\n  /**\n   * Increments the specified MIDI registered parameter by 1. Here is the full list of parameter\n   * names that can be used with this method:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {String|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n   * parameter.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendRpnIncrement(parameter, options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendRpnIncrement(parameter, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  incrementRegisteredParameter(parameter, channel = \"all\", options = {}) {\n\n    if (wm.validation) {\n\n      console.warn(\n        \"The incrementRegisteredParameter() method is deprecated. Use sendRpnIncrement() instead.\"\n      );\n\n      options.channels = channel;\n      if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    }\n\n    return this.sendRpnIncrement(parameter, options);\n\n  }\n\n  /**\n   * Decrements the specified MIDI registered parameter by 1. Here is the full list of parameter\n   * names that can be used with this method:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {String|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n   * parameter.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws TypeError The specified parameter is not available.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendRpnDecrement(parameter, options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendRpnDecrement(parameter, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  decrementRegisteredParameter(parameter, channel = \"all\", options = {}) {\n\n    if (wm.validation) {\n\n      console.warn(\n        \"The decrementRegisteredParameter() method is deprecated. Use sendRpnDecrement() instead.\"\n      );\n\n      options.channels = channel;\n      if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    }\n\n    return this.sendRpnDecrement(parameter, options);\n\n  }\n\n  /**\n   * Sends a **note off** message for the specified MIDI note number on the specified channel(s).\n   * The first parameter is the note to stop. It can be a single value or an array of the following\n   * valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note identifier (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A [`Note`](Note) object\n   *\n   * The execution of the **note off** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * @param note {number|Note|string|number[]|Note[]|string[]} The note(s) to stop. The notes can be\n   * specified by using a MIDI note number (`0` - `127`), a note identifier (e.g. `C3`, `G#4`,\n   * `F-1`, `Db7`) or an array of the previous types. When using a note identifier, octave range\n   * must be between `-1` and `9`. The lowest note is `C-1` (MIDI note number `0`) and the highest\n   * note is `G9` (MIDI note number `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note\n   * (between `0` and `1`).  If the `rawRelease` option is also defined, `rawRelease` will have\n   * priority. An invalid velocity value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawRelease=64] The velocity at which to release the note\n   * (between `0` and `127`). If the `release` option is also defined, `rawRelease` will have\n   * priority. An invalid velocity value will silently trigger the default of `64`.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendNoteOff(note, options= {}, legacy = {}) {\n\n    if (wm.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendNoteOff(note, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **note off** message for the specified MIDI note number on the specified channel(s).\n   * The first parameter is the note to stop. It can be a single value or an array of the following\n   * valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note identifier (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A [`Note`](Note) object\n   *\n   * The execution of the **note off** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * @param note {number|Note|string|number[]|Note[]|string[]} The note(s) to stop. The notes can be\n   * specified by using a MIDI note number (`0` - `127`), a note identifier (e.g. `C3`, `G#4`, `F-1`,\n   * `Db7`) or an array of the previous types. When using a note identifier, octave range must be\n   * between `-1` and `9`. The lowest note is `C-1` (MIDI note number `0`) and the highest note is\n   * `G9` (MIDI note number `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note\n   * (between `0` and `1`).  If the `rawRelease` option is also defined, `rawRelease` will have\n   * priority. An invalid velocity value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawRelease=64] The velocity at which to release the note\n   * (between `0` and `127`). If the `release` option is also defined, `rawRelease` will have\n   * priority. An invalid velocity value will silently trigger the default of `64`.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  stopNote(note, options) {\n    return this.sendNoteOff(note, options);\n  }\n\n  /**\n   * Plays a note or an array of notes on one or more channels of this output. If you intend to play\n   * notes on a single channel, you should probably use\n   * [`OutputChannel.playNote()`](OutputChannel#playNote) instead.\n   *\n   * The first parameter is the note to play. It can be a single value or an array of the following\n   * valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note identifier (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A [`Note`]{@link Note} object\n   *\n   * The `playNote()` method sends a **note on** MIDI message for all specified notes on all\n   * specified channels. If no channel is specified, it will send to all channels. If a `duration`\n   * is set in the `options` parameter or in the [`Note`]{@link Note} object's\n   * [`duration`]{@link Note#duration} property, it will also schedule a **note off** message to end\n   * the note after said duration. If no `duration` is set, the note will simply play until a\n   * matching **note off** message is sent with [`stopNote()`]{@link #stopNote}.\n   *\n   * The execution of the **note on** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using [`Note`]{@link Note} objects, the durations and velocities defined in the\n   * [`Note`]{@link Note} objects have precedence over the ones specified via the method's `options`\n   * parameter.\n   *\n   * **Note**: As per the MIDI standard, a **note on** message with an attack velocity of `0` is\n   * functionally equivalent to a **note off** message.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to play. The notes can be\n   * specified by using a MIDI note number (0-127), a note identifier (e.g. C3, G#4, F-1, Db7), a\n   * [`Note`]{@link Note} object or an array of the previous types. When using a note identifier,\n   * octave range must be between -1 and 9. The lowest note is C-1 (MIDI note number `0`) and the\n   * highest note is G9 (MIDI note number `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number} [options.duration=undefined] The number of milliseconds after which a\n   * **note off** message will be scheduled. If left undefined, only a **note on** message is sent.\n   *\n   * @param {number} [options.attack=0.5] The velocity at which to play the note (between `0` and\n   * `1`). If the `rawAttack` option is also defined, it will have priority. An invalid velocity\n   * value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawAttack=64] The attack velocity at which to play the note (between\n   * `0` and `127`). This has priority over the `attack` property. An invalid velocity value will\n   * silently trigger the default of 64.\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note (between `0`\n   * and `1`). If the `rawRelease` option is also defined, it will have priority. An invalid\n   * velocity value will silently trigger the default of `0.5`. This is only used with the\n   * **note off** event triggered when `options.duration` is set.\n   *\n   * @param {number} [options.rawRelease=64] The velocity at which to release the note (between `0`\n   * and `127`). This has priority over the `release` property. An invalid velocity value will\n   * silently trigger the default of 64. This is only used with the **note off** event triggered\n   * when `options.duration` is set.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  playNote(note, options = {}, legacy = {}) {\n\n    if (wm.validation) {\n\n      // Legacy-compatibility warnings\n      if (options.rawVelocity) {\n        console.warn(\"The 'rawVelocity' option is deprecated. Use 'rawAttack' instead.\");\n      }\n\n      if (options.velocity) {\n        console.warn(\"The 'velocity' option is deprecated. Use 'velocity' instead.\");\n      }\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].playNote(note, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **note on** message for the specified MIDI note number on the specified channel(s). The\n   * first parameter is the number. It can be a single value or an array of the following valid\n   * values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note identifier (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A [`Note`](Note) object\n   *\n   *  The execution of the **note on** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * **Note**: As per the MIDI standard, a **note on** message with an attack velocity of `0` is\n   * functionally equivalent to a **note off** message.\n   *\n   * @param note {number|Note|string|number[]|Note[]|string[]} The note(s) to stop. The notes can be\n   * specified by using a MIDI note number (`0` - `127`), a note identifier (e.g. `C3`, `G#4`, `F-1`,\n   * `Db7`) or an array of the previous types. When using a note identifier, octave range must be\n   * between `-1` and `9`. The lowest note is `C-1` (MIDI note number `0`) and the highest note is\n   * `G9` (MIDI note number `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number} [options.attack=0.5] The velocity at which to play the note (between `0` and\n   * `1`).  If the `rawAttack` option is also defined, `rawAttack` will have priority. An invalid\n   * velocity value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawAttack=64] The velocity at which to release the note (between `0`\n   * and `127`). If the `attack` option is also defined, `rawAttack` will have priority. An invalid\n   * velocity value will silently trigger the default of `64`.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendNoteOn(note, options = {}, legacy = {}) {\n\n    if (wm.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    // This actually supports passing a Note object even if, semantically, this does not make sense.\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendNoteOn(note, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Name of the MIDI output.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get name() {\n    return this._midiOutput.name;\n  }\n\n  /**\n   * ID string of the MIDI output. The ID is host-specific. Do not expect the same ID on different\n   * platforms. For example, Google Chrome and the Jazz-Plugin report completely different IDs for\n   * the same port.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get id() {\n    return this._midiOutput.id;\n  }\n\n  /**\n   * Output port's connection state: `pending`, `open` or `closed`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get connection() {\n    return this._midiOutput.connection;\n  }\n\n  /**\n   * Name of the manufacturer of the device that makes this output port available.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get manufacturer() {\n    return this._midiOutput.manufacturer;\n  }\n\n  /**\n   * State of the output port: `connected` or `disconnected`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get state() {\n    return this._midiOutput.state;\n  }\n\n  /**\n   * Type of the output port (it will always be: `output`).\n   *\n   * @type {string}\n   * @readonly\n   */\n  get type() {\n    return this._midiOutput.type;\n  }\n\n  /**\n   * An integer to offset the octave of outgoing notes. By default, middle C (MIDI note number 60)\n   * is placed on the 4th octave (C4).\n   *\n   * Note that this value is combined with the global offset value defined in\n   * [`WebMidi.octaveOffset`](WebMidi#octaveOffset) (if any).\n   *\n   * @type {number}\n   *\n   * @since 3.0\n   */\n  get octaveOffset() {\n    return this._octaveOffset;\n  }\n  set octaveOffset(value) {\n\n    if (this.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n    }\n\n    this._octaveOffset = value;\n\n  }\n\n}\n\n/**\n * The `Forwarder` class allows the forwarding of MIDI messages to predetermined outputs. When you\n * call its [`forward()`](#forward) method, it will send the specified [`Message`](Message) object\n * to all the outputs listed in its [`destinations`](#destinations) property.\n *\n * If specific channels or message types have been defined in the [`channels`](#channels) or\n * [`types`](#types) properties, only messages matching the channels/types will be forwarded.\n *\n * While it can be manually instantiated, you are more likely to come across a `Forwarder` object as\n * the return value of the [`Input.addForwarder()`](Input#addForwarder) method.\n *\n * @license Apache-2.0\n * @since 3.0.0\n */\nclass Forwarder {\n\n  /**\n   * Creates a `Forwarder` object.\n   *\n   * @param {Output|Output[]} [destinations=\\[\\]] An [`Output`](Output) object, or an array of such\n   * objects, to forward the message to.\n   *\n   * @param {object} [options={}]\n   * @param {string|string[]} [options.types=(all messages)] A MIDI message type or an array of such\n   * types (`\"noteon\"`, `\"controlchange\"`, etc.), that the specified message must match in order to\n   * be forwarded. If this option is not specified, all types of messages will be forwarded. Valid\n   * messages are the ones found in either\n   * [`SYSTEM_MESSAGES`](Enumerations#SYSTEM_MESSAGES)\n   * or [`CHANNEL_MESSAGES`](Enumerations#CHANNEL_MESSAGES).\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * A MIDI channel number or an array of channel numbers that the message must match in order to be\n   * forwarded. By default all MIDI channels are included (`1` to `16`).\n   */\n  constructor(destinations = [], options = {}) {\n\n    /**\n     * An array of [`Output`](Output) objects to forward the message to.\n     * @type {Output[]}\n     */\n    this.destinations = [];\n\n    /**\n     * An array of message types (`\"noteon\"`, `\"controlchange\"`, etc.) that must be matched in order\n     * for messages to be forwarded. By default, this array includes all\n     * [`Enumerations.SYSTEM_MESSAGES`](Enumerations#SYSTEM_MESSAGES) and\n     * [`Enumerations.CHANNEL_MESSAGES`](Enumerations#CHANNEL_MESSAGES).\n     * @type {string[]}\n     */\n    this.types = [\n      ...Object.keys(Enumerations.SYSTEM_MESSAGES),\n      ...Object.keys(Enumerations.CHANNEL_MESSAGES)\n    ];\n\n    /**\n     * An array of MIDI channel numbers that the message must match in order to be forwarded. By\n     * default, this array includes all MIDI channels (`1` to `16`).\n     * @type {number[]}\n     */\n    this.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    /**\n     * Indicates whether message forwarding is currently suspended or not in this forwarder.\n     * @type {boolean}\n     */\n    this.suspended = false;\n\n    // Make sure parameters are arrays\n    if (!Array.isArray(destinations)) destinations = [destinations];\n    if (options.types && !Array.isArray(options.types)) options.types = [options.types];\n    if (options.channels && !Array.isArray(options.channels)) options.channels = [options.channels];\n\n    if (wm.validation) {\n\n      // Validate destinations\n      destinations.forEach(destination => {\n        if ( !(destination instanceof Output) ) {\n          throw new TypeError(\"Destinations must be of type 'Output'.\");\n        }\n      });\n\n      // Validate types\n      if (options.types !== undefined) {\n\n        options.types.forEach(type => {\n          if (\n            ! Enumerations.SYSTEM_MESSAGES.hasOwnProperty(type) &&\n            ! Enumerations.CHANNEL_MESSAGES.hasOwnProperty(type)\n          ) {\n            throw new TypeError(\"Type must be a valid message type.\");\n          }\n        });\n\n      }\n\n      // Validate channels\n      if (options.channels !== undefined) {\n\n        options.channels.forEach(channel => {\n          if (! Enumerations.MIDI_CHANNEL_NUMBERS.includes(channel) ) {\n            throw new TypeError(\"MIDI channel must be between 1 and 16.\");\n          }\n        });\n\n      }\n\n    }\n\n    this.destinations = destinations;\n    if (options.types) this.types = options.types;\n    if (options.channels) this.channels = options.channels;\n\n  }\n\n  /**\n   * Sends the specified message to the forwarder's destination(s) if it matches the specified\n   * type(s) and channel(s).\n   *\n   * @param {Message} message The [`Message`](Message) object to forward.\n   */\n  forward(message) {\n\n    // Abort if forwarding is currently suspended\n    if (this.suspended) return;\n\n    // Abort if this message type should not be forwarded\n    if (!this.types.includes(message.type)) return;\n\n    // Abort if this channel should not be forwarded\n    if (message.channel && !this.channels.includes(message.channel)) return;\n\n    // Forward\n    this.destinations.forEach(destination => {\n      if (wm.validation && !(destination instanceof Output)) return;\n      destination.send(message);\n    });\n\n  }\n\n}\n\n/**\n * The `InputChannel` class represents a single MIDI input channel (1-16) from a single input\n * device. This object is derived from the host's MIDI subsystem and should not be instantiated\n * directly.\n *\n * All 16 `InputChannel` objects can be found inside the input's [`channels`](Input#channels)\n * property.\n *\n * @fires InputChannel#midimessage\n * @fires InputChannel#unknownmessage\n *\n * @fires InputChannel#noteoff\n * @fires InputChannel#noteon\n * @fires InputChannel#keyaftertouch\n * @fires InputChannel#programchange\n * @fires InputChannel#channelaftertouch\n * @fires InputChannel#pitchbend\n *\n * @fires InputChannel#allnotesoff\n * @fires InputChannel#allsoundoff\n * @fires InputChannel#localcontrol\n * @fires InputChannel#monomode\n * @fires InputChannel#omnimode\n * @fires InputChannel#resetallcontrollers\n *\n * @fires InputChannel#event:nrpn\n * @fires InputChannel#event:nrpn-dataentrycoarse\n * @fires InputChannel#event:nrpn-dataentryfine\n * @fires InputChannel#event:nrpn-dataincrement\n * @fires InputChannel#event:nrpn-datadecrement\n * @fires InputChannel#event:rpn\n * @fires InputChannel#event:rpn-dataentrycoarse\n * @fires InputChannel#event:rpn-dataentryfine\n * @fires InputChannel#event:rpn-dataincrement\n * @fires InputChannel#event:rpn-datadecrement\n *\n * @fires InputChannel#controlchange\n * @fires InputChannel#event:controlchange-controllerxxx\n * @fires InputChannel#event:controlchange-bankselectcoarse\n * @fires InputChannel#event:controlchange-modulationwheelcoarse\n * @fires InputChannel#event:controlchange-breathcontrollercoarse\n * @fires InputChannel#event:controlchange-footcontrollercoarse\n * @fires InputChannel#event:controlchange-portamentotimecoarse\n * @fires InputChannel#event:controlchange-dataentrycoarse\n * @fires InputChannel#event:controlchange-volumecoarse\n * @fires InputChannel#event:controlchange-balancecoarse\n * @fires InputChannel#event:controlchange-pancoarse\n * @fires InputChannel#event:controlchange-expressioncoarse\n * @fires InputChannel#event:controlchange-effectcontrol1coarse\n * @fires InputChannel#event:controlchange-effectcontrol2coarse\n * @fires InputChannel#event:controlchange-generalpurposecontroller1\n * @fires InputChannel#event:controlchange-generalpurposecontroller2\n * @fires InputChannel#event:controlchange-generalpurposecontroller3\n * @fires InputChannel#event:controlchange-generalpurposecontroller4\n * @fires InputChannel#event:controlchange-bankselectfine\n * @fires InputChannel#event:controlchange-modulationwheelfine\n * @fires InputChannel#event:controlchange-breathcontrollerfine\n * @fires InputChannel#event:controlchange-footcontrollerfine\n * @fires InputChannel#event:controlchange-portamentotimefine\n * @fires InputChannel#event:controlchange-dataentryfine\n * @fires InputChannel#event:controlchange-channelvolumefine\n * @fires InputChannel#event:controlchange-balancefine\n * @fires InputChannel#event:controlchange-panfine\n * @fires InputChannel#event:controlchange-expressionfine\n * @fires InputChannel#event:controlchange-effectcontrol1fine\n * @fires InputChannel#event:controlchange-effectcontrol2fine\n * @fires InputChannel#event:controlchange-damperpedal\n * @fires InputChannel#event:controlchange-portamento\n * @fires InputChannel#event:controlchange-sostenuto\n * @fires InputChannel#event:controlchange-softpedal\n * @fires InputChannel#event:controlchange-legatopedal\n * @fires InputChannel#event:controlchange-hold2\n * @fires InputChannel#event:controlchange-soundvariation\n * @fires InputChannel#event:controlchange-resonance\n * @fires InputChannel#event:controlchange-releasetime\n * @fires InputChannel#event:controlchange-attacktime\n * @fires InputChannel#event:controlchange-brightness\n * @fires InputChannel#event:controlchange-decaytime\n * @fires InputChannel#event:controlchange-vibratorate\n * @fires InputChannel#event:controlchange-vibratodepth\n * @fires InputChannel#event:controlchange-vibratodelay\n * @fires InputChannel#event:controlchange-generalpurposecontroller5\n * @fires InputChannel#event:controlchange-generalpurposecontroller6\n * @fires InputChannel#event:controlchange-generalpurposecontroller7\n * @fires InputChannel#event:controlchange-generalpurposecontroller8\n * @fires InputChannel#event:controlchange-portamentocontrol\n * @fires InputChannel#event:controlchange-highresolutionvelocityprefix\n * @fires InputChannel#event:controlchange-effect1depth\n * @fires InputChannel#event:controlchange-effect2depth\n * @fires InputChannel#event:controlchange-effect3depth\n * @fires InputChannel#event:controlchange-effect4depth\n * @fires InputChannel#event:controlchange-effect5depth\n * @fires InputChannel#event:controlchange-dataincrement\n * @fires InputChannel#event:controlchange-datadecrement\n * @fires InputChannel#event:controlchange-nonregisteredparameterfine\n * @fires InputChannel#event:controlchange-nonregisteredparametercoarse\n * @fires InputChannel#event:controlchange-registeredparameterfine\n * @fires InputChannel#event:controlchange-registeredparametercoarse\n * @fires InputChannel#event:controlchange-allsoundoff\n * @fires InputChannel#event:controlchange-resetallcontrollers\n * @fires InputChannel#event:controlchange-localcontrol\n * @fires InputChannel#event:controlchange-allnotesoff\n * @fires InputChannel#event:controlchange-omnimodeoff\n * @fires InputChannel#event:controlchange-omnimodeon\n * @fires InputChannel#event:controlchange-monomodeon\n * @fires InputChannel#event:controlchange-polymodeon\n * @fires InputChannel#event:\n *\n * @extends EventEmitter\n * @license Apache-2.0\n * @since 3.0.0\n */\nclass InputChannel extends EventEmitter {\n\n  /**\n   * Creates an `InputChannel` object.\n   *\n   * @param {Input} input The [`Input`](Input) object this channel belongs to.\n   * @param {number} number The channel's MIDI number (1-16).\n   */\n  constructor(input, number) {\n\n    super();\n\n    /**\n     * @type {Input}\n     * @private\n     */\n    this._input = input;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._number = number;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._octaveOffset = 0;\n\n    /**\n     * An array of messages that form the current NRPN sequence\n     * @private\n     * @type {Message[]}\n     */\n    this._nrpnBuffer = [];\n\n    /**\n     * An array of messages that form the current RPN sequence\n     * @private\n     * @type {Message[]}\n     */\n    this._rpnBuffer = [];\n\n    /**\n     * Indicates whether events for **Registered Parameter Number** and **Non-Registered Parameter\n     * Number** should be dispatched. RPNs and NRPNs are composed of a sequence of specific\n     * **control change** messages. When a valid sequence of such control change messages is\n     * received, an [`rpn`](#event-rpn) or [`nrpn`](#event-nrpn) event will fire.\n     *\n     * If an invalid or out-of-order **control change** message is received, it will fall through\n     * the collector logic and all buffered **control change** messages will be discarded as\n     * incomplete.\n     *\n     * @type {boolean}\n     */\n    this.parameterNumberEventsEnabled = true;\n\n    /**\n     * Contains the current playing state of all MIDI notes of this channel (0-127). The state is\n     * `true` for a currently playing note and `false` otherwise.\n     * @type {boolean[]}\n     */\n    this.notesState = new Array(128).fill(false);\n\n  }\n\n  /**\n   * Destroys the `InputChannel` by removing all listeners and severing the link with the MIDI\n   * subsystem's input.\n   */\n  destroy() {\n    this._input = null;\n    this._number = null;\n    this._octaveOffset = 0;\n    this._nrpnBuffer = [];\n    this.notesState = new Array(128).fill(false);\n    this.parameterNumberEventsEnabled = false;\n    this.removeListener();\n  }\n\n  /**\n   * @param e MIDIMessageEvent\n   * @private\n   */\n  _processMidiMessageEvent(e) {\n\n    // Create and emit a new 'midimessage' event based on the incoming one\n    const event = Object.assign({}, e);\n    event.port = this.input;\n    event.target = this;\n    event.type = \"midimessage\";\n\n    /**\n     * Event emitted when a MIDI message of any kind is received by an `InputChannel`\n     *\n     * @event InputChannel#midimessage\n     *\n     * @type {object}\n     *\n     * @property {string} type `midimessage`\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     */\n    this.emit(event.type, event);\n\n    // Parse the inbound event for regular MIDI messages\n    this._parseEventForStandardMessages(event);\n\n  }\n\n  /**\n   * Parses incoming channel events and emit standard MIDI message events (noteon, noteoff, etc.)\n   * @param e Event\n   * @private\n   */\n  _parseEventForStandardMessages(e) {\n\n    const event = Object.assign({}, e);\n    event.type = event.message.type || \"unknownmessage\";\n\n    const data1 = e.message.dataBytes[0];\n    const data2 = e.message.dataBytes[1];\n\n    if ( event.type === \"noteoff\" || (event.type === \"noteon\" && data2 === 0) ) {\n\n      this.notesState[data1] = false;\n      event.type = \"noteoff\"; // necessary for note on with 0 velocity\n\n      /**\n       * Event emitted when a **note off** MIDI message has been received on the channel.\n       *\n       * @event InputChannel#noteoff\n       *\n       * @type {object}\n       * @property {string} type `noteoff`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the incoming\n       * MIDI message.\n       * @property {number} timestamp The moment\n       * ([`DOMHighResTimeStamp`](https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp))\n       * when the event occurred (in milliseconds since the navigation start of the document).\n       *\n       * @property {object} note A [`Note`](Note) object containing information such as note name,\n       * octave and release velocity.\n       * @property {number} value The release velocity amount expressed as a float between 0 and 1.\n       * @property {number} rawValue The release velocity amount expressed as an integer (between 0\n       * and 127).\n       */\n\n      // The object created when a noteoff event arrives is a Note with an attack velocity of 0.\n      event.note = new Note(\n        Utilities.offsetNumber(\n          data1, this.octaveOffset + this.input.octaveOffset + wm.octaveOffset\n        ),\n        {\n          rawAttack: 0,\n          rawRelease: data2,\n        }\n      );\n\n      event.value = Utilities.from7bitToFloat(data2);\n      event.rawValue = data2;\n\n      // Those are kept for backwards-compatibility but are gone from the documentation. They will\n      // be removed in future versions (@deprecated).\n      event.velocity = event.note.release;\n      event.rawVelocity = event.note.rawRelease;\n\n    } else if (event.type === \"noteon\") {\n\n      this.notesState[data1] = true;\n\n      /**\n       * Event emitted when a **note on** MIDI message has been received.\n       *\n       * @event InputChannel#noteon\n       *\n       * @type {object}\n       * @property {string} type `noteon`\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} note A [`Note`](Note) object containing information such as note name,\n       * octave and release velocity.\n       * @property {number} value The attack velocity amount expressed as a float between 0 and 1.\n       * @property {number} rawValue The attack velocity amount expressed as an integer (between 0\n       * and 127).\n       */\n      event.note = new Note(\n        Utilities.offsetNumber(\n          data1, this.octaveOffset + this.input.octaveOffset + wm.octaveOffset\n        ),\n        { rawAttack: data2 }\n      );\n\n      event.value = Utilities.from7bitToFloat(data2);\n      event.rawValue = data2;\n\n      // Those are kept for backwards-compatibility but are gone from the documentation. They will\n      // be removed in future versions (@deprecated).\n      event.velocity = event.note.attack;\n      event.rawVelocity = event.note.rawAttack;\n\n    } else if (event.type === \"keyaftertouch\") {\n\n      /**\n       * Event emitted when a **key-specific aftertouch** MIDI message has been received.\n       *\n       * @event InputChannel#keyaftertouch\n       *\n       * @type {object}\n       * @property {string} type `\"keyaftertouch\"`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} note A [`Note`](Note) object containing information such as note name\n       * and number.\n       * @property {number} value The aftertouch amount expressed as a float between 0 and 1.\n       * @property {number} rawValue The aftertouch amount expressed as an integer (between 0 and\n       * 127).\n       */\n      event.note = new Note(\n        Utilities.offsetNumber(\n          data1, this.octaveOffset + this.input.octaveOffset + wm.octaveOffset\n        )\n      );\n\n      // Aftertouch value\n      event.value = Utilities.from7bitToFloat(data2);\n      event.rawValue = data2;\n\n      // @deprecated\n      event.identifier = event.note.identifier;\n      event.key = event.note.number;\n      event.rawKey = data1;\n\n    } else if (event.type === \"controlchange\") {\n\n      /**\n       * Event emitted when a **control change** MIDI message has been received.\n       *\n       * @event InputChannel#controlchange\n       *\n       * @type {object}\n       * @property {string} type `controlchange`\n       * @property {string} subtype The type of control change message that was received.\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n      event.controller = {\n        number: data1,\n        name: Enumerations.CONTROL_CHANGE_MESSAGES[data1].name,\n        description: Enumerations.CONTROL_CHANGE_MESSAGES[data1].description,\n        position: Enumerations.CONTROL_CHANGE_MESSAGES[data1].position,\n      };\n\n      event.subtype = event.controller.name || \"controller\" + data1;\n      event.value = Utilities.from7bitToFloat(data2);\n      event.rawValue = data2;\n\n      /**\n       * Event emitted when a **control change** MIDI message has been received and that message is\n       * targeting the controller numbered \"xxx\". Of course, \"xxx\" should be replaced by a valid\n       * controller number (0-127).\n       *\n       * @event InputChannel#controlchange-controllerxxx\n       *\n       * @type {object}\n       * @property {string} type `controlchange-controllerxxx`\n       * @property {string} subtype The type of control change message that was received.\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n      const numberedEvent = Object.assign({}, event);\n      numberedEvent.type = `${event.type}-controller${data1}`;\n      delete numberedEvent.subtype;\n      this.emit(numberedEvent.type, numberedEvent);\n\n      /**\n       * Event emitted when a **controlchange-bankselectcoarse** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-bankselectcoarse\n       *\n       * @type {object}\n       * @property {string} type `controlchange-bankselectcoarse`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-modulationwheelcoarse** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-modulationwheelcoarse\n       *\n       * @type {object}\n       * @property {string} type `controlchange-modulationwheelcoarse`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-breathcontrollercoarse** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-breathcontrollercoarse\n       *\n       * @type {object}\n       * @property {string} type `controlchange-breathcontrollercoarse`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-footcontrollercoarse** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-footcontrollercoarse\n       *\n       * @type {object}\n       * @property {string} type `controlchange-footcontrollercoarse`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-portamentotimecoarse** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-portamentotimecoarse\n       *\n       * @type {object}\n       * @property {string} type `controlchange-portamentotimecoarse`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-dataentrycoarse** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-dataentrycoarse\n       *\n       * @type {object}\n       * @property {string} type `controlchange-dataentrycoarse`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-volumecoarse** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-volumecoarse\n       *\n       * @type {object}\n       * @property {string} type `controlchange-volumecoarse`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-balancecoarse** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-balancecoarse\n       *\n       * @type {object}\n       * @property {string} type `controlchange-balancecoarse`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-pancoarse** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-pancoarse\n       *\n       * @type {object}\n       * @property {string} type `controlchange-pancoarse`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-expressioncoarse** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-expressioncoarse\n       *\n       * @type {object}\n       * @property {string} type `controlchange-expressioncoarse`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-effectcontrol1coarse** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-effectcontrol1coarse\n       *\n       * @type {object}\n       * @property {string} type `controlchange-effectcontrol1coarse`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-effectcontrol2coarse** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-effectcontrol2coarse\n       *\n       * @type {object}\n       * @property {string} type `controlchange-effectcontrol2coarse`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-generalpurposecontroller1** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-generalpurposecontroller1\n       *\n       * @type {object}\n       * @property {string} type `controlchange-generalpurposecontroller1`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-generalpurposecontroller2** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-generalpurposecontroller2\n       *\n       * @type {object}\n       * @property {string} type `controlchange-generalpurposecontroller2`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-generalpurposecontroller3** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-generalpurposecontroller3\n       *\n       * @type {object}\n       * @property {string} type `controlchange-generalpurposecontroller3`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-generalpurposecontroller4** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-generalpurposecontroller4\n       *\n       * @type {object}\n       * @property {string} type `controlchange-generalpurposecontroller4`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-bankselectfine** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-bankselectfine\n       *\n       * @type {object}\n       * @property {string} type `controlchange-bankselectfine`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-modulationwheelfine** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-modulationwheelfine\n       *\n       * @type {object}\n       * @property {string} type `controlchange-modulationwheelfine`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-breathcontrollerfine** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-breathcontrollerfine\n       *\n       * @type {object}\n       * @property {string} type `controlchange-breathcontrollerfine`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-footcontrollerfine** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-footcontrollerfine\n       *\n       * @type {object}\n       * @property {string} type `controlchange-footcontrollerfine`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-portamentotimefine** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-portamentotimefine\n       *\n       * @type {object}\n       * @property {string} type `controlchange-portamentotimefine`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-dataentryfine** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-dataentryfine\n       *\n       * @type {object}\n       * @property {string} type `controlchange-dataentryfine`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-channelvolumefine** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-channelvolumefine\n       *\n       * @type {object}\n       * @property {string} type `controlchange-channelvolumefine`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-balancefine** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-balancefine\n       *\n       * @type {object}\n       * @property {string} type `controlchange-balancefine`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-panfine** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-panfine\n       *\n       * @type {object}\n       * @property {string} type `controlchange-panfine`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-expressionfine** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-expressionfine\n       *\n       * @type {object}\n       * @property {string} type `controlchange-expressionfine`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-effectcontrol1fine** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-effectcontrol1fine\n       *\n       * @type {object}\n       * @property {string} type `controlchange-effectcontrol1fine`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-effectcontrol2fine** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-effectcontrol2fine\n       *\n       * @type {object}\n       * @property {string} type `controlchange-effectcontrol2fine`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-damperpedal** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-damperpedal\n       *\n       * @type {object}\n       * @property {string} type `controlchange-damperpedal`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-portamento** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-portamento\n       *\n       * @type {object}\n       * @property {string} type `controlchange-portamento`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-sostenuto** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-sostenuto\n       *\n       * @type {object}\n       * @property {string} type `controlchange-sostenuto`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-softpedal** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-softpedal\n       *\n       * @type {object}\n       * @property {string} type `controlchange-softpedal`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-legatopedal** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-legatopedal\n       *\n       * @type {object}\n       * @property {string} type `controlchange-legatopedal`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-hold2** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-hold2\n       *\n       * @type {object}\n       * @property {string} type `controlchange-hold2`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-soundvariation** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-soundvariation\n       *\n       * @type {object}\n       * @property {string} type `controlchange-soundvariation`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-resonance** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-resonance\n       *\n       * @type {object}\n       * @property {string} type `controlchange-resonance`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-releasetime** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-releasetime\n       *\n       * @type {object}\n       * @property {string} type `controlchange-releasetime`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-attacktime** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-attacktime\n       *\n       * @type {object}\n       * @property {string} type `controlchange-attacktime`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-brightness** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-brightness\n       *\n       * @type {object}\n       * @property {string} type `controlchange-brightness`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-decaytime** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-decaytime\n       *\n       * @type {object}\n       * @property {string} type `controlchange-decaytime`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-vibratorate** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-vibratorate\n       *\n       * @type {object}\n       * @property {string} type `controlchange-vibratorate`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-vibratodepth** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-vibratodepth\n       *\n       * @type {object}\n       * @property {string} type `controlchange-vibratodepth`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-vibratodelay** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-vibratodelay\n       *\n       * @type {object}\n       * @property {string} type `controlchange-vibratodelay`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-generalpurposecontroller5** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-generalpurposecontroller5\n       *\n       * @type {object}\n       * @property {string} type `controlchange-generalpurposecontroller5`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-generalpurposecontroller6** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-generalpurposecontroller6\n       *\n       * @type {object}\n       * @property {string} type `controlchange-generalpurposecontroller6`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-generalpurposecontroller7** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-generalpurposecontroller7\n       *\n       * @type {object}\n       * @property {string} type `controlchange-generalpurposecontroller7`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-generalpurposecontroller8** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-generalpurposecontroller8\n       *\n       * @type {object}\n       * @property {string} type `controlchange-generalpurposecontroller8`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-portamentocontrol** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-portamentocontrol\n       *\n       * @type {object}\n       * @property {string} type `controlchange-portamentocontrol`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-highresolutionvelocityprefix** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-highresolutionvelocityprefix\n       *\n       * @type {object}\n       * @property {string} type `controlchange-highresolutionvelocityprefix`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-effect1depth** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-effect1depth\n       *\n       * @type {object}\n       * @property {string} type `controlchange-effect1depth`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-effect2depth** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-effect2depth\n       *\n       * @type {object}\n       * @property {string} type `controlchange-effect2depth`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-effect3depth** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-effect3depth\n       *\n       * @type {object}\n       * @property {string} type `controlchange-effect3depth`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-effect4depth** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-effect4depth\n       *\n       * @type {object}\n       * @property {string} type `controlchange-effect4depth`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-effect5depth** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-effect5depth\n       *\n       * @type {object}\n       * @property {string} type `controlchange-effect5depth`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-dataincrement** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-dataincrement\n       *\n       * @type {object}\n       * @property {string} type `controlchange-dataincrement`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-datadecrement** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-datadecrement\n       *\n       * @type {object}\n       * @property {string} type `controlchange-datadecrement`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-nonregisteredparameterfine** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-nonregisteredparameterfine\n       *\n       * @type {object}\n       * @property {string} type `controlchange-nonregisteredparameterfine`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-nonregisteredparametercoarse** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-nonregisteredparametercoarse\n       *\n       * @type {object}\n       * @property {string} type `controlchange-nonregisteredparametercoarse`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-registeredparameterfine** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-registeredparameterfine\n       *\n       * @type {object}\n       * @property {string} type `controlchange-registeredparameterfine`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-registeredparametercoarse** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-registeredparametercoarse\n       *\n       * @type {object}\n       * @property {string} type `controlchange-registeredparametercoarse`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-allsoundoff** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-allsoundoff\n       *\n       * @type {object}\n       * @property {string} type `controlchange-allsoundoff`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-resetallcontrollers** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-resetallcontrollers\n       *\n       * @type {object}\n       * @property {string} type `controlchange-resetallcontrollers`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-localcontrol** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-localcontrol\n       *\n       * @type {object}\n       * @property {string} type `controlchange-localcontrol`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-allnotesoff** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-allnotesoff\n       *\n       * @type {object}\n       * @property {string} type `controlchange-allnotesoff`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-omnimodeoff** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-omnimodeoff\n       *\n       * @type {object}\n       * @property {string} type `controlchange-omnimodeoff`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-omnimodeon** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-omnimodeon\n       *\n       * @type {object}\n       * @property {string} type `controlchange-omnimodeon`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-monomodeon** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-monomodeon\n       *\n       * @type {object}\n       * @property {string} type `controlchange-monomodeon`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      /**\n       * Event emitted when a **controlchange-polymodeon** MIDI message has been\n       * received.\n       *\n       * @event InputChannel#controlchange-polymodeon\n       *\n       * @type {object}\n       * @property {string} type `controlchange-polymodeon`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {object} controller.description A user-friendly representation of the\n       * controller's default function\n       * @property {string} controller.position Whether the controller is meant to be an `msb` or `lsb`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n\n      const namedEvent = Object.assign({}, event);\n      namedEvent.type = `${event.type}-` + Enumerations.CONTROL_CHANGE_MESSAGES[data1].name;\n      delete namedEvent.subtype;\n\n      // Dispatch controlchange-\"function\" events only if the \"function\" is defined (not the generic\n      // controllerXXX nomenclature)\n      if (namedEvent.type.indexOf(\"controller\") !== 0) {\n        this.emit(namedEvent.type, namedEvent);\n      }\n\n      // Trigger channel mode message events (if appropriate)\n      if (event.message.dataBytes[0] >= 120) this._parseChannelModeMessage(event);\n\n      // Parse the inbound event to see if its part of an RPN/NRPN sequence\n      if (\n        this.parameterNumberEventsEnabled &&\n        this._isRpnOrNrpnController(event.message.dataBytes[0])\n      ) {\n        this._parseEventForParameterNumber(event);\n      }\n\n    } else if (event.type === \"programchange\") {\n\n      /**\n       * Event emitted when a **program change** MIDI message has been received.\n       *\n       * @event InputChannel#programchange\n       *\n       * @type {object}\n       * @property {string} type `programchange`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {number} value The value expressed as an integer between 0 and 127.\n       * @property {number} rawValue  The raw MIDI value expressed as an integer between 0 and 127.\n       */\n      event.value = data1;\n      event.rawValue = event.value;\n\n    } else if (event.type === \"channelaftertouch\") {\n\n      /**\n       * Event emitted when a control change MIDI message has been received.\n       *\n       * @event InputChannel#channelaftertouch\n       *\n       * @type {object}\n       * @property {string} type `channelaftertouch`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The raw MIDI value expressed as an integer between 0 and 127.\n       */\n      event.value = Utilities.from7bitToFloat(data1);\n      event.rawValue = data1;\n\n    } else if (event.type === \"pitchbend\") {\n\n      /**\n       * Event emitted when a pitch bend MIDI message has been received.\n       *\n       * @event InputChannel#pitchbend\n       *\n       * @type {object}\n       * @property {string} type `pitchbend`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The raw MIDI value expressed as an integer (between 0 and\n       * 16383).\n       */\n      event.value = ((data2 << 7) + data1 - 8192) / 8192;\n      event.rawValue = (data2 << 7) + data1;\n\n    } else {\n      event.type = \"unknownmessage\";\n    }\n\n    this.emit(event.type, event);\n\n  }\n\n  /**\n   * @param e {Object}\n   * @private\n   */\n  _parseChannelModeMessage(e) {\n\n    // Make a shallow copy of the incoming event so we can use it as the new event.\n    const event = Object.assign({}, e);\n    event.type = event.controller.name;\n\n    /**\n     * Event emitted when an \"all sound off\" channel-mode MIDI message has been received.\n     *\n     * @event InputChannel#allsoundoff\n     *\n     * @type {object}\n     * @property {string} type `allsoundoff`\n     *\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     */\n\n    /**\n     * Event emitted when a \"reset all controllers\" channel-mode MIDI message has been received.\n     *\n     * @event InputChannel#resetallcontrollers\n     *\n     * @type {object}\n     *\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     */\n\n    /**\n     * Event emitted when a \"local control\" channel-mode MIDI message has been received. The value\n     * property of the event is set to either `true` (local control on) of `false` (local control\n     * off).\n     *\n     * @event InputChannel#localcontrol\n     *\n     * @type {object}\n     * @property {string} type `localcontrol`\n     *\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     *\n     * @property {boolean} value For local control on, the value is `true`. For local control off,\n     * the value is `false`.\n     * @property {boolean} rawValue For local control on, the value is `127`. For local control off,\n     * the value is `0`.\n     */\n    if (event.type === \"localcontrol\") {\n      event.value = event.message.data[2] === 127 ? true : false;\n      event.rawValue = event.message.data[2];\n    }\n\n    /**\n     * Event emitted when an \"all notes off\" channel-mode MIDI message has been received.\n     *\n     * @event InputChannel#allnotesoff\n     *\n     * @type {object}\n     * @property {string} type `allnotesoff`\n     *\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     */\n\n    /**\n     * Event emitted when an \"omni mode\" channel-mode MIDI message has been received. The value\n     * property of the event is set to either `true` (omni mode on) of `false` (omni mode off).\n     *\n     * @event InputChannel#omnimode\n     *\n     * @type {object}\n     * @property {string} type `\"omnimode\"`\n     *\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     *\n     * @property {boolean} value The value is `true` for omni mode on and false for omni mode off.\n     * @property {boolean} rawValue The raw MIDI value\n     */\n    if (event.type === \"omnimodeon\") {\n      event.type = \"omnimode\";\n      event.value = true;\n      event.rawValue = event.message.data[2];\n    } else if (event.type === \"omnimodeoff\") {\n      event.type = \"omnimode\";\n      event.value = false;\n      event.rawValue = event.message.data[2];\n    }\n\n\n    /**\n     * Event emitted when a \"mono/poly mode\" MIDI message has been received. The value property of\n     * the event is set to either `true` (mono mode on / poly mode off) or `false` (mono mode off /\n     * poly mode on).\n     *\n     * @event InputChannel#monomode\n     *\n     * @type {object}\n     * @property {string} type `monomode`\n     *\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     *\n     * @property {boolean} value The value is `true` for omni mode on and false for omni mode off.\n     * @property {boolean} rawValue The raw MIDI value\n     */\n    if (event.type === \"monomodeon\") {\n      event.type = \"monomode\";\n      event.value = true;\n      event.rawValue = event.message.data[2];\n    } else if (event.type === \"polymodeon\") {\n      event.type = \"monomode\";\n      event.value = false;\n      event.rawValue = event.message.data[2];\n    }\n\n    this.emit(event.type, event);\n\n  }\n\n  /**\n   * Parses inbound events to identify RPN/NRPN sequences.\n   * @param e Event\n   * @private\n   */\n  _parseEventForParameterNumber(event) {\n\n    // To make it more legible\n    const controller = event.message.dataBytes[0];\n    const value = event.message.dataBytes[1];\n\n    // A. Check if the message is the start of an RPN (101) or NRPN (99) parameter declaration.\n    if (controller === 99 || controller === 101) {\n\n      this._nrpnBuffer = [];\n      this._rpnBuffer = [];\n\n      if (controller === 99) {                          // 99\n        this._nrpnBuffer = [event.message];\n      } else {                                          // 101\n        // 127 is a reset so we ignore it\n        if (value !== 127) this._rpnBuffer = [event.message];\n      }\n\n    // B. Check if the message is the end of an RPN (100) or NRPN (98) parameter declaration.\n    } else if (controller === 98 || controller === 100) {\n\n      if (controller === 98) {                          // 98\n\n        // Flush the other buffer (they are mutually exclusive)\n        this._rpnBuffer = [];\n\n        // Check if we are in sequence\n        if (this._nrpnBuffer.length === 1) {\n          this._nrpnBuffer.push(event.message);\n        } else {\n          this._nrpnBuffer = []; // out of sequence\n        }\n\n      } else {                                          // 100\n\n        // Flush the other buffer (they are mutually exclusive)\n        this._nrpnBuffer = [];\n\n        // 127 is a reset so we ignore it\n        if (this._rpnBuffer.length === 1 && value !== 127) {\n          this._rpnBuffer.push(event.message);\n        } else {\n          this._rpnBuffer = []; // out of sequence or reset\n        }\n\n      }\n\n    // C. Check if the message is for data entry (6, 38, 96 or 97). Those messages trigger events.\n    } else if (\n      controller === 6 ||\n      controller === 38 ||\n      controller === 96 ||\n      controller === 97\n    ) {\n\n      if (this._rpnBuffer.length === 2) {\n        this._dispatchParameterNumberEvent(\n          \"rpn\",\n          this._rpnBuffer[0].dataBytes[1],\n          this._rpnBuffer[1].dataBytes[1],\n          event\n        );\n      } else if (this._nrpnBuffer.length === 2) {\n        this._dispatchParameterNumberEvent(\n          \"nrpn\",\n          this._nrpnBuffer[0].dataBytes[1],\n          this._nrpnBuffer[1].dataBytes[1],\n          event\n        );\n      } else {\n        this._nrpnBuffer = [];\n        this._rpnBuffer = [];\n      }\n\n    }\n\n  }\n\n  /**\n   * Indicates whether the specified controller can be part of an RPN or NRPN sequence\n   * @param controller\n   * @returns {boolean}\n   * @private\n   */\n  _isRpnOrNrpnController(controller) {\n\n    return controller === 6 ||\n      controller === 38 ||\n      controller === 96 ||\n      controller === 97 ||\n      controller === 98 ||\n      controller === 99 ||\n      controller === 100 ||\n      controller === 101;\n\n  }\n\n  /**\n   * @private\n   */\n  _dispatchParameterNumberEvent(type, paramMsb, paramLsb, e) {\n\n    type = type === \"nrpn\" ? \"nrpn\" : \"rpn\";\n\n    /**\n     * Event emitted when an **RPN data entry coarse** message is received on the input. The\n     * specific parameter to which the message applies can be found in the event's `parameter`\n     * property. It is one of the ones defined in\n     * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n     *\n     * @event InputChannel#rpn-dataentrycoarse\n     *\n     * @type {object}\n     *\n     * @property {string} type `rpn-dataentrycoarse`\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when an **RPN data entry fine** message is received on the input. The\n     * specific parameter to which the message applies can be found in the event's `parameter`\n     * property. It is one of the ones defined in\n     * [`EnumerationsREGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n     *\n     * @event InputChannel#rpn-dataentryfine\n     *\n     * @type {object}\n     *\n     * @property {string} type `rpn-dataentryfine`\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when an **RPN data increment** message is received on the input. The specific\n     * parameter to which the message applies can be found in the event's `parameter` property. It\n     * is one of the ones defined in\n     * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n     *\n     * @event InputChannel#rpn-dataincrement\n     *\n     * @type {object}\n     *\n     * @property {string} type `rpn-dataincrement`\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when an **RPN data decrement** message is received on the input. The specific\n     * parameter to which the message applies can be found in the event's `parameter` property. It\n     * is one of the ones defined in\n     * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n     *\n     * @event InputChannel#rpn-datadecrement\n     *\n     * @type {object}\n     *\n     * @property {string} type `rpn-datadecrement`\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when an **NRPN data entry coarse** message is received on the input. The\n     * specific parameter to which the message applies can be found in the event's `parameter`\n     * property. It is one of the ones defined in\n     * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n     *\n     * @event InputChannel#nrpn-dataentrycoarse\n     *\n     * @type {object}\n     *\n     * @property {string} type `nrpn-dataentrycoarse`\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when an **NRPN data entry fine** message is received on the input. The\n     * specific parameter to which the message applies can be found in the event's `parameter`\n     * property. It is one of the ones defined in\n     * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n     *\n     * @event InputChannel#nrpn-dataentryfine\n     *\n     * @type {object}\n     *\n     * @property {string} type `nrpn-dataentryfine`\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when an **NRPN data increment** message is received on the input. The specific\n     * parameter to which the message applies can be found in the event's `parameter` property. It\n     * is one of the ones defined in\n     * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n     *\n     * @event InputChannel#nrpn-dataincrement\n     *\n     * @type {object}\n     *\n     * @property {string} type `nrpn-dataincrement`\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when an **NRPN data decrement** message is received on the input. The specific\n     * parameter to which the message applies can be found in the event's `parameter` property. It\n     * is one of the ones defined in\n     * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n     *\n     * @event InputChannel#nrpn-datadecrement\n     *\n     * @type {object}\n     *\n     * @property {string} type `nrpn-datadecrement`\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    const event = {\n      target: e.target,\n      timestamp: e.timestamp,\n      message: e.message,\n      parameterMsb: paramMsb,\n      parameterLsb: paramLsb,\n      value: Utilities.from7bitToFloat(e.message.dataBytes[1]),\n      rawValue: e.message.dataBytes[1],\n    };\n\n    // Identify the parameter (by name for RPN and by number for NRPN)\n    if (type === \"rpn\") {\n\n      event.parameter = Object.keys(Enumerations.REGISTERED_PARAMETERS).find(key => {\n        return Enumerations.REGISTERED_PARAMETERS[key][0] === paramMsb &&\n          Enumerations.REGISTERED_PARAMETERS[key][1] === paramLsb;\n      });\n\n    } else {\n      event.parameter = (paramMsb << 7) + paramLsb;\n    }\n\n    // Type and subtype\n    const subtype = Enumerations.CONTROL_CHANGE_MESSAGES[e.message.dataBytes[0]].name;\n\n    // Emit specific event\n    event.type = `${type}-${subtype}`;\n    this.emit(event.type, event);\n\n    // Begin Legacy Block (remove in v4)\n    const legacyEvent = Object.assign({}, event);\n    if (legacyEvent.type === \"nrpn-dataincrement\") {\n      legacyEvent.type = \"nrpn-databuttonincrement\";\n    } else if (legacyEvent.type === \"nrpn-datadecrement\") {\n      legacyEvent.type = \"nrpn-databuttondecrement\";\n    } else if (legacyEvent.type === \"rpn-dataincrement\") {\n      legacyEvent.type = \"rpn-databuttonincrement\";\n    } else if (legacyEvent.type === \"rpn-datadecrement\") {\n      legacyEvent.type = \"rpn-databuttondecrement\";\n    }\n    this.emit(legacyEvent.type, legacyEvent);\n    // End Legacy Block\n\n    /**\n     * Event emitted when any NRPN message is received on the input. There are four subtypes of NRPN\n     * messages:\n     *\n     *   * `nrpn-dataentrycoarse`\n     *   * `nrpn-dataentryfine`\n     *   * `nrpn-dataincrement`\n     *   * `nrpn-datadecrement`\n     *\n     * The parameter to which the message applies can be found in the event's `parameter` property.\n     *\n     * @event InputChannel#nrpn\n     *\n     * @type {object}\n     *\n     * @property {string} type `nrpn`\n     * @property {string} subtype The precise type of NRPN message that was received.\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {number} parameter The non-registered parameter number (0-16383)\n     * @property {number} parameterMsb The MSB portion of the non-registered parameter number\n     * (0-127)\n     * @property {number} parameterLsb: The LSB portion of the non-registered parameter number\n     * (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when any RPN message is received on the input. There are four subtypes of RPN\n     * messages:\n     *\n     *   * `rpn-dataentrycoarse`\n     *   * `rpn-dataentryfine`\n     *   * `rpn-dataincrement`\n     *   * `rpn-datadecrement`\n     *\n     * The parameter to which the message applies can be found in the event's `parameter` property.\n     * It is one of the ones defined in\n     * [`Enumerations.REGISTERED_PARAMETERS`](Enumerations#REGISTERED_PARAMETERS).\n     *\n     * @event InputChannel#rpn\n     *\n     * @type {object}\n     *\n     * @property {string} type `rpn`\n     * @property {string} subtype The precise type of RPN message that was received.\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    // Emit general event\n    event.type = type;\n    event.subtype = subtype;\n    this.emit(event.type, event);\n\n  }\n\n  /**\n   * @deprecated since version 3.\n   * @private\n   */\n  getChannelModeByNumber(number) {\n\n    if (wm.validation) {\n      console.warn(\n        \"The 'getChannelModeByNumber()' method has been moved to the 'Utilities' class.\"\n      );\n      number = Math.floor(number);\n    }\n\n    return Utilities.getChannelModeByNumber(number);\n\n  }\n\n  /**\n   * @deprecated since version 3.\n   * @private\n   */\n  getCcNameByNumber(number) {\n\n    if (wm.validation) {\n      console.warn(\n        \"The 'getCcNameByNumber()' method has been moved to the 'Utilities' class.\"\n      );\n      number = parseInt(number);\n      if ( !(number >= 0 && number <= 127) ) throw new RangeError(\"Invalid control change number.\");\n    }\n\n    return Utilities.getCcNameByNumber(number);\n\n  }\n\n  /**\n   * Returns the playing status of the specified note (`true` if the note is currently playing,\n   * `false` if it is not). The `note` parameter can be an unsigned integer (0-127), a note\n   * identifier (`\"C4\"`, `\"G#5\"`, etc.) or a [`Note`]{@link Note} object.\n   *\n   * IF the note is specified using an integer (0-127), no octave offset will be applied.\n   *\n   * @param {number|string|Note} note The note to get the state for. The\n   * [`octaveOffset`](#octaveOffset) (channel, input and global) will be factored in for note\n   * identifiers and [`Note`]{@link Note} objects.\n   * @returns {boolean}\n   * @since version 3.0.0\n   */\n  getNoteState(note) {\n\n    // If it's a note object, we simply use the identifier\n    if (note instanceof Note) note = note.identifier;\n\n    const number = Utilities.guessNoteNumber(\n      note,\n      wm.octaveOffset + this.input.octaveOffset + this.octaveOffset\n    );\n\n    return this.notesState[number];\n\n  }\n\n  /**\n   * An integer to offset the reported octave of incoming note-specific messages (`noteon`,\n   * `noteoff` and `keyaftertouch`). By default, middle C (MIDI note number 60) is placed on the 4th\n   * octave (C4).\n   *\n   * If, for example, `octaveOffset` is set to 2, MIDI note number 60 will be reported as C6. If\n   * `octaveOffset` is set to -1, MIDI note number 60 will be reported as C3.\n   *\n   * Note that this value is combined with the global offset value defined by\n   * [`WebMidi.octaveOffset`](WebMidi#octaveOffset) object and with the value defined on the parent\n   * input object with [`Input.octaveOffset`](Input#octaveOffset).\n   *\n   * @type {number}\n   *\n   * @since 3.0\n   */\n  get octaveOffset() {\n    return this._octaveOffset;\n  }\n  set octaveOffset(value) {\n\n    if (this.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n    }\n\n    this._octaveOffset = value;\n\n  }\n\n  /**\n   * The [`Input`](Input) this channel belongs to.\n   * @type {Input}\n   * @since 3.0\n   */\n  get input() {\n    return this._input;\n  }\n\n  /**\n   * This channel's MIDI number (1-16).\n   * @type {number}\n   * @since 3.0\n   */\n  get number() {\n    return this._number;\n  }\n\n  /**\n   * Whether RPN/NRPN events are parsed and dispatched.\n   * @type {boolean}\n   * @since 3.0\n   * @deprecated Use parameterNumberEventsEnabled instead.\n   * @private\n   */\n  get nrpnEventsEnabled() {\n    return this.parameterNumberEventsEnabled;\n  }\n  set nrpnEventsEnabled(value) {\n\n    if (this.validation) {\n      value = !!value;\n    }\n\n    this.parameterNumberEventsEnabled = value;\n\n  }\n\n}\n\n/**\n * The `Message` class represents a single MIDI message. It has several properties that make it\n * easy to make sense of the binary data it contains.\n *\n * @license Apache-2.0\n * @since 3.0.0\n */\nclass Message {\n\n  /**\n   * Creates a new `Message` object from raw MIDI data.\n   *\n   * @param {Uint8Array} data The raw data of the MIDI message as a\n   * [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array)\n   * of integers between `0` and `255`.\n   */\n  constructor(data) {\n\n    /**\n     * A\n     * [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array)\n     * containing the bytes of the MIDI message. Each byte is an integer between `0` and `255`.\n     *\n     * @type {Uint8Array}\n     * @readonly\n     */\n    this.rawData = data;\n\n    /**\n     * An array containing all the bytes of the MIDI message. Each byte is an integer between `0`\n     * and `255`.\n     *\n     * @type {number[]}\n     * @readonly\n     */\n    this.data = Array.from(this.rawData);\n\n    /**\n     * The MIDI status byte of the message as an integer between `0` and `255`.\n     *\n     * @type {number}\n     * @readonly\n     */\n    this.statusByte = this.rawData[0];\n\n    /**\n     * A\n     * [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array)\n     * of the data byte(s) of the MIDI message. When the message is a system exclusive message\n     * (sysex), `rawDataBytes` explicitly excludes the manufacturer ID and the sysex end byte so\n     * only the actual data is included.\n     *\n     * @type {Uint8Array}\n     * @readonly\n     */\n    this.rawDataBytes = this.rawData.slice(1);\n\n    /**\n     * An array of the the data byte(s) of the MIDI message (as opposed to the status byte). When\n     * the message is a system exclusive message (sysex), `dataBytes` explicitly excludes the\n     * manufacturer ID and the sysex end byte so only the actual data is included.\n     *\n     * @type {number[]}\n     * @readonly\n     */\n    this.dataBytes = this.data.slice(1);\n\n    /**\n     * A boolean indicating whether the MIDI message is a channel-specific message.\n     *\n     * @type {boolean}\n     * @readonly\n     */\n    this.isChannelMessage = false;\n\n    /**\n     * A boolean indicating whether the MIDI message is a system message (not specific to a\n     * channel).\n     *\n     * @type {boolean}\n     * @readonly\n     */\n    this.isSystemMessage = false;\n\n    /**\n     * An integer identifying the MIDI command. For channel-specific messages, the value is 4-bit\n     * and will be between `8` and `14`. For system messages, the value will be between `240` and\n     * `255`.\n     *\n     * @type {number}\n     * @readonly\n     */\n    this.command = undefined;\n\n    /**\n     * The MIDI channel number (`1` - `16`) that the message is targeting. This is only for\n     * channel-specific messages. For system messages, this will be left `undefined`.\n     *\n     * @type {number}\n     * @readonly\n     */\n    this.channel = undefined;\n\n    /**\n     * When the message is a system exclusive message (sysex), this property contains an array with\n     * either 1 or 3 entries that identify the manufacturer targeted by the message.\n     *\n     * To know how to translate these entries into manufacturer names, check out the official list:\n     * https://www.midi.org/specifications-old/item/manufacturer-id-numbers\n     *\n     * @type {number[]}\n     * @readonly\n     */\n    this.manufacturerId = undefined;\n\n    /**\n     * The type of message as a string (`\"noteon\"`, `\"controlchange\"`, `\"sysex\"`, etc.)\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.type = undefined;\n\n    // Assign values to property that vary according to whether they are channel-specific or system\n    if (this.statusByte < 240) {\n      this.isChannelMessage = true;\n      this.command = this.statusByte >> 4;\n      this.channel = (this.statusByte & 0b00001111) + 1;\n    } else {\n      this.isSystemMessage = true;\n      this.command = this.statusByte;\n    }\n\n    // Assign type (depending on whether the message is channel-specific or system)\n    if (this.isChannelMessage) {\n      this.type = Utilities.getPropertyByValue(Enumerations.CHANNEL_MESSAGES, this.command);\n    } else if (this.isSystemMessage) {\n      this.type = Utilities.getPropertyByValue(Enumerations.SYSTEM_MESSAGES, this.command);\n    }\n\n    // When the message is a sysex message, we add a manufacturer property and strip out the id from\n    // dataBytes and rawDataBytes.\n    if (this.statusByte === Enumerations.SYSTEM_MESSAGES.sysex) {\n\n      if (this.dataBytes[0] === 0) {\n        this.manufacturerId = this.dataBytes.slice(0, 3);\n        this.dataBytes = this.dataBytes.slice(3, this.rawDataBytes.length - 1);\n        this.rawDataBytes = this.rawDataBytes.slice(3, this.rawDataBytes.length - 1);\n      } else {\n        this.manufacturerId = [this.dataBytes[0]];\n        this.dataBytes = this.dataBytes.slice(1, this.dataBytes.length - 1);\n        this.rawDataBytes = this.rawDataBytes.slice(1, this.rawDataBytes.length - 1);\n      }\n\n    }\n\n  }\n\n}\n\n/**\n * The `Input` class represents a single MIDI input port. This object is automatically instantiated\n * by the library according to the host's MIDI subsystem and does not need to be directly\n * instantiated. Instead, you can access all `Input` objects by referring to the\n * [`WebMidi.inputs`](WebMidi#inputs) array. You can also retrieve inputs by using methods such as\n * [`WebMidi.getInputByName()`](WebMidi#getInputByName) and\n * [`WebMidi.getInputById()`](WebMidi#getInputById).\n *\n * Note that a single MIDI device may expose several inputs and/or outputs.\n *\n * **Important**: the `Input` class does not directly fire channel-specific MIDI messages\n * (such as [`noteon`](InputChannel#event:noteon) or\n * [`controlchange`](InputChannel#event:controlchange), etc.). The [`InputChannel`](InputChannel)\n * object does that. However, you can still use the\n * [`Input.addListener()`](#addListener) method to listen to channel-specific events on multiple\n * [`InputChannel`](InputChannel) objects at once.\n *\n * @fires Input#opened\n * @fires Input#disconnected\n * @fires Input#closed\n * @fires Input#midimessage\n *\n * @fires Input#sysex\n * @fires Input#timecode\n * @fires Input#songposition\n * @fires Input#songselect\n * @fires Input#tunerequest\n * @fires Input#clock\n * @fires Input#start\n * @fires Input#continue\n * @fires Input#stop\n * @fires Input#activesensing\n * @fires Input#reset\n *\n * @fires Input#unknownmidimessage\n *\n * @extends EventEmitter\n * @license Apache-2.0\n */\nclass Input extends EventEmitter {\n\n  /**\n   * Creates an `Input` object.\n   *\n   * @param {MIDIInput} midiInput [`MIDIInput`](https://developer.mozilla.org/en-US/docs/Web/API/MIDIInput)\n   * object as provided by the MIDI subsystem (Web MIDI API).\n   */\n  constructor(midiInput) {\n\n    super();\n\n    /**\n     * Reference to the actual MIDIInput object\n     * @private\n     */\n    this._midiInput = midiInput;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._octaveOffset = 0;\n\n    /**\n     * Array containing the 16 [`InputChannel`](InputChannel) objects available for this `Input`. The\n     * channels are numbered 1 through 16.\n     *\n     * @type {InputChannel[]}\n     */\n    this.channels = [];\n    for (let i = 1; i <= 16; i++) this.channels[i] = new InputChannel(this, i);\n\n    /**\n     * @type {Forwarder[]}\n     * @private\n     */\n    this._forwarders = [];\n\n    // Setup listeners\n    this._midiInput.onstatechange = this._onStateChange.bind(this);\n    this._midiInput.onmidimessage = this._onMidiMessage.bind(this);\n\n  }\n\n  /**\n   * Destroys the `Input` by removing all listeners, emptying the [`channels`](#channels) array and\n   * unlinking the MIDI subsystem. This is mostly for internal use.\n   *\n   * @returns {Promise<void>}\n   */\n  async destroy() {\n    this.removeListener();\n    this.channels.forEach(ch => ch.destroy());\n    this.channels = [];\n    this._forwarders = [];\n    if (this._midiInput) {\n      this._midiInput.onstatechange = null;\n      this._midiInput.onmidimessage = null;\n    }\n    await this.close();\n    this._midiInput = null;\n  }\n\n  /**\n   * Executed when a `\"statechange\"` event occurs.\n   *\n   * @param e\n   * @private\n   */\n  _onStateChange(e) {\n\n    let event = {\n      timestamp: wm.time,\n      target: this,\n      port: this // for consistency\n    };\n\n    if (e.port.connection === \"open\") {\n\n      /**\n       * Event emitted when the `Input` has been opened by calling the [`open()`]{@link #open}\n       * method.\n       *\n       * @event Input#opened\n       * @type {object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `opened`\n       * @property {Input} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       */\n      event.type = \"opened\";\n      this.emit(\"opened\", event);\n\n    } else if (e.port.connection === \"closed\" && e.port.state === \"connected\") {\n\n      /**\n       * Event emitted when the `Input` has been closed by calling the\n       * [`close()`]{@link #close} method.\n       *\n       * @event Input#closed\n       * @type {object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `closed`\n       * @property {Input} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       */\n      event.type = \"closed\";\n      this.emit(\"closed\", event);\n\n    } else if (e.port.connection === \"closed\" && e.port.state === \"disconnected\") {\n\n      /**\n       * Event emitted when the `Input` becomes unavailable. This event is typically fired\n       * when the MIDI device is unplugged.\n       *\n       * @event Input#disconnected\n       * @type {object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `disconnected`\n       * @property {Input} port Object with properties describing the {@link Input} that was\n       * disconnected. This is not the actual `Input` as it is no longer available.\n       * @property {Input} target The object that dispatched the event.\n       */\n      event.type = \"disconnected\";\n      event.port = {\n        connection: e.port.connection,\n        id: e.port.id,\n        manufacturer: e.port.manufacturer,\n        name: e.port.name,\n        state: e.port.state,\n        type: e.port.type\n      };\n      this.emit(\"disconnected\", event);\n\n    } else if (e.port.connection === \"pending\" && e.port.state === \"disconnected\") ; else {\n      console.warn(\"This statechange event was not caught: \", e.port.connection, e.port.state);\n    }\n\n  }\n\n  /**\n   * Executed when a `\"midimessage\"` event is received\n   * @param e\n   * @private\n   */\n  _onMidiMessage(e) {\n\n    // Create Message object from MIDI data\n    const message = new Message(e.data);\n\n    /**\n     * Event emitted when any MIDI message is received on an `Input`.\n     *\n     * @event Input#midimessage\n     *\n     * @type {object}\n     *\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {Input} target The object that dispatched the event.\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} type `midimessage`\n     *\n     * @since 2.1\n     */\n    const event = {\n      port: this,\n      target: this,\n      message: message,\n      timestamp: e.timeStamp,\n      type: \"midimessage\",\n\n      data: message.data,           // @deprecated (will be removed in v4)\n      rawData: message.data,        // @deprecated (will be removed in v4)\n      statusByte: message.data[0],  // @deprecated (will be removed in v4)\n      dataBytes: message.dataBytes  // @deprecated (will be removed in v4)\n    };\n\n    this.emit(\"midimessage\", event);\n\n    // Messages are forwarded to InputChannel if they are channel messages or parsed locally for\n    // system messages.\n    if (message.isSystemMessage) {           // system messages\n      this._parseEvent(event);\n    } else if (message.isChannelMessage) {   // channel messages\n      this.channels[message.channel]._processMidiMessageEvent(event);\n    }\n\n    // Forward message if forwarders have been defined\n    this._forwarders.forEach(forwarder => forwarder.forward(message));\n\n  }\n\n  /**\n   * @private\n   */\n  _parseEvent(e) {\n\n    // Make a shallow copy of the incoming event so we can use it as the new event.\n    const event = Object.assign({}, e);\n    event.type = event.message.type || \"unknownmidimessage\";\n\n    // Add custom property for 'songselect'\n    if (event.type === \"songselect\") {\n      event.song = e.data[1] + 1; // deprecated\n      event.value = e.data[1];\n      event.rawValue = event.value;\n    }\n\n    // Emit event\n    this.emit(event.type, event);\n\n  }\n\n  /**\n   * Opens the input for usage. This is usually unnecessary as the port is opened automatically when\n   * WebMidi is enabled.\n   *\n   * @returns {Promise<Input>} The promise is fulfilled with the `Input` object.\n   */\n  async open() {\n\n    // Explicitly opens the port for usage. This is not mandatory. When the port is not explicitly\n    // opened, it is implicitly opened (asynchronously) when assigning a listener to the\n    // `onmidimessage` property of the `MIDIInput`. We do it explicitly so that 'connected' events\n    // are dispatched immediately and that we are ready to listen.\n    try {\n      await this._midiInput.open();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(this);\n\n  }\n\n  /**\n   * Closes the input. When an input is closed, it cannot be used to listen to MIDI messages until\n   * the input is opened again by calling [`Input.open()`](Input#open).\n   *\n   * **Note**: if what you want to do is stop events from being dispatched, you should use\n   * [`eventsSuspended`](#eventsSuspended) instead.\n   *\n   * @returns {Promise<Input>} The promise is fulfilled with the `Input` object\n   */\n  async close() {\n\n    // We close the port. This triggers a statechange event which, in turn, will emit the 'closed'\n    // event.\n    if (!this._midiInput) return Promise.resolve(this);\n\n    try {\n      await this._midiInput.close();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(this);\n\n  }\n\n  /**\n   * @private\n   * @deprecated since v3.0.0 (moved to 'Utilities' class)\n   */\n  getChannelModeByNumber() {\n    if (wm.validation) {\n      console.warn(\n        \"The 'getChannelModeByNumber()' method has been moved to the 'Utilities' class.\"\n      );\n    }\n  }\n\n  /**\n   * Adds an event listener that will trigger a function callback when the specified event is\n   * dispatched. The event usually is **input-wide** but can also be **channel-specific**.\n   *\n   * Input-wide events do not target a specific MIDI channel so it makes sense to listen for them\n   * at the `Input` level and not at the [`InputChannel`](InputChannel) level. Channel-specific\n   * events target a specific channel. Usually, in this case, you would add the listener to the\n   * [`InputChannel`](InputChannel) object. However, as a convenience, you can also listen to\n   * channel-specific events directly on an `Input`. This allows you to react to a channel-specific\n   * event no matter which channel it actually came through.\n   *\n   * When listening for an event, you simply need to specify the event name and the function to\n   * execute:\n   *\n   * ```javascript\n   * const listener = WebMidi.inputs[0].addListener(\"midimessage\", e => {\n   *   console.log(e);\n   * });\n   * ```\n   *\n   * Calling the function with an input-wide event (such as\n   * [`\"midimessage\"`]{@link #event:midimessage}), will return the [`Listener`](Listener) object\n   * that was created.\n   *\n   * If you call the function with a channel-specific event (such as\n   * [`\"noteon\"`]{@link InputChannel#event:noteon}), it will return an array of all\n   * [`Listener`](Listener) objects that were created (one for each channel):\n   *\n   * ```javascript\n   * const listeners = WebMidi.inputs[0].addListener(\"noteon\", someFunction);\n   * ```\n   *\n   * You can also specify which channels you want to add the listener to:\n   *\n   * ```javascript\n   * const listeners = WebMidi.inputs[0].addListener(\"noteon\", someFunction, {channels: [1, 2, 3]});\n   * ```\n   *\n   * In this case, `listeners` is an array containing 3 [`Listener`](Listener) objects. The order of\n   * the listeners in the array follows the order the channels were specified in.\n   *\n   * Note that, when adding channel-specific listeners, it is the [`InputChannel`](InputChannel)\n   * instance that actually gets a listener added and not the `Input` instance. You can check that\n   * by calling [`InputChannel.hasListener()`](InputChannel#hasListener()).\n   *\n   * There are 8 families of events you can listen to:\n   *\n   * 1. **MIDI System Common** Events (input-wide)\n   *\n   *    * [`songposition`]{@link Input#event:songposition}\n   *    * [`songselect`]{@link Input#event:songselect}\n   *    * [`sysex`]{@link Input#event:sysex}\n   *    * [`timecode`]{@link Input#event:timecode}\n   *    * [`tunerequest`]{@link Input#event:tunerequest}\n   *\n   * 2. **MIDI System Real-Time** Events (input-wide)\n   *\n   *    * [`clock`]{@link Input#event:clock}\n   *    * [`start`]{@link Input#event:start}\n   *    * [`continue`]{@link Input#event:continue}\n   *    * [`stop`]{@link Input#event:stop}\n   *    * [`activesensing`]{@link Input#event:activesensing}\n   *    * [`reset`]{@link Input#event:reset}\n   *\n   * 3. **State Change** Events (input-wide)\n   *\n   *    * [`opened`]{@link Input#event:opened}\n   *    * [`closed`]{@link Input#event:closed}\n   *    * [`disconnected`]{@link Input#event:disconnected}\n   *\n   * 4. **Catch-All** Events (input-wide)\n   *\n   *    * [`midimessage`]{@link Input#event:midimessage}\n   *    * [`unknownmidimessage`]{@link Input#event:unknownmidimessage}\n   *\n   * 5. **Channel Voice** Events (channel-specific)\n   *\n   *    * [`channelaftertouch`]{@link InputChannel#event:channelaftertouch}\n   *    * [`controlchange`]{@link InputChannel#event:controlchange}\n   *      * [`controlchange-controller0`]{@link InputChannel#event:controlchange-controller0}\n   *      * [`controlchange-controller1`]{@link InputChannel#event:controlchange-controller1}\n   *      * [`controlchange-controller2`]{@link InputChannel#event:controlchange-controller2}\n   *      * (...)\n   *      * [`controlchange-controller127`]{@link InputChannel#event:controlchange-controller127}\n   *    * [`keyaftertouch`]{@link InputChannel#event:keyaftertouch}\n   *    * [`noteoff`]{@link InputChannel#event:noteoff}\n   *    * [`noteon`]{@link InputChannel#event:noteon}\n   *    * [`pitchbend`]{@link InputChannel#event:pitchbend}\n   *    * [`programchange`]{@link InputChannel#event:programchange}\n   *\n   *    Note: you can listen for a specific control change message by using an event name like this:\n   *    `controlchange-controller23`, `controlchange-controller99`, `controlchange-controller122`,\n   *    etc.\n   *\n   * 6. **Channel Mode** Events (channel-specific)\n   *\n   *    * [`allnotesoff`]{@link InputChannel#event:allnotesoff}\n   *    * [`allsoundoff`]{@link InputChannel#event:allsoundoff}\n   *    * [`localcontrol`]{@link InputChannel#event:localcontrol}\n   *    * [`monomode`]{@link InputChannel#event:monomode}\n   *    * [`omnimode`]{@link InputChannel#event:omnimode}\n   *    * [`resetallcontrollers`]{@link InputChannel#event:resetallcontrollers}\n   *\n   * 7. **NRPN** Events (channel-specific)\n   *\n   *    * [`nrpn`]{@link InputChannel#event:nrpn}\n   *    * [`nrpn-dataentrycoarse`]{@link InputChannel#event:nrpn-dataentrycoarse}\n   *    * [`nrpn-dataentryfine`]{@link InputChannel#event:nrpn-dataentryfine}\n   *    * [`nrpn-dataincrement`]{@link InputChannel#event:nrpn-dataincrement}\n   *    * [`nrpn-datadecrement`]{@link InputChannel#event:nrpn-datadecrement}\n   *\n   * 8. **RPN** Events (channel-specific)\n   *\n   *    * [`rpn`]{@link InputChannel#event:rpn}\n   *    * [`rpn-dataentrycoarse`]{@link InputChannel#event:rpn-dataentrycoarse}\n   *    * [`rpn-dataentryfine`]{@link InputChannel#event:rpn-dataentryfine}\n   *    * [`rpn-dataincrement`]{@link InputChannel#event:rpn-dataincrement}\n   *    * [`rpn-datadecrement`]{@link InputChannel#event:rpn-datadecrement}\n   *\n   * @param event {string | EventEmitter.ANY_EVENT} The type of the event.\n   *\n   * @param listener {function} A callback function to execute when the specified event is detected.\n   * This function will receive an event parameter object. For details on this object's properties,\n   * check out the documentation for the various events (links above).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {array} [options.arguments] An array of arguments which will be passed separately to the\n   * callback function. This array is stored in the [`arguments`](Listener#arguments) property of\n   * the [`Listener`](Listener) object and can be retrieved or modified as desired.\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * An integer between 1 and 16 or an array of such integers representing the MIDI channel(s) to\n   * listen on. If no channel is specified, all channels will be used. This parameter is ignored for\n   * input-wide events.\n   *\n   * @param {object} [options.context=this] The value of `this` in the callback function.\n   *\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the listener\n   * automatically expires.\n   *\n   * @param {boolean} [options.prepend=false] Whether the listener should be added at the beginning\n   * of the listeners array and thus be triggered before others.\n   *\n   * @param {number} [options.remaining=Infinity] The number of times after which the callback\n   * should automatically be removed.\n   *\n   * @returns {Listener|Listener[]} If the event is input-wide, a single [`Listener`](Listener)\n   * object is returned. If the event is channel-specific, an array of all the\n   * [`Listener`](Listener) objects is returned (one for each channel).\n   */\n  addListener(event, listener, options = {}) {\n\n    if (wm.validation) {\n\n      // Legacy compatibility\n      if (typeof options === \"function\") {\n        let channels = (listener != undefined) ? [].concat(listener) : undefined; // clone\n        listener = options;\n        options = {channels: channels};\n      }\n\n    }\n\n    // Check if the event is channel-specific or input-wide\n    if (Enumerations.CHANNEL_EVENTS.includes(event)) {\n\n      // If no channel defined, use all.\n      if (options.channels === undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n      let listeners = [];\n\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        listeners.push(this.channels[ch].addListener(event, listener, options));\n      });\n\n      return listeners;\n\n    } else {\n\n      return super.addListener(event, listener, options);\n\n    }\n\n  }\n\n  /**\n   * Adds a one-time event listener that will trigger a function callback when the specified event\n   * happens. The event can be **channel-bound** or **input-wide**. Channel-bound events are\n   * dispatched by [`InputChannel`]{@link InputChannel} objects and are tied to a specific MIDI\n   * channel while input-wide events are dispatched by the `Input` object itself and are not tied\n   * to a specific channel.\n   *\n   * Calling the function with an input-wide event (such as\n   * [`\"midimessage\"`]{@link #event:midimessage}), will return the [`Listener`](Listener) object\n   * that was created.\n   *\n   * If you call the function with a channel-specific event (such as\n   * [`\"noteon\"`]{@link InputChannel#event:noteon}), it will return an array of all\n   * [`Listener`](Listener) objects that were created (one for each channel):\n   *\n   * ```javascript\n   * const listeners = WebMidi.inputs[0].addOneTimeListener(\"noteon\", someFunction);\n   * ```\n   *\n   * You can also specify which channels you want to add the listener to:\n   *\n   * ```javascript\n   * const listeners = WebMidi.inputs[0].addOneTimeListener(\"noteon\", someFunction, {channels: [1, 2, 3]});\n   * ```\n   *\n   * In this case, the `listeners` variable contains an array of 3 [`Listener`](Listener) objects.\n   *\n   * The code above will add a listener for the `\"noteon\"` event and call `someFunction` when the\n   * event is triggered on MIDI channels `1`, `2` or `3`.\n   *\n   * Note that, when adding events to channels, it is the [`InputChannel`](InputChannel) instance\n   * that actually gets a listener added and not the `Input` instance.\n   *\n   * Note: if you want to add a listener to a single MIDI channel you should probably do so directly\n   * on the [`InputChannel`](InputChannel) object itself.\n   *\n   * There are 8 families of events you can listen to:\n   *\n   * 1. **MIDI System Common** Events (input-wide)\n   *\n   *    * [`songposition`]{@link Input#event:songposition}\n   *    * [`songselect`]{@link Input#event:songselect}\n   *    * [`sysex`]{@link Input#event:sysex}\n   *    * [`timecode`]{@link Input#event:timecode}\n   *    * [`tunerequest`]{@link Input#event:tunerequest}\n   *\n   * 2. **MIDI System Real-Time** Events (input-wide)\n   *\n   *    * [`clock`]{@link Input#event:clock}\n   *    * [`start`]{@link Input#event:start}\n   *    * [`continue`]{@link Input#event:continue}\n   *    * [`stop`]{@link Input#event:stop}\n   *    * [`activesensing`]{@link Input#event:activesensing}\n   *    * [`reset`]{@link Input#event:reset}\n   *\n   * 3. **State Change** Events (input-wide)\n   *\n   *    * [`opened`]{@link Input#event:opened}\n   *    * [`closed`]{@link Input#event:closed}\n   *    * [`disconnected`]{@link Input#event:disconnected}\n   *\n   * 4. **Catch-All** Events (input-wide)\n   *\n   *    * [`midimessage`]{@link Input#event:midimessage}\n   *    * [`unknownmidimessage`]{@link Input#event:unknownmidimessage}\n   *\n   * 5. **Channel Voice** Events (channel-specific)\n   *\n   *    * [`channelaftertouch`]{@link InputChannel#event:channelaftertouch}\n   *    * [`controlchange`]{@link InputChannel#event:controlchange}\n   *      * [`controlchange-controller0`]{@link InputChannel#event:controlchange-controller0}\n   *      * [`controlchange-controller1`]{@link InputChannel#event:controlchange-controller1}\n   *      * [`controlchange-controller2`]{@link InputChannel#event:controlchange-controller2}\n   *      * (...)\n   *      * [`controlchange-controller127`]{@link InputChannel#event:controlchange-controller127}\n   *    * [`keyaftertouch`]{@link InputChannel#event:keyaftertouch}\n   *    * [`noteoff`]{@link InputChannel#event:noteoff}\n   *    * [`noteon`]{@link InputChannel#event:noteon}\n   *    * [`pitchbend`]{@link InputChannel#event:pitchbend}\n   *    * [`programchange`]{@link InputChannel#event:programchange}\n   *\n   *    Note: you can listen for a specific control change message by using an event name like this:\n   *    `controlchange-controller23`, `controlchange-controller99`, `controlchange-controller122`,\n   *    etc.\n   *\n   * 6. **Channel Mode** Events (channel-specific)\n   *\n   *    * [`allnotesoff`]{@link InputChannel#event:allnotesoff}\n   *    * [`allsoundoff`]{@link InputChannel#event:allsoundoff}\n   *    * [`localcontrol`]{@link InputChannel#event:localcontrol}\n   *    * [`monomode`]{@link InputChannel#event:monomode}\n   *    * [`omnimode`]{@link InputChannel#event:omnimode}\n   *    * [`resetallcontrollers`]{@link InputChannel#event:resetallcontrollers}\n   *\n   * 7. **NRPN** Events (channel-specific)\n   *\n   *    * [`nrpn`]{@link InputChannel#event:nrpn}\n   *    * [`nrpn-dataentrycoarse`]{@link InputChannel#event:nrpn-dataentrycoarse}\n   *    * [`nrpn-dataentryfine`]{@link InputChannel#event:nrpn-dataentryfine}\n   *    * [`nrpn-dataincrement`]{@link InputChannel#event:nrpn-dataincrement}\n   *    * [`nrpn-datadecrement`]{@link InputChannel#event:nrpn-datadecrement}\n   *\n   * 8. **RPN** Events (channel-specific)\n   *\n   *    * [`rpn`]{@link InputChannel#event:rpn}\n   *    * [`rpn-dataentrycoarse`]{@link InputChannel#event:rpn-dataentrycoarse}\n   *    * [`rpn-dataentryfine`]{@link InputChannel#event:rpn-dataentryfine}\n   *    * [`rpn-dataincrement`]{@link InputChannel#event:rpn-dataincrement}\n   *    * [`rpn-datadecrement`]{@link InputChannel#event:rpn-datadecrement}\n   *\n   * @param event {string} The type of the event.\n   *\n   * @param listener {function} A callback function to execute when the specified event is detected.\n   * This function will receive an event parameter object. For details on this object's properties,\n   * check out the documentation for the various events (links above).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {array} [options.arguments] An array of arguments which will be passed separately to the\n   * callback function. This array is stored in the [`arguments`](Listener#arguments) property of\n   * the [`Listener`](Listener) object and can be retrieved or modified as desired.\n   *\n   * @param {number|number[]} [options.channels]  An integer between 1 and 16 or an array of\n   * such integers representing the MIDI channel(s) to listen on. This parameter is ignored for\n   * input-wide events.\n   *\n   * @param {object} [options.context=this] The value of `this` in the callback function.\n   *\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the listener\n   * automatically expires.\n   *\n   * @param {boolean} [options.prepend=false] Whether the listener should be added at the beginning\n   * of the listeners array and thus be triggered before others.\n   *\n   * @returns {Listener[]} An array of all [`Listener`](Listener) objects that were created.\n   */\n  addOneTimeListener(event, listener, options = {}) {\n    options.remaining = 1;\n    return this.addListener(event, listener, options);\n  }\n\n  /**\n   * This is an alias to the [Input.addListener()]{@link Input#addListener} method.\n   * @since 2.0.0\n   * @deprecated since v3.0\n   * @private\n   */\n  on(event, channel, listener, options) {\n    return this.addListener(event, channel, listener, options);\n  }\n\n  /**\n   * Checks if the specified event type is already defined to trigger the specified callback\n   * function. For channel-specific events, the function will return `true` only if all channels\n   * have the listener defined.\n   *\n   * @param event {string|Symbol} The type of the event.\n   *\n   * @param listener {function} The callback function to check for.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|number[]} [options.channels]  An integer between 1 and 16 or an array of such\n   * integers representing the MIDI channel(s) to check. This parameter is ignored for input-wide\n   * events.\n   *\n   * @returns {boolean} Boolean value indicating whether or not the `Input` or\n   * [`InputChannel`](InputChannel) already has this listener defined.\n   */\n  hasListener(event, listener, options = {}) {\n\n    if (wm.validation) {\n\n      // Legacy compatibility\n      if (typeof options === \"function\") {\n        let channels = [].concat(listener); // clone\n        listener = options;\n        options = {channels: channels};\n      }\n\n    }\n\n    if (Enumerations.CHANNEL_EVENTS.includes(event)) {\n\n      // If no channel defined, use all.\n      if (options.channels === undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n      return Utilities.sanitizeChannels(options.channels).every(ch => {\n        return this.channels[ch].hasListener(event, listener);\n      });\n\n    } else {\n      return super.hasListener(event, listener);\n    }\n\n  }\n\n  /**\n   * Removes the specified event listener. If no listener is specified, all listeners matching the\n   * specified event will be removed. If the event is channel-specific, the listener will be removed\n   * from all [`InputChannel`]{@link InputChannel} objects belonging to that channel. If no event is\n   * specified, all listeners for the `Input` as well as all listeners for all\n   * [`InputChannel`]{@link InputChannel} objects belonging to the `Input` will be removed.\n   *\n   * By default, channel-specific listeners will be removed from all\n   * [`InputChannel`]{@link InputChannel} objects unless the `options.channel` narrows it down.\n   *\n   * @param [type] {string} The type of the event.\n   *\n   * @param [listener] {function} The callback function to check for.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|number[]} [options.channels]  An integer between 1 and 16 or an array of\n   * such integers representing the MIDI channel(s) to match. This parameter is ignored for\n   * input-wide events.\n   *\n   * @param {*} [options.context] Only remove the listeners that have this exact context.\n   *\n   * @param {number} [options.remaining] Only remove the listener if it has exactly that many\n   * remaining times to be executed.\n   */\n  removeListener(event, listener, options = {}) {\n\n    if (wm.validation) {\n\n      // Legacy compatibility\n      if (typeof options === \"function\") {\n        let channels = [].concat(listener); // clone\n        listener = options;\n        options = {channels: channels};\n      }\n\n    }\n\n    if (options.channels === undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    // If the event is not specified, remove everything (channel-specific and input-wide)!\n    if (event == undefined) {\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        if (this.channels[ch]) this.channels[ch].removeListener();\n      });\n      return super.removeListener();\n    }\n\n    // If the event is specified, check if it's channel-specific or input-wide.\n    if (Enumerations.CHANNEL_EVENTS.includes(event)) {\n\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        this.channels[ch].removeListener(event, listener, options);\n      });\n\n    } else {\n\n      super.removeListener(event, listener, options);\n\n    }\n\n  }\n\n  /**\n   * Adds a forwarder that will forward all incoming MIDI messages matching the criteria to the\n   * specified [`Output`](Output) destination(s). This is akin to the hardware MIDI THRU port, with\n   * the added benefit of being able to filter which data is forwarded.\n   *\n   * @param {Output|Output[]} output An [`Output`](Output) object, or an array of such\n   * objects, to forward messages to.\n   * @param {object} [options={}]\n   * @param {string|string[]} [options.types=(all messages)] A message type, or an array of such\n   * types (`noteon`, `controlchange`, etc.), that the message type must match in order to be\n   * forwarded. If this option is not specified, all types of messages will be forwarded. Valid\n   * messages are the ones found in either\n   * [`SYSTEM_MESSAGES`](Enumerations#SYSTEM_MESSAGES) or\n   * [`CHANNEL_MESSAGES`](Enumerations#CHANNEL_MESSAGES).\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * A MIDI channel number or an array of channel numbers that the message must match in order to be\n   * forwarded. By default all MIDI channels are included (`1` to `16`).\n   *\n   * @returns {Forwarder} The [`Forwarder`](Forwarder) object created to handle the forwarding. This\n   * is useful if you wish to manipulate or remove the [`Forwarder`](Forwarder) later on.\n   */\n  addForwarder(output, options = {}) {\n\n    let forwarder;\n\n    // Unless 'output' is a forwarder, create a new forwarder\n    if (output instanceof Forwarder) {\n      forwarder = output;\n    } else {\n      forwarder = new Forwarder(output, options);\n    }\n\n    this._forwarders.push(forwarder);\n    return forwarder;\n\n  }\n\n  /**\n   * Removes the specified [`Forwarder`](Forwarder) object from the input.\n   *\n   * @param {Forwarder} forwarder The [`Forwarder`](Forwarder) to remove (the\n   * [`Forwarder`](Forwarder) object is returned when calling `addForwarder()`.\n   */\n  removeForwarder(forwarder) {\n    this._forwarders = this._forwarders.filter(item => item !== forwarder);\n  }\n\n  /**\n   * Checks whether the specified [`Forwarder`](Forwarder) object has already been attached to this\n   * input.\n   *\n   * @param {Forwarder} forwarder The [`Forwarder`](Forwarder) to check for (the\n   * [`Forwarder`](Forwarder) object is returned when calling [`addForwarder()`](#addForwarder).\n   * @returns {boolean}\n   */\n  hasForwarder(forwarder) {\n    return this._forwarders.includes(forwarder);\n  }\n\n  /**\n   * Name of the MIDI input.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get name() {\n    return this._midiInput.name;\n  }\n\n  /**\n   * ID string of the MIDI port. The ID is host-specific. Do not expect the same ID on different\n   * platforms. For example, Google Chrome and the Jazz-Plugin report completely different IDs for\n   * the same port.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get id() {\n    return this._midiInput.id;\n  }\n\n  /**\n   * Input port's connection state: `pending`, `open` or `closed`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get connection() {\n    return this._midiInput.connection;\n  }\n\n  /**\n   * Name of the manufacturer of the device that makes this input port available.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get manufacturer() {\n    return this._midiInput.manufacturer;\n  }\n\n  /**\n   * An integer to offset the reported octave of incoming notes. By default, middle C (MIDI note\n   * number 60) is placed on the 4th octave (C4).\n   *\n   * If, for example, `octaveOffset` is set to 2, MIDI note number 60 will be reported as C6. If\n   * `octaveOffset` is set to -1, MIDI note number 60 will be reported as C3.\n   *\n   * Note that this value is combined with the global offset value defined in the\n   * [`WebMidi.octaveOffset`](WebMidi#octaveOffset) property (if any).\n   *\n   * @type {number}\n   *\n   * @since 3.0\n   */\n  get octaveOffset() {\n    return this._octaveOffset;\n  }\n  set octaveOffset(value) {\n\n    if (this.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n    }\n\n    this._octaveOffset = value;\n\n  }\n\n  /**\n   * State of the input port: `connected` or `disconnected`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get state() {\n    return this._midiInput.state;\n  }\n\n  /**\n   * The port type. In the case of the `Input` object, this is always: `input`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get type() {\n    return this._midiInput.type;\n  }\n\n  /**\n   * @type {boolean}\n   * @private\n   * @deprecated since v3.0.0 (moved to 'InputChannel' class)\n   */\n  get nrpnEventsEnabled() {\n    if (wm.validation) {\n      console.warn(\"The 'nrpnEventsEnabled' property has been moved to the 'InputChannel' class.\");\n    }\n    return false;\n  }\n\n}\n\n// Events that do not have code below them must be placed outside the class definition (?!)\n\n/**\n * Input-wide (system) event emitted when a **system exclusive** message has been received.\n * You should note that, to receive `sysex` events, you must call the\n * [`WebMidi.enable()`](WebMidi#enable()) method with the `sysex` option set to `true`:\n *\n * ```js\n * WebMidi.enable({sysex: true})\n *  .then(() => console.log(\"WebMidi has been enabled with sysex support.\"))\n * ```\n *\n * @event Input#sysex\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `sysex`\n *\n */\n\n/**\n * Input-wide (system) event emitted when a **time code quarter frame** message has been\n * received.\n *\n * @event Input#timecode\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `timecode`\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **song position** message has been received.\n *\n * @event Input#songposition\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `songposition`\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **song select** message has been received.\n *\n * @event Input#songselect\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} value Song (or sequence) number to select (0-127)\n * @property {string} rawValue Song (or sequence) number to select (0-127)\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **tune request** message has been received.\n *\n * @event Input#tunerequest\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `tunerequest`\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **timing clock** message has been received.\n *\n * @event Input#clock\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `clock`\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **start** message has been received.\n *\n * @event Input#start\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `start`\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **continue** message has been received.\n *\n * @event Input#continue\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `continue`\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **stop** message has been received.\n *\n * @event Input#stop\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `stop`\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when an **active sensing** message has been received.\n *\n * @event Input#activesensing\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `activesensing`\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **reset** message has been received.\n *\n * @event Input#reset\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `reset`\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when an unknown MIDI message has been received. It could\n * be, for example, one of the undefined/reserved messages.\n *\n * @event Input#unknownmessage\n *\n * @type {Object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `unknownmessage`\n *\n * @since 2.1\n */\n\n/**\n * The `WebMidi` object makes it easier to work with the low-level Web MIDI API. Basically, it\n * simplifies sending outgoing MIDI messages and reacting to incoming MIDI messages.\n *\n * When using the WebMidi.js library, you should know that the `WebMidi` class has already been\n * instantiated. You cannot instantiate it yourself. If you use the **IIFE** version, you should\n * simply use the global object called `WebMidi`. If you use the **CJS** (CommonJS) or **ESM** (ES6\n * module) version, you get an already-instantiated object when you import the module.\n *\n * @fires WebMidi#connected\n * @fires WebMidi#disabled\n * @fires WebMidi#disconnected\n * @fires WebMidi#enabled\n * @fires WebMidi#error\n * @fires WebMidi#midiaccessgranted\n * @fires WebMidi#portschanged\n *\n * @extends EventEmitter\n * @license Apache-2.0\n */\nclass WebMidi extends EventEmitter {\n\n  /**\n   * The WebMidi class is a singleton and you cannot instantiate it directly. It has already been\n   * instantiated for you.\n   */\n  constructor() {\n\n    super();\n\n    /**\n     * Object containing system-wide default values that can be changed to customize how the library\n     * works.\n     *\n     * @type {object}\n     *\n     * @property {object}  defaults.note - Default values relating to note\n     * @property {number}  defaults.note.attack - A number between 0 and 127 representing the\n     * default attack velocity of notes. Initial value is 64.\n     * @property {number}  defaults.note.release - A number between 0 and 127 representing the\n     * default release velocity of notes. Initial value is 64.\n     * @property {number}  defaults.note.duration - A number representing the default duration of\n     * notes (in seconds). Initial value is Infinity.\n     */\n    this.defaults = {\n      note: {\n        attack: Utilities.from7bitToFloat(64),\n        release: Utilities.from7bitToFloat(64),\n        duration: Infinity\n      }\n    };\n\n    /**\n     * The [`MIDIAccess`](https://developer.mozilla.org/en-US/docs/Web/API/MIDIAccess)\n     * instance used to talk to the lower-level Web MIDI API. This should not be used directly\n     * unless you know what you are doing.\n     *\n     * @type {MIDIAccess}\n     * @readonly\n     */\n    this.interface = null;\n\n    /**\n     * Indicates whether argument validation and backwards-compatibility checks are performed\n     * throughout the WebMidi.js library for object methods and property setters.\n     *\n     * This is an advanced setting that should be used carefully. Setting `validation` to `false`\n     * improves performance but should only be done once the project has been thoroughly tested with\n     * `validation` turned on.\n     *\n     * @type {boolean}\n     */\n    this.validation = true;\n\n    /**\n     * Array of all (Input) objects\n     * @type {Input[]}\n     * @private\n     */\n    this._inputs = [];\n\n    /**\n     * Array of disconnected [`Input`](Input) objects. This is used when inputs are plugged back in\n     * to retain their previous state.\n     * @type {Input[]}\n     * @private\n     */\n    this._disconnectedInputs = [];\n\n    /**\n     * Array of all [`Output`](Output) objects\n     * @type {Output[]}\n     * @private\n     */\n    this._outputs = [];\n\n    /**\n     * Array of disconnected [`Output`](Output) objects. This is used when outputs are plugged back\n     * in to retain their previous state.\n     * @type {Output[]}\n     * @private\n     */\n    this._disconnectedOutputs = [];\n\n    /**\n     * Array of statechange events to process. These events must be parsed synchronously so they do\n     * not override each other.\n     *\n     * @type {string[]}\n     * @private\n     */\n    this._stateChangeQueue = [];\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._octaveOffset = 0;\n\n  }\n\n  /**\n   * Checks if the Web MIDI API is available in the current environment and then tries to connect to\n   * the host's MIDI subsystem. This is an asynchronous operation and it causes a security prompt to\n   * be displayed to the user.\n   *\n   * To enable the use of MIDI system exclusive messages, the `sysex` option should be set to\n   * `true`. However, under some environments (e.g. Jazz-Plugin), the `sysex` option is ignored\n   * and system exclusive messages are always enabled. You can check the\n   * [`sysexEnabled`](#sysexEnabled) property to confirm.\n   *\n   * To enable access to software synthesizers available on the host, you would set the `software`\n   * option to `true`. However, this option is only there to future-proof the library as support for\n   * software synths has not yet been implemented in any browser (as of September 2021).\n   *\n   * By the way, if you call the [`enable()`](#enable) method while WebMidi.js is already enabled,\n   * the callback function will be executed (if any), the promise will resolve but the events\n   * ([`\"midiaccessgranted\"`](#event:midiaccessgranted), [`\"connected\"`](#event:connected) and\n   * [`\"enabled\"`](#event:enabled)) will not be fired.\n   *\n   * There are 3 ways to execute code after `WebMidi` has been enabled:\n   *\n   * - Pass a callback function in the `options`\n   * - Listen to the [`\"enabled\"`](#event:enabled) event\n   * - Wait for the promise to resolve\n   *\n   * In order, this is what happens towards the end of the enabling process:\n   *\n   * 1. [`\"midiaccessgranted\"`](#event:midiaccessgranted) event is triggered once the user has\n   * granted access to use MIDI.\n   * 2. [`\"connected\"`](#event:connected) events are triggered (for each available input and output)\n   * 3. [`\"enabled\"`](#event:enabled) event is triggered when WebMidi.js is fully ready\n   * 4. specified callback (if any) is executed\n   * 5. promise is resolved and fulfilled with the `WebMidi` object.\n   *\n   * **Important note**: starting with Chrome v77, a page using Web MIDI API must be hosted on a\n   * secure origin (`https://`, `localhost` or `file:///`) and the user will always be prompted to\n   * authorize the operation (no matter if the `sysex` option is `true` or not).\n   *\n   * ##### Example\n   * ```js\n   * // Enabling WebMidi and using the promise\n   * WebMidi.enable().then(() => {\n   *   console.log(\"WebMidi.js has been enabled!\");\n   * })\n   * ```\n   *\n   * @param [options] {object}\n   *\n   * @param [options.callback] {function} A function to execute once the operation completes. This\n   * function will receive an `Error` object if enabling the Web MIDI API failed.\n   *\n   * @param [options.sysex=false] {boolean} Whether to enable MIDI system exclusive messages or not.\n   *\n   * @param [options.validation=true] {boolean} Whether to enable library-wide validation of method\n   * arguments and setter values. This is an advanced setting that should be used carefully. Setting\n   * [`validation`](#validation) to `false` improves performance but should only be done once the\n   * project has been thoroughly tested with [`validation`](#validation)  turned on.\n   *\n   * @param [options.software=false] {boolean} Whether to request access to software synthesizers on\n   * the host system. This is part of the spec but has not yet been implemented by most browsers as\n   * of April 2020.\n   *\n   * @param [options.requestMIDIAccessFunction] {function} A custom function to use to return\n   * the MIDIAccess object. This is useful if you want to use a polyfill for the Web MIDI API\n   * or if you want to use a custom implementation of the Web MIDI API - probably for testing\n   * purposes.\n   *\n   * @async\n   *\n   * @returns {Promise.<WebMidi>} The promise is fulfilled with the `WebMidi` object for\n   * chainability\n   *\n   * @throws {Error} The Web MIDI API is not supported in your environment.\n   * @throws {Error} Jazz-Plugin must be installed to use WebMIDIAPIShim.\n   */\n  async enable(options = {}, legacy = false) {\n\n    /*START-ESM*/\n\n    // This block is stripped out of the IIFE and CJS versions where it isn't needed.\n\n    // If this code is executed by Node.js in \"module\" mode (when \"type\": \"module\" is used in the\n    // package.json file), then we must import the `jzz` module. I import it in this convoluted way\n    // to prevent Webpack from automatically bundling it in browser bundles where it isn't needed.\n    if (Utilities.isNode) {\n\n      // Some environments may have both Node.js and browser runtimes (Electron, NW.js, React\n      // Native, etc.) so we also check for the presence of the window.navigator property.\n      try {\n        window.navigator;\n      } catch (err) {\n        let jzz = await Object.getPrototypeOf(async function() {}).constructor(`\n        let jzz = await import(\"jzz\");\n        return jzz.default;\n        `)();\n        if (!global.navigator) global.navigator = {}; // for Node.js prior to v21\n        Object.assign(global.navigator, jzz);\n      }\n\n      // The `performance` module appeared in Node.js v8.5.0 but has started to be automatically\n      // imported only in v16+.\n      try {\n        performance;\n      } catch (err) {\n        global.performance = await Object.getPrototypeOf(async function() {}).constructor(`\n        let perf_hooks = await import(\"perf_hooks\");\n        return perf_hooks.performance;\n        `)();\n      }\n\n    }\n\n    /*END-ESM*/\n\n    this.validation = (options.validation !== false);\n\n    if (this.validation) {\n      // Backwards-compatibility. Previous syntax was: enable(callback, sysex)\n      if (typeof options === \"function\") options = {callback: options, sysex: legacy};\n      if (legacy) options.sysex = true;\n    }\n\n    // If already enabled, trigger callback and resolve promise but do not dispatch events.\n    if (this.enabled) {\n      if (typeof options.callback === \"function\") options.callback();\n      return Promise.resolve();\n    }\n\n    /**\n     * Event emitted when an error occurs trying to enable `WebMidi`\n     *\n     * @event WebMidi#error\n     * @type {object}\n     * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {WebMidi} target The object that triggered the event\n     * @property {string} type `error`\n     * @property {*} error Actual error that occurred\n     */\n    const errorEvent = {\n      timestamp: this.time,\n      target: this,\n      type: \"error\",\n      error: undefined\n    };\n\n    /**\n     * Event emitted once the MIDI interface has been successfully created (which implies user has\n     * granted access to MIDI).\n     *\n     * @event WebMidi#midiaccessgranted\n     * @type {object}\n     * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in milliseconds\n     * since the navigation start of the document).\n     * @property {WebMidi} target The object that triggered the event\n     * @property {string} type `midiaccessgranted`\n     */\n    const midiAccessGrantedEvent = {\n      timestamp: this.time,\n      target: this,\n      type: \"midiaccessgranted\"\n    };\n\n    /**\n     * Event emitted once `WebMidi` has been fully enabled\n     *\n     * @event WebMidi#enabled\n     * @type {object}\n     * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in milliseconds\n     * since the navigation start of the document).\n     * @property {WebMidi} target The object that triggered the event\n     * @property {string} type `\"enabled\"`\n     */\n    const enabledEvent = {\n      timestamp: this.time,\n      target: this,\n      type: \"enabled\"\n    };\n\n    // Request MIDI access (this is where the prompt will appear)\n    try {\n      if (typeof options.requestMIDIAccessFunction === \"function\") {\n        this.interface = await options.requestMIDIAccessFunction(\n          {sysex: options.sysex, software: options.software}\n        );\n      } else {\n        this.interface = await navigator.requestMIDIAccess(\n          {sysex: options.sysex, software: options.software}\n        );\n      }\n    } catch(err) {\n      errorEvent.error = err;\n      this.emit(\"error\", errorEvent);\n      if (typeof options.callback === \"function\") options.callback(err);\n      return Promise.reject(err);\n    }\n\n    // Now that the Web MIDI API interface has been created, we trigger the 'midiaccessgranted'\n    // event. This allows the developer an occasion to assign listeners on 'connected' events.\n    this.emit(\"midiaccessgranted\", midiAccessGrantedEvent);\n\n    // We setup the state change listener before creating the ports so that it properly catches the\n    // the ports' `connected` events\n    this.interface.onstatechange = this._onInterfaceStateChange.bind(this);\n\n    // Update inputs and outputs (this is where `Input` and `Output` objects are created).\n    try {\n      await this._updateInputsAndOutputs();\n    } catch (err) {\n      errorEvent.error = err;\n      this.emit(\"error\", errorEvent);\n      if (typeof options.callback === \"function\") options.callback(err);\n      return Promise.reject(err);\n    }\n\n    // If we make it here, the ports have been successfully created, so we trigger the 'enabled'\n    // event.\n    this.emit(\"enabled\", enabledEvent);\n\n    // Execute the callback (if any) and resolve the promise with 'this' (for chainability)\n    if (typeof options.callback === \"function\") options.callback();\n    return Promise.resolve(this);\n\n  }\n\n  /**\n   * Completely disables **WebMidi.js** by unlinking the MIDI subsystem's interface and closing all\n   * [`Input`](Input) and [`Output`](Output) objects that may have been opened. This also means that\n   * listeners added to [`Input`](Input) objects, [`Output`](Output) objects or to `WebMidi` itself\n   * are also destroyed.\n   *\n   * @async\n   * @returns {Promise<Array>}\n   *\n   * @throws {Error} The Web MIDI API is not supported by your environment.\n   *\n   * @since 2.0.0\n   */\n  async disable() {\n\n    // This needs to be done right away to prevent racing conditions in listeners while the inputs\n    // are being destroyed.\n    if (this.interface) this.interface.onstatechange = undefined;\n\n    return this._destroyInputsAndOutputs().then(() => {\n\n      if (navigator && typeof navigator.close === \"function\") navigator.close(); // jzz\n\n      this.interface = null; // also resets enabled, sysexEnabled\n\n      /**\n       * Event emitted once `WebMidi` has been successfully disabled.\n       *\n       * @event WebMidi#disabled\n       * @type {object}\n       * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {WebMidi} target The object that triggered the event\n       * @property {string} type `\"disabled\"`\n       */\n      let event = {\n        timestamp: this.time,\n        target: this,\n        type: \"disabled\"\n      };\n\n      // Finally, trigger the 'disabled' event and then remove all listeners.\n      this.emit(\"disabled\", event);\n      this.removeListener();\n\n    });\n\n  };\n\n  /**\n   * Returns the [`Input`](Input) object that matches the specified ID string or `false` if no\n   * matching input is found. As per the Web MIDI API specification, IDs are strings (not integers).\n   *\n   * Please note that IDs change from one host to another. For example, Chrome does not use the same\n   * kind of IDs as Jazz-Plugin.\n   *\n   * @param id {string} The ID string of the input. IDs can be viewed by looking at the\n   * [`WebMidi.inputs`](WebMidi#inputs) array. Even though they sometimes look like integers, IDs\n   * are strings.\n   * @param [options] {object}\n   * @param [options.disconnected] {boolean} Whether to retrieve a disconnected input\n   *\n   * @returns {Input} An [`Input`](Input) object matching the specified ID string or `undefined`\n   * if no matching input can be found.\n   *\n   * @throws {Error} WebMidi is not enabled.\n   *\n   * @since 2.0.0\n   */\n  getInputById(id, options = {disconnected: false}) {\n\n    if (this.validation) {\n      if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n      if (!id) return;\n    }\n\n    if (options.disconnected) {\n      for (let i = 0; i < this._disconnectedInputs.length; i++) {\n        if (this._disconnectedInputs[i].id === id.toString()) return this._disconnectedInputs[i];\n      }\n    } else {\n      for (let i = 0; i < this.inputs.length; i++) {\n        if (this.inputs[i].id === id.toString()) return this.inputs[i];\n      }\n    }\n\n  };\n\n  /**\n   * Returns the first [`Input`](Input) object whose name **contains** the specified string. Note\n   * that the port names change from one environment to another. For example, Chrome does not report\n   * input names in the same way as the Jazz-Plugin does.\n   *\n   * @param name {string} The non-empty string to look for within the name of MIDI inputs (such as\n   * those visible in the [inputs](WebMidi#inputs) array).\n   *\n   * @returns {Input} The [`Input`](Input) that was found or `undefined` if no input contained the\n   * specified name.\n   * @param [options] {object}\n   * @param [options.disconnected] {boolean} Whether to retrieve a disconnected input\n   *\n   * @throws {Error} WebMidi is not enabled.\n   *\n   * @since 2.0.0\n   */\n  getInputByName(name, options = {disconnected: false}) {\n\n    if (this.validation) {\n      if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n      if (!name) return;\n      name = name.toString();\n    }\n\n    if (options.disconnected) {\n      for (let i = 0; i < this._disconnectedInputs.length; i++) {\n        if (~this._disconnectedInputs[i].name.indexOf(name)) return this._disconnectedInputs[i];\n      }\n    } else {\n      for (let i = 0; i < this.inputs.length; i++) {\n        if (~this.inputs[i].name.indexOf(name)) return this.inputs[i];\n      }\n    }\n\n  };\n\n  /**\n   * Returns the first [`Output`](Output) object whose name **contains** the specified string. Note\n   * that the port names change from one environment to another. For example, Chrome does not report\n   * input names in the same way as the Jazz-Plugin does.\n   *\n   * @param name {string} The non-empty string to look for within the name of MIDI inputs (such as\n   * those visible in the [`outputs`](#outputs) array).\n   * @param [options] {object}\n   * @param [options.disconnected] {boolean} Whether to retrieve a disconnected output\n   *\n   * @returns {Output} The [`Output`](Output) that was found or `undefined` if no output matched\n   * the specified name.\n   *\n   * @throws {Error} WebMidi is not enabled.\n   *\n   * @since 2.0.0\n   */\n  getOutputByName(name, options = {disconnected: false}) {\n\n    if (this.validation) {\n      if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n      if (!name) return;\n      name = name.toString();\n    }\n\n    if (options.disconnected) {\n      for (let i = 0; i < this._disconnectedOutputs.length; i++) {\n        if (~this._disconnectedOutputs[i].name.indexOf(name)) return this._disconnectedOutputs[i];\n      }\n    } else {\n      for (let i = 0; i < this.outputs.length; i++) {\n        if (~this.outputs[i].name.indexOf(name)) return this.outputs[i];\n      }\n    }\n\n  };\n\n  /**\n   * Returns the [`Output`](Output) object that matches the specified ID string or `false` if no\n   * matching output is found. As per the Web MIDI API specification, IDs are strings (not\n   * integers).\n   *\n   * Please note that IDs change from one host to another. For example, Chrome does not use the same\n   * kind of IDs as Jazz-Plugin.\n   *\n   * @param id {string} The ID string of the port. IDs can be viewed by looking at the\n   * [`WebMidi.outputs`](WebMidi#outputs) array.\n   * @param [options] {object}\n   * @param [options.disconnected] {boolean} Whether to retrieve a disconnected output\n   *\n   * @returns {Output} An [`Output`](Output) object matching the specified ID string. If no\n   * matching output can be found, the method returns `undefined`.\n   *\n   * @throws {Error} WebMidi is not enabled.\n   *\n   * @since 2.0.0\n   */\n  getOutputById(id, options = {disconnected: false}) {\n\n    if (this.validation) {\n      if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n      if (!id) return;\n    }\n\n    if (options.disconnected) {\n      for (let i = 0; i < this._disconnectedOutputs.length; i++) {\n        if (this._disconnectedOutputs[i].id === id.toString()) return this._disconnectedOutputs[i];\n      }\n    } else {\n      for (let i = 0; i < this.outputs.length; i++) {\n        if (this.outputs[i].id === id.toString()) return this.outputs[i];\n      }\n    }\n\n  };\n\n  /**\n   * @private\n   * @deprecated since version 3.0.0, use Utilities.toNoteNumber() instead.\n   */\n  noteNameToNumber(name) {\n    if (this.validation) {\n      console.warn(\n        \"The noteNameToNumber() method is deprecated. Use \" +\n        \"Utilities.toNoteNumber() instead.\"\n      );\n    }\n    return Utilities.toNoteNumber(name, this.octaveOffset);\n  }\n\n  /**\n   * @private\n   * @deprecated since 3.0.0, use Utilities.getNoteDetails() instead.\n   */\n  getOctave(number) {\n\n    if (this.validation) {\n      console.warn(\"The getOctave()is deprecated. Use Utilities.getNoteDetails() instead\");\n      number = parseInt(number);\n    }\n\n    if (!isNaN(number) && number >= 0 && number <= 127) {\n      return Utilities.getNoteDetails(Utilities.offsetNumber(number, this.octaveOffset)).octave;\n    } else {\n      return false;\n    }\n\n  }\n\n  /**\n   * @private\n   * @deprecated since 3.0.0, use Utilities.sanitizeChannels() instead.\n   */\n  sanitizeChannels(channel) {\n\n    if (this.validation) {\n      console.warn(\"The sanitizeChannels() method has been moved to the utilities class.\");\n    }\n\n    return Utilities.sanitizeChannels(channel);\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0.0, use Utilities.sanitizeChannels() instead.\n   */\n  toMIDIChannels(channel) {\n\n    if (this.validation) {\n      console.warn(\n        \"The toMIDIChannels() method has been deprecated. Use Utilities.sanitizeChannels() instead.\"\n      );\n    }\n\n    return Utilities.sanitizeChannels(channel);\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0.0, use Utilities.guessNoteNumber() instead.\n   */\n  guessNoteNumber(input) {\n\n    if (this.validation) {\n      console.warn(\n        \"The guessNoteNumber() method has been deprecated. Use Utilities.guessNoteNumber() instead.\"\n      );\n    }\n\n    return Utilities.guessNoteNumber(input, this.octaveOffset);\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0.0, use Utilities.buildNoteArray() instead.\n   */\n  getValidNoteArray(notes, options = {}) {\n    if (this.validation) {\n      console.warn(\n        \"The getValidNoteArray() method has been moved to the Utilities.buildNoteArray()\"\n      );\n    }\n    return Utilities.buildNoteArray(notes, options);\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0.0, use Utilities.toTimestamp() instead.\n   */\n  convertToTimestamp(time) {\n\n    if (this.validation) {\n      console.warn(\n        \"The convertToTimestamp() method has been moved to Utilities.toTimestamp().\"\n      );\n    }\n\n    return Utilities.toTimestamp(time);\n\n  }\n\n  /**\n   * @return {Promise<void>}\n   * @private\n   */\n  async _destroyInputsAndOutputs() {\n\n    let promises = [];\n\n    this.inputs.forEach(input => promises.push(input.destroy()));\n    this.outputs.forEach(output => promises.push(output.destroy()));\n\n    return Promise.all(promises).then(() => {\n      this._inputs = [];\n      this._outputs = [];\n    });\n\n  }\n\n  /**\n   * @private\n   */\n  _onInterfaceStateChange(e) {\n\n    this._updateInputsAndOutputs();\n\n    /**\n     * Event emitted when an [`Input`](Input) or [`Output`](Output) port is connected or\n     * disconnected. This event is typically fired whenever a MIDI device is plugged in or\n     * unplugged. Please note that it may fire several times if a device possesses multiple inputs\n     * and/or outputs (which is often the case).\n     *\n     * @event WebMidi#portschanged\n     * @type {object}\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred\n     * (in milliseconds since the navigation start of the document).\n     * @property {string} type `portschanged`\n     * @property {WebMidi} target The object to which the listener was originally added (`WebMidi`)\n     * @property {Input|Output} port The [`Input`](Input) or [`Output`](Output) object that\n     * triggered the event.\n     *\n     * @since 3.0.2\n     */\n\n    /**\n     * Event emitted when an [`Input`](Input) or [`Output`](Output) becomes available. This event is\n     * typically fired whenever a MIDI device is plugged in. Please note that it may fire several\n     * times if a device possesses multiple inputs and/or outputs (which is often the case).\n     *\n     * @event WebMidi#connected\n     * @type {object}\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred\n     * (in milliseconds since the navigation start of the document).\n     * @property {string} type `connected`\n     * @property {WebMidi} target The object to which the listener was originally added (`WebMidi`)\n     * @property {Input|Output} port The [`Input`](Input) or [`Output`](Output) object that\n     * triggered the event.\n     */\n\n    /**\n     * Event emitted when an [`Input`](Input) or [`Output`](Output) becomes unavailable. This event\n     * is typically fired whenever a MIDI device is unplugged. Please note that it may fire several\n     * times if a device possesses multiple inputs and/or outputs (which is often the case).\n     *\n     * @event WebMidi#disconnected\n     * @type {object}\n     * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in milliseconds\n     * since the navigation start of the document).\n     * @property {string} type `disconnected`\n     * @property {WebMidi} target The object to which the listener was originally added (`WebMidi`)\n     * @property {Input|Output} port The [`Input`](Input) or [`Output`](Output) object that\n     * triggered the event.\n     */\n    let event = {\n      timestamp: e.timeStamp,\n      type: e.port.state,\n      target: this\n    };\n\n    // We check if \"connection\" is \"open\" because connected events are also triggered with\n    // \"connection=closed\"\n    if (e.port.state === \"connected\" && e.port.connection === \"open\") {\n\n      if (e.port.type === \"output\") {\n        event.port = this.getOutputById(e.port.id);\n      } else if (e.port.type === \"input\") {\n        event.port = this.getInputById(e.port.id);\n      }\n\n      // Emit \"connected\" event\n      this.emit(e.port.state, event);\n\n      // Make a shallow copy of the event so we can use it for the \"portschanged\" event\n      const portsChangedEvent = Object.assign({}, event);\n      portsChangedEvent.type = \"portschanged\";\n      this.emit(portsChangedEvent.type, portsChangedEvent);\n\n    // We check if \"connection\" is \"pending\" because we do not always get the \"closed\" event\n    } else if (e.port.state === \"disconnected\" && e.port.connection === \"pending\") {\n\n      if (e.port.type === \"input\") {\n        event.port = this.getInputById(e.port.id, {disconnected: true});\n      } else if (e.port.type === \"output\") {\n        event.port = this.getOutputById(e.port.id, {disconnected: true});\n      }\n\n      // Emit \"disconnected\" event\n      this.emit(e.port.state, event);\n\n      // Make a shallow copy of the event so we can use it for the \"portschanged\" event\n      const portsChangedEvent = Object.assign({}, event);\n      portsChangedEvent.type = \"portschanged\";\n      this.emit(portsChangedEvent.type, portsChangedEvent);\n\n    }\n\n  };\n\n  /**\n   * @private\n   */\n  async _updateInputsAndOutputs() {\n\n    return Promise.all([\n      this._updateInputs(),\n      this._updateOutputs()\n    ]);\n\n  };\n\n  /**\n   * @private\n   */\n  async _updateInputs() {\n\n    // We must check for the existence of this.interface because it might have been closed via\n    // WebMidi.disable().\n    if (!this.interface) return;\n\n    // Check for items to remove from the existing array (because they are no longer being reported\n    // by the MIDI back-end).\n    for (let i = this._inputs.length - 1; i >= 0; i--) {\n      const current = this._inputs[i];\n      const inputs = Array.from(this.interface.inputs.values());\n      if (! inputs.find(input => input === current._midiInput)) {\n        // Instead of destroying removed inputs, we stash them in case they come back (which is the\n        // case when the computer goes to sleep and is later brought back online).\n        this._disconnectedInputs.push(current);\n        this._inputs.splice(i, 1);\n      }\n    }\n\n    // Array to hold pending promises from trying to open all input ports\n    let promises = [];\n\n    // Add new inputs (if not already present)\n    this.interface.inputs.forEach(nInput => {\n\n      // Check if the input is currently absent from the 'inputs' array.\n      if (! this._inputs.find(input => input._midiInput === nInput) ) {\n\n        // If the input has previously been stashed away, reuse it. If not, create a new one.\n        let input = this._disconnectedInputs.find(input => input._midiInput === nInput);\n        if (!input) input = new Input(nInput);\n        this._inputs.push(input);\n        promises.push(input.open());\n\n      }\n\n    });\n\n    // Return a promise that resolves when all promises have resolved\n    return Promise.all(promises);\n\n  };\n\n  /**\n   * @private\n   */\n  async _updateOutputs() {\n\n    // We must check for the existence of this.interface because it might have been closed via\n    // WebMidi.disable().\n    if (!this.interface) return;\n\n    // Check for items to remove from the existing array (because they are no longer being reported\n    // by the MIDI back-end).\n    for (let i = this._outputs.length - 1; i >= 0; i--) {\n      const current = this._outputs[i];\n      const outputs = Array.from(this.interface.outputs.values());\n      if (! outputs.find(output => output === current._midiOutput)) {\n        // Instead of destroying removed inputs, we stash them in case they come back (which is the\n        // case when the computer goes to sleep and is later brought back online).\n        this._disconnectedOutputs.push(current);\n        this._outputs.splice(i, 1);\n      }\n    }\n\n    // Array to hold pending promises from trying to open all output ports\n    let promises = [];\n\n    // Add new outputs (if not already present)\n    this.interface.outputs.forEach(nOutput => {\n\n      // Check if the output is currently absent from the 'outputs' array.\n      if (! this._outputs.find(output => output._midiOutput === nOutput) ) {\n\n        // If the output has previously been stashed away, reuse it. If not, create a new one.\n        let output = this._disconnectedOutputs.find(output => output._midiOutput === nOutput);\n        if (!output) output = new Output(nOutput);\n        this._outputs.push(output);\n        promises.push(output.open());\n\n      }\n\n    });\n\n    // Return a promise that resolves when all sub-promises have resolved\n    return Promise.all(promises);\n\n  };\n\n  // injectPluginMarkup(parent) {\n  //\n  //   // Silently ignore on Node.js\n  //   if (Utilities.isNode) return;\n  //\n  //   // Default to <body> if no parent is specified\n  //   if (!(parent instanceof Element) && !(parent instanceof HTMLDocument)) {\n  //     parent = document.body;\n  //   }\n  //\n  //   // IE10 needs this:\n  //   // <meta http-equiv=\"X-UA-Compatible\" content=\"requiresActiveX=true\"/>\n  //\n  //   // Create markup and add to parent\n  //   const obj = document.createElement(\"object\");\n  //   obj.classid = \"CLSID:1ACE1618-1C7D-4561-AEE1-34842AA85E90\"; // IE\n  //   if (!obj.isJazz) obj.type = \"audio/x-jazz\";                 // Standards-compliant\n  //   obj.style.visibility = \"hidden\";\n  //   obj.style.width = obj.style.height = \"0px\";\n  //   parent.appendChild(obj);\n  //\n  // }\n\n  /**\n   * Indicates whether access to the host's MIDI subsystem is active or not.\n   *\n   * @readonly\n   * @type {boolean}\n   */\n  get enabled() {\n    return this.interface !== null;\n  }\n\n  /**\n   * An array of all currently available MIDI inputs.\n   *\n   * @readonly\n   * @type {Input[]}\n   */\n  get inputs() {\n    return this._inputs;\n  }\n\n  /**\n   * @private\n   * @deprecated\n   */\n  get isNode() {\n\n    if (this.validation) {\n      console.warn(\"WebMidi.isNode has been deprecated. Use Utilities.isNode instead.\");\n    }\n\n    return Utilities.isNode;\n\n  }\n\n  /**\n   * @private\n   * @deprecated\n   */\n  get isBrowser() {\n\n    if (this.validation) {\n      console.warn(\"WebMidi.isBrowser has been deprecated. Use Utilities.isBrowser instead.\");\n    }\n\n    return Utilities.isBrowser;\n\n  }\n\n  /**\n   * An integer to offset the octave of notes received from external devices or sent to external\n   * devices.\n   *\n   * When a MIDI message comes in on an input channel the reported note name will be offset. For\n   * example, if the `octaveOffset` is set to `-1` and a [`\"noteon\"`](InputChannel#event:noteon)\n   * message with MIDI number 60 comes in, the note will be reported as C3 (instead of C4).\n   *\n   * By the same token, when [`OutputChannel.playNote()`](OutputChannel#playNote) is called, the\n   * MIDI note number being sent will be offset. If `octaveOffset` is set to `-1`, the MIDI note\n   * number sent will be 72 (instead of 60).\n   *\n   * @type {number}\n   *\n   * @since 2.1\n   */\n  get octaveOffset() {\n    return this._octaveOffset;\n  }\n  set octaveOffset(value) {\n\n    if (this.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n    }\n\n    this._octaveOffset = value;\n\n  }\n\n  /**\n   * An array of all currently available MIDI outputs as [`Output`](Output) objects.\n   *\n   * @readonly\n   * @type {Output[]}\n   */\n  get outputs() {\n    return this._outputs;\n  }\n\n  /**\n   * Indicates whether the environment provides support for the Web MIDI API or not.\n   *\n   * **Note**: in environments that do not offer built-in MIDI support, this will report `true` if\n   * the\n   * [`navigator.requestMIDIAccess`](https://developer.mozilla.org/en-US/docs/Web/API/MIDIAccess)\n   * function is available. For example, if you have installed WebMIDIAPIShim.js but no plugin, this\n   * property will be `true` even though actual support might not be there.\n   *\n   * @readonly\n   * @type {boolean}\n   */\n  get supported() {\n    return (typeof navigator !== \"undefined\" && navigator.requestMIDIAccess);\n  }\n\n  /**\n   * Indicates whether MIDI system exclusive messages have been activated when WebMidi.js was\n   * enabled via the [`enable()`](#enable) method.\n   *\n   * @readonly\n   * @type boolean\n   */\n  get sysexEnabled() {\n    return !!(this.interface && this.interface.sysexEnabled);\n  }\n\n  /**\n   * The elapsed time, in milliseconds, since the time\n   * [origin](https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp#The_time_origin).\n   * Said simply, it is the number of milliseconds that passed since the page was loaded. Being a\n   * floating-point number, it has sub-millisecond accuracy. According to the\n   * [documentation](https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp), the\n   * time should be accurate to 5 µs (microseconds). However, due to various constraints, the\n   * browser might only be accurate to one millisecond.\n   *\n   * Note: `WebMidi.time` is simply an alias to `performance.now()`.\n   *\n   * @type {DOMHighResTimeStamp}\n   * @readonly\n   */\n  get time() {\n    return performance.now();\n  }\n\n  /**\n   * The version of the library as a [semver](https://semver.org/) string.\n   *\n   * @readonly\n   * @type string\n   */\n  get version() {\n    return \"3.1.8\";\n  }\n\n  /**\n   * The flavour of the library. Can be one of:\n   *\n   * * `esm`: ECMAScript Module\n   * * `cjs`: CommonJS Module\n   * * `iife`: Immediately-Invoked Function Expression\n   *\n   * @readonly\n   * @type string\n   * @since 3.0.25\n   */\n  get flavour() {\n    return \"esm\"; // will be replaced during bundling by the correct identifier\n  }\n\n  /**\n   * @private\n   * @deprecated since 3.0.0. Use Enumerations.CHANNEL_EVENTS instead.\n   */\n  get CHANNEL_EVENTS() {\n    if (this.validation) {\n      console.warn(\n        \"The CHANNEL_EVENTS enum has been moved to Enumerations.CHANNEL_EVENTS.\"\n      );\n    }\n    return Enumerations.CHANNEL_EVENTS;\n  }\n\n  /**\n   * @private\n   * @deprecated since 3.0.0. Use Enumerations.SYSTEM_MESSAGES instead.\n   */\n  get MIDI_SYSTEM_MESSAGES() {\n\n    if (this.validation) {\n      console.warn(\n        \"The MIDI_SYSTEM_MESSAGES enum has been moved to \" +\n        \"Enumerations.SYSTEM_MESSAGES.\"\n      );\n    }\n\n    return Enumerations.SYSTEM_MESSAGES;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since 3.0.0. Use Enumerations.CHANNEL_MODE_MESSAGES instead\n   */\n  get MIDI_CHANNEL_MODE_MESSAGES() {\n\n    if (this.validation) {\n      console.warn(\n        \"The MIDI_CHANNEL_MODE_MESSAGES enum has been moved to \" +\n        \"Enumerations.CHANNEL_MODE_MESSAGES.\"\n      );\n    }\n\n    return Enumerations.CHANNEL_MODE_MESSAGES;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since 3.0.0. Use Enumerations.CONTROL_CHANGE_MESSAGES instead.\n   */\n  get MIDI_CONTROL_CHANGE_MESSAGES() {\n\n    if (this.validation) {\n      console.warn(\n        \"The MIDI_CONTROL_CHANGE_MESSAGES enum has been replaced by the \" +\n        \"Enumerations.CONTROL_CHANGE_MESSAGES array.\"\n      );\n    }\n\n    return Enumerations.MIDI_CONTROL_CHANGE_MESSAGES;\n\n  }\n\n  /**\n   * @deprecated since 3.0.0. Use Enumerations.REGISTERED_PARAMETERS instead.\n   * @private\n   */\n  get MIDI_REGISTERED_PARAMETER() {\n\n    if (this.validation) {\n      console.warn(\n        \"The MIDI_REGISTERED_PARAMETER enum has been moved to \" +\n        \"Enumerations.REGISTERED_PARAMETERS.\"\n      );\n    }\n\n    return Enumerations.REGISTERED_PARAMETERS;\n\n  }\n\n  /**\n   * @deprecated since 3.0.0.\n   * @private\n   */\n  get NOTES() {\n\n    if (this.validation) {\n      console.warn(\"The NOTES enum has been deprecated.\");\n    }\n\n    return [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\n  }\n\n}\n\n// Export singleton instance of WebMidi class. The 'constructor' is nulled so that it cannot be used\n// to instantiate a new WebMidi object or extend it. However, it is not freezed so it remains\n// extensible (properties can be added at will).\nconst wm = new WebMidi();\nwm.constructor = null;\n\nexport { Enumerations, Forwarder, Input, InputChannel, Message, Note, Output, OutputChannel, Utilities, wm as WebMidi };\n","/*\nmidi.mjs - <short description TODO>\nCopyright (C) 2022 Strudel contributors - see <https://github.com/tidalcycles/strudel/blob/main/packages/midi/midi.mjs>\nThis program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport * as _WebMidi from 'webmidi';\nimport { Pattern, isPattern, logger, ref } from '@strudel/core';\nimport { noteToMidi } from '@strudel/core';\nimport { Note } from 'webmidi';\n// if you use WebMidi from outside of this package, make sure to import that instance:\nexport const { WebMidi } = _WebMidi;\n\nfunction supportsMidi() {\n  return typeof navigator.requestMIDIAccess === 'function';\n}\n\nfunction getMidiDeviceNamesString(devices) {\n  return devices.map((o) => `'${o.name}'`).join(' | ');\n}\n\nexport function enableWebMidi(options = {}) {\n  const { onReady, onConnected, onDisconnected, onEnabled } = options;\n  if (WebMidi.enabled) {\n    return;\n  }\n  if (!supportsMidi()) {\n    throw new Error('Your Browser does not support WebMIDI.');\n  }\n  WebMidi.addListener('connected', () => {\n    onConnected?.(WebMidi);\n  });\n  WebMidi.addListener('enabled', () => {\n    onEnabled?.(WebMidi);\n  });\n  // Reacting when a device becomes unavailable\n  WebMidi.addListener('disconnected', (e) => {\n    onDisconnected?.(WebMidi, e);\n  });\n  return new Promise((resolve, reject) => {\n    if (WebMidi.enabled) {\n      // if already enabled, just resolve WebMidi\n      resolve(WebMidi);\n      return;\n    }\n    WebMidi.enable((err) => {\n      if (err) {\n        reject(err);\n      }\n      onReady?.(WebMidi);\n      resolve(WebMidi);\n    });\n  });\n}\n\nfunction getDevice(indexOrName, devices) {\n  if (!devices.length) {\n    throw new Error(`🔌 No MIDI devices found. Connect a device or enable IAC Driver.`);\n  }\n  if (typeof indexOrName === 'number') {\n    return devices[indexOrName];\n  }\n  const byName = (name) => devices.find((output) => output.name.includes(name));\n  if (typeof indexOrName === 'string') {\n    return byName(indexOrName);\n  }\n  // attempt to default to first IAC device if none is specified\n  const IACOutput = byName('IAC');\n  const device = IACOutput ?? devices[0];\n  if (!device) {\n    throw new Error(\n      `🔌 MIDI device '${device ? device : ''}' not found. Use one of ${getMidiDeviceNamesString(devices)}`,\n    );\n  }\n\n  return IACOutput ?? devices[0];\n}\n\n// send start/stop messages to outputs when repl starts/stops\nif (typeof window !== 'undefined') {\n  window.addEventListener('message', (e) => {\n    if (!WebMidi?.enabled) {\n      return;\n    }\n    if (e.data === 'strudel-stop') {\n      WebMidi.outputs.forEach((output) => output.sendStop());\n    }\n    // cannot start here, since we have no timing info, see sendStart below\n  });\n}\n\nPattern.prototype.midi = function (output) {\n  if (isPattern(output)) {\n    throw new Error(\n      `.midi does not accept Pattern input. Make sure to pass device name with single quotes. Example: .midi('${\n        WebMidi.outputs?.[0]?.name || 'IAC Driver Bus 1'\n      }')`,\n    );\n  }\n\n  enableWebMidi({\n    onEnabled: ({ outputs }) => {\n      const device = getDevice(output, outputs);\n      const otherOutputs = outputs.filter((o) => o.name !== device.name);\n      logger(\n        `Midi enabled! Using \"${device.name}\". ${\n          otherOutputs?.length ? `Also available: ${getMidiDeviceNamesString(otherOutputs)}` : ''\n        }`,\n      );\n    },\n    onDisconnected: ({ outputs }) =>\n      logger(`Midi device disconnected! Available: ${getMidiDeviceNamesString(outputs)}`),\n  });\n\n  return this.onTrigger((time, hap, currentTime, cps) => {\n    if (!WebMidi.enabled) {\n      console.log('not enabled');\n      return;\n    }\n    const device = getDevice(output, WebMidi.outputs);\n    hap.ensureObjectValue();\n\n    const offset = (time - currentTime) * 1000;\n    // passing a string with a +num into the webmidi api adds an offset to the current time https://webmidijs.org/api/classes/Output\n    const timeOffsetString = `+${offset}`;\n\n    // destructure value\n    let { note, nrpnn, nrpv, ccn, ccv, midichan = 1, midicmd, gain = 1, velocity = 0.9 } = hap.value;\n\n    velocity = gain * velocity;\n\n    // note off messages will often a few ms arrive late, try to prevent glitching by subtracting from the duration length\n    const duration = Math.floor((hap.duration.valueOf() / cps) * 1000 - 10);\n    if (note != null) {\n      const midiNumber = typeof note === 'number' ? note : noteToMidi(note);\n      const midiNote = new Note(midiNumber, { attack: velocity, duration });\n      device.playNote(midiNote, midichan, {\n        time: timeOffsetString,\n      });\n    }\n    if (ccv !== undefined && ccn !== undefined) {\n      if (typeof ccv !== 'number' || ccv < 0 || ccv > 1) {\n        throw new Error('expected ccv to be a number between 0 and 1');\n      }\n      if (!['string', 'number'].includes(typeof ccn)) {\n        throw new Error('expected ccn to be a number or a string');\n      }\n      const scaled = Math.round(ccv * 127);\n      device.sendControlChange(ccn, scaled, midichan, { time: timeOffsetString });\n    }\n    if (hap.whole.begin + 0 === 0) {\n      // we need to start here because we have the timing info\n      device.sendStart({ time: timeOffsetString });\n    }\n    if (['clock', 'midiClock'].includes(midicmd)) {\n      device.sendClock({ time: timeOffsetString });\n    } else if (['start'].includes(midicmd)) {\n      device.sendStart({ time: timeOffsetString });\n    } else if (['stop'].includes(midicmd)) {\n      device.sendStop({ time: timeOffsetString });\n    } else if (['continue'].includes(midicmd)) {\n      device.sendContinue({ time: timeOffsetString });\n    }\n  });\n};\n\nlet listeners = {};\nconst refs = {};\n\nexport async function midin(input) {\n  if (isPattern(input)) {\n    throw new Error(\n      `.midi does not accept Pattern input. Make sure to pass device name with single quotes. Example: .midi('${\n        WebMidi.outputs?.[0]?.name || 'IAC Driver Bus 1'\n      }')`,\n    );\n  }\n  const initial = await enableWebMidi(); // only returns on first init\n  const device = getDevice(input, WebMidi.inputs);\n  if (initial || WebMidi.enabled) {\n    const otherInputs = WebMidi.inputs.filter((o) => o.name !== device.name);\n    logger(\n      `Midi enabled! Using \"${device.name}\". ${\n        otherInputs?.length ? `Also available: ${getMidiDeviceNamesString(otherInputs)}` : ''\n      }`,\n    );\n    refs[input] = {};\n  }\n  const cc = (cc) => ref(() => refs[input][cc] || 0);\n\n  listeners[input] && device.removeListener('midimessage', listeners[input]);\n  listeners[input] = (e) => {\n    const cc = e.dataBytes[0];\n    const v = e.dataBytes[1];\n    refs[input] && (refs[input][cc] = v / 127);\n  };\n  device.addListener('midimessage', listeners[input]);\n  return cc;\n}\n"],"names":["WebMidi"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,YAAY,CAAC;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,WAAW,CAAC,eAAe,GAAG,KAAK,EAAE;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,CAAC,eAAe,GAAG,eAAe,IAAI,IAAI,GAAG,IAAI,GAAG,KAAK,CAAC;AAClE;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,WAAW,CAAC,KAAK,EAAE,QAAQ,EAAE,OAAO,GAAG,EAAE,EAAE;AAC7C;AACA,IAAI;AACJ,MAAM,CAAC,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC;AACpD,OAAO,KAAK,YAAY,MAAM,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;AACnD,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,EAAE,KAAK,YAAY,MAAM,CAAC,IAAI,KAAK,KAAK,YAAY,CAAC,SAAS,CAAC;AACnG,MAAM;AACN,MAAM,MAAM,IAAI,SAAS,CAAC,mEAAmE,CAAC,CAAC;AAC/F,KAAK;AACL;AACA,IAAI,IAAI,OAAO,QAAQ,KAAK,UAAU,EAAE,MAAM,IAAI,SAAS,CAAC,kCAAkC,CAAC,CAAC;AAChG;AACA,IAAI,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;AAClE;AACA,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;AACzD;AACA,IAAI,IAAI,OAAO,CAAC,OAAO,EAAE;AACzB,MAAM,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC7C,KAAK,MAAM;AACX,MAAM,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAC1C,KAAK;AACL;AACA,IAAI,OAAO,QAAQ,CAAC;AACpB;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,kBAAkB,CAAC,KAAK,EAAE,QAAQ,EAAE,OAAO,GAAG,EAAE,EAAE;AACpD,IAAI,OAAO,CAAC,SAAS,GAAG,CAAC,CAAC;AAC1B,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;AAC/C,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,WAAW,SAAS,GAAG;AACzB,IAAI,OAAO,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;AACnC,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,WAAW,CAAC,KAAK,EAAE,QAAQ,EAAE;AAC/B;AACA,IAAI,IAAI,KAAK,KAAK,SAAS,EAAE;AAC7B;AACA;AACA,MAAM;AACN,QAAQ,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,MAAM,GAAG,CAAC;AACjG,QAAQ;AACR,QAAQ,OAAO,IAAI,CAAC;AACpB,OAAO;AACP;AACA;AACA,MAAM,OAAO,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,KAAK;AAC/D,QAAQ,OAAO,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;AAChC,OAAO,CAAC,CAAC;AACT;AACA,KAAK,MAAM;AACX;AACA,MAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;AACnE;AACA,QAAQ,IAAI,QAAQ,YAAY,QAAQ,EAAE;AAC1C,UAAU,IAAI,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,QAAQ,IAAI,QAAQ,KAAK,QAAQ,CAAC,CAAC;AACtF,UAAU,OAAO,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;AACnC,SAAS,MAAM,IAAI,OAAO,QAAQ,KAAK,UAAU,EAAE;AACnD,UAAU,IAAI,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,QAAQ,IAAI,QAAQ,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC;AAC/F,UAAU,OAAO,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;AACnC,SAAS,MAAM,IAAI,QAAQ,IAAI,SAAS,EAAE;AAC1C,UAAU,OAAO,KAAK,CAAC;AACvB,SAAS;AACT;AACA,QAAQ,OAAO,IAAI,CAAC;AACpB;AACA,OAAO,MAAM;AACb,QAAQ,OAAO,KAAK,CAAC;AACrB,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,IAAI,UAAU,GAAG;AACnB,IAAI,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACtC,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,YAAY,CAAC,KAAK,EAAE;AACtB,IAAI,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;AACtC,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,YAAY,CAAC,KAAK,EAAE;AACtB,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,QAAQ,IAAI;AACjD,MAAM,QAAQ,CAAC,SAAS,GAAG,IAAI,CAAC;AAChC,KAAK,CAAC,CAAC;AACP,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,cAAc,CAAC,KAAK,EAAE;AACxB,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,QAAQ,IAAI;AACjD,MAAM,QAAQ,CAAC,SAAS,GAAG,KAAK,CAAC;AACjC,KAAK,CAAC,CAAC;AACP,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,gBAAgB,CAAC,KAAK,EAAE;AAC1B,IAAI,OAAO,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC;AAC3C,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,IAAI,CAAC,KAAK,EAAE,GAAG,IAAI,EAAE;AACvB;AACA,IAAI,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,EAAE,KAAK,YAAY,MAAM,CAAC,EAAE;AACjE,MAAM,MAAM,IAAI,SAAS,CAAC,yCAAyC,CAAC,CAAC;AACrE,KAAK;AACL;AACA,IAAI,IAAI,IAAI,CAAC,eAAe,EAAE,OAAO;AACrC;AACA;AACA,IAAI,IAAI,OAAO,GAAG,EAAE,CAAC;AACrB;AACA;AACA;AACA,IAAI,IAAI,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;AAChE,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;AACjF;AACA,IAAI,SAAS,CAAC,OAAO,CAAC,QAAQ,IAAI;AAClC;AACA;AACA,MAAM,IAAI,QAAQ,CAAC,SAAS,EAAE,OAAO;AACrC;AACA,MAAM,IAAI,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC;AAC7B,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;AACxF;AACA,MAAM,IAAI,QAAQ,CAAC,SAAS,GAAG,CAAC,EAAE;AAClC,QAAQ,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;AACxE,QAAQ,QAAQ,CAAC,KAAK,EAAE,CAAC;AACzB,OAAO;AACP;AACA,MAAM,IAAI,EAAE,QAAQ,CAAC,SAAS,GAAG,CAAC,EAAE,QAAQ,CAAC,MAAM,EAAE,CAAC;AACtD;AACA,KAAK,CAAC,CAAC;AACP;AACA,IAAI,OAAO,OAAO,CAAC;AACnB;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,cAAc,CAAC,KAAK,EAAE,QAAQ,EAAE,OAAO,GAAG,EAAE,EAAE;AAChD;AACA,IAAI,IAAI,KAAK,KAAK,SAAS,EAAE;AAC7B,MAAM,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;AACzB,MAAM,OAAO;AACb,KAAK,MAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;AACtC,MAAM,OAAO;AACb,KAAK;AACL;AACA;AACA,IAAI,IAAI,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,QAAQ,IAAI;AAC5D;AACA,MAAM,OAAO,CAAC,QAAQ,IAAI,QAAQ,CAAC,QAAQ,KAAK,QAAQ;AACxD,SAAS,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC,SAAS,KAAK,QAAQ,CAAC,SAAS,CAAC;AACvE,SAAS,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,KAAK,QAAQ,CAAC,OAAO,CAAC,CAAC;AAClE;AACA,KAAK,CAAC,CAAC;AACP;AACA,IAAI,IAAI,SAAS,CAAC,MAAM,EAAE;AAC1B,MAAM,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC;AACvC,KAAK,MAAM;AACX,MAAM,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AAClC,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,MAAM,OAAO,CAAC,KAAK,EAAE,OAAO,GAAG,EAAE,EAAE;AACrC;AACA,IAAI,OAAO,CAAC,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AAClD,IAAI,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,OAAO,CAAC,QAAQ,IAAI,CAAC,EAAE,OAAO,CAAC,QAAQ,GAAG,QAAQ,CAAC;AACtF;AACA,IAAI,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK;AAC5C;AACA,MAAM,IAAI,OAAO,CAAC;AAClB;AACA,MAAM,IAAI,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,MAAM;AACnD,QAAQ,YAAY,CAAC,OAAO,CAAC,CAAC;AAC9B,QAAQ,OAAO,EAAE,CAAC;AAClB,OAAO,EAAE,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;AACzB;AACA,MAAM,IAAI,OAAO,CAAC,QAAQ,KAAK,QAAQ,EAAE;AACzC,QAAQ,OAAO,GAAG,UAAU,CAAC,MAAM;AACnC,UAAU,QAAQ,CAAC,MAAM,EAAE,CAAC;AAC5B,UAAU,MAAM,CAAC,oDAAoD,CAAC,CAAC;AACvE,SAAS,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC7B,OAAO;AACP;AACA,KAAK,CAAC,CAAC;AACP;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,IAAI,UAAU,GAAG;AACnB,IAAI,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC;AAC7C,GAAG;AACH;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,QAAQ,CAAC;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,WAAW,CAAC,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,GAAG,EAAE,EAAE;AACrD;AACA,IAAI;AACJ,MAAM,OAAO,KAAK,KAAK,QAAQ;AAC/B,MAAM,EAAE,KAAK,YAAY,MAAM,CAAC;AAChC,MAAM,KAAK,KAAK,YAAY,CAAC,SAAS;AACtC,MAAM;AACN,MAAM,MAAM,IAAI,SAAS,CAAC,mEAAmE,CAAC,CAAC;AAC/F,KAAK;AACL;AACA,IAAI,IAAI,CAAC,MAAM,EAAE;AACjB,MAAM,MAAM,IAAI,cAAc,CAAC,sCAAsC,CAAC,CAAC;AACvE,KAAK;AACL;AACA,IAAI,IAAI,OAAO,QAAQ,KAAK,UAAU,EAAE;AACxC,MAAM,MAAM,IAAI,SAAS,CAAC,oCAAoC,CAAC,CAAC;AAChE,KAAK;AACL;AACA;AACA,IAAI,IAAI,OAAO,CAAC,SAAS,KAAK,SAAS,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;AAC9E,MAAM,OAAO,CAAC,SAAS,GAAG,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;AAC9C,KAAK;AACL;AACA;AACA,IAAI,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC;AAC5B,MAAM,OAAO,EAAE,MAAM;AACrB,MAAM,SAAS,EAAE,QAAQ;AACzB,MAAM,SAAS,EAAE,SAAS;AAC1B,MAAM,QAAQ,EAAE,QAAQ;AACxB,KAAK,EAAE,OAAO,CAAC,CAAC;AAChB;AACA;AACA,IAAI,IAAI,OAAO,CAAC,QAAQ,KAAK,QAAQ,EAAE;AACvC,MAAM,UAAU,CAAC,MAAM,IAAI,CAAC,MAAM,EAAE,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC;AACxD,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;AACvC;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;AACnC;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;AACnB;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;AACvB;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,QAAQ,CAAC;AAC/F;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;AAC3B;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AACzB;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,EAAE,MAAM,GAAG;AACX,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc;AAC9B,MAAM,IAAI,CAAC,KAAK;AAChB,MAAM,IAAI,CAAC,QAAQ;AACnB,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC;AACxD,KAAK,CAAC;AACN,GAAG;AACH;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,YAAY,CAAC;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,WAAW,qBAAqB,GAAG;AACrC;AACA,IAAI,IAAI,IAAI,CAAC,UAAU,EAAE;AACzB,MAAM,OAAO,CAAC,IAAI;AAClB,QAAQ,8DAA8D;AACtE,QAAQ,6CAA6C;AACrD,OAAO,CAAC;AACR,KAAK;AACL;AACA,IAAI,OAAO,YAAY,CAAC,gBAAgB,CAAC;AACzC;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,WAAW,gBAAgB,GAAG;AAChC;AACA,IAAI,OAAO;AACX,MAAM,OAAO,EAAE,GAAG;AAClB,MAAM,MAAM,EAAE,GAAG;AACjB,MAAM,aAAa,EAAE,GAAG;AACxB,MAAM,aAAa,EAAE,GAAG;AACxB,MAAM,aAAa,EAAE,GAAG;AACxB,MAAM,iBAAiB,EAAE,GAAG;AAC5B,MAAM,SAAS,EAAE,GAAG;AACpB,KAAK,CAAC;AACN;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,WAAW,eAAe,GAAG;AAC/B,IAAI,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;AACnE,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,WAAW,oBAAoB,GAAG;AACpC;AACA,IAAI,IAAI,IAAI,CAAC,UAAU,EAAE;AACzB,MAAM,OAAO,CAAC,IAAI;AAClB,QAAQ,8DAA8D;AACtE,QAAQ,6CAA6C;AACrD,OAAO,CAAC;AACR,KAAK;AACL;AACA,IAAI,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;AACnE;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,WAAW,qBAAqB,GAAG;AACrC;AACA,IAAI,OAAO;AACX,MAAM,WAAW,EAAE,GAAG;AACtB,MAAM,mBAAmB,EAAE,GAAG;AAC9B,MAAM,YAAY,EAAE,GAAG;AACvB,MAAM,WAAW,EAAE,GAAG;AACtB,MAAM,WAAW,EAAE,GAAG;AACtB,MAAM,UAAU,EAAE,GAAG;AACrB,MAAM,UAAU,EAAE,GAAG;AACrB,MAAM,UAAU,EAAE,GAAG;AACrB,KAAK,CAAC;AACN;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,WAAW,0BAA0B,GAAG;AAC1C;AACA,IAAI,IAAI,IAAI,CAAC,UAAU,EAAE;AACzB,MAAM,OAAO,CAAC,IAAI;AAClB,QAAQ,mEAAmE;AAC3E,QAAQ,kDAAkD;AAC1D,OAAO,CAAC;AACR,KAAK;AACL;AACA,IAAI,OAAO,YAAY,CAAC,qBAAqB,CAAC;AAC9C;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,WAAW,4BAA4B,GAAG;AAC5C;AACA,IAAI,IAAI,IAAI,CAAC,UAAU,EAAE;AACzB,MAAM,OAAO,CAAC,IAAI;AAClB,QAAQ,qEAAqE;AAC7E,QAAQ,qDAAqD;AAC7D,OAAO,CAAC;AACR,KAAK;AACL;AACA,IAAI,OAAO;AACX;AACA,MAAM,gBAAgB,EAAE,CAAC;AACzB,MAAM,qBAAqB,EAAE,CAAC;AAC9B,MAAM,sBAAsB,EAAE,CAAC;AAC/B,MAAM,WAAW,EAAE,CAAC;AACpB,MAAM,oBAAoB,EAAE,CAAC;AAC7B,MAAM,oBAAoB,EAAE,CAAC;AAC7B,MAAM,eAAe,EAAE,CAAC;AACxB,MAAM,YAAY,EAAE,CAAC;AACrB,MAAM,aAAa,EAAE,CAAC;AACtB,MAAM,WAAW,EAAE,CAAC;AACpB,MAAM,SAAS,EAAE,EAAE;AACnB,MAAM,gBAAgB,EAAE,EAAE;AAC1B,MAAM,oBAAoB,EAAE,EAAE;AAC9B,MAAM,oBAAoB,EAAE,EAAE;AAC9B,MAAM,YAAY,EAAE,EAAE;AACtB,MAAM,YAAY,EAAE,EAAE;AACtB,MAAM,qBAAqB,EAAE,EAAE;AAC/B,MAAM,qBAAqB,EAAE,EAAE;AAC/B,MAAM,qBAAqB,EAAE,EAAE;AAC/B,MAAM,qBAAqB,EAAE,EAAE;AAC/B,MAAM,YAAY,EAAE,EAAE;AACtB,MAAM,YAAY,EAAE,EAAE;AACtB,MAAM,YAAY,EAAE,EAAE;AACtB,MAAM,YAAY,EAAE,EAAE;AACtB,MAAM,YAAY,EAAE,EAAE;AACtB,MAAM,YAAY,EAAE,EAAE;AACtB,MAAM,YAAY,EAAE,EAAE;AACtB,MAAM,YAAY,EAAE,EAAE;AACtB,MAAM,YAAY,EAAE,EAAE;AACtB,MAAM,YAAY,EAAE,EAAE;AACtB,MAAM,YAAY,EAAE,EAAE;AACtB,MAAM,YAAY,EAAE,EAAE;AACtB,MAAM,cAAc,EAAE,EAAE;AACxB,MAAM,mBAAmB,EAAE,EAAE;AAC7B,MAAM,oBAAoB,EAAE,EAAE;AAC9B,MAAM,YAAY,EAAE,EAAE;AACtB,MAAM,kBAAkB,EAAE,EAAE;AAC5B,MAAM,kBAAkB,EAAE,EAAE;AAC5B,MAAM,aAAa,EAAE,EAAE;AACvB,MAAM,UAAU,EAAE,EAAE;AACpB,MAAM,WAAW,EAAE,EAAE;AACrB,MAAM,YAAY,EAAE,EAAE;AACtB,MAAM,OAAO,EAAE,EAAE;AACjB,MAAM,cAAc,EAAE,EAAE;AACxB,MAAM,kBAAkB,EAAE,EAAE;AAC5B,MAAM,kBAAkB,EAAE,EAAE;AAC5B,MAAM,YAAY,EAAE,EAAE;AACtB,MAAM,YAAY,EAAE,EAAE;AACtB,MAAM,YAAY,EAAE,EAAE;AACtB,MAAM,YAAY,EAAE,EAAE;AACtB,MAAM,YAAY,EAAE,EAAE;AACtB,MAAM,YAAY,EAAE,EAAE;AACtB,MAAM,YAAY,EAAE,EAAE;AACtB,MAAM,YAAY,EAAE,EAAE;AACtB,MAAM,YAAY,EAAE,EAAE;AACtB,MAAM,YAAY,EAAE,EAAE;AACtB,MAAM,YAAY,EAAE,EAAE;AACtB,MAAM,YAAY,EAAE,EAAE;AACtB,MAAM,YAAY,EAAE,EAAE;AACtB,MAAM,YAAY,EAAE,EAAE;AACtB,MAAM,YAAY,EAAE,EAAE;AACtB,MAAM,YAAY,EAAE,EAAE;AACtB,MAAM,YAAY,EAAE,EAAE;AACtB,MAAM,YAAY,EAAE,EAAE;AACtB,MAAM,SAAS,EAAE,EAAE;AACnB,MAAM,UAAU,EAAE,EAAE;AACpB,MAAM,cAAc,EAAE,EAAE;AACxB,MAAM,SAAS,EAAE,EAAE;AACnB,MAAM,WAAW,EAAE,EAAE;AACrB,MAAM,UAAU,EAAE,EAAE;AACpB,MAAM,cAAc,EAAE,EAAE;AACxB,MAAM,SAAS,EAAE,EAAE;AACnB,MAAM,gBAAgB,EAAE,EAAE;AAC1B,MAAM,eAAe,EAAE,EAAE;AACzB,MAAM,UAAU,EAAE,EAAE;AACpB,MAAM,aAAa,EAAE,EAAE;AACvB,MAAM,aAAa,EAAE,EAAE;AACvB,MAAM,aAAa,EAAE,EAAE;AACvB,MAAM,aAAa,EAAE,EAAE;AACvB,MAAM,cAAc,EAAE,EAAE;AACxB,MAAM,qBAAqB,EAAE,EAAE;AAC/B,MAAM,qBAAqB,EAAE,EAAE;AAC/B,MAAM,qBAAqB,EAAE,EAAE;AAC/B,MAAM,qBAAqB,EAAE,EAAE;AAC/B,MAAM,YAAY,EAAE,EAAE;AACtB,MAAM,YAAY,EAAE,EAAE;AACtB,MAAM,YAAY,EAAE,EAAE;AACtB,MAAM,YAAY,EAAE,EAAE;AACtB,MAAM,YAAY,EAAE,EAAE;AACtB,MAAM,YAAY,EAAE,EAAE;AACtB,MAAM,YAAY,EAAE,EAAE;AACtB,MAAM,WAAW,EAAE,EAAE;AACrB,MAAM,YAAY,EAAE,EAAE;AACtB,MAAM,WAAW,EAAE,EAAE;AACrB,MAAM,YAAY,EAAE,EAAE;AACtB,MAAM,WAAW,EAAE,EAAE;AACrB,MAAM,mBAAmB,EAAE,EAAE;AAC7B,MAAM,mBAAmB,EAAE,EAAE;AAC7B,MAAM,4BAA4B,EAAE,EAAE;AACtC,MAAM,0BAA0B,EAAE,EAAE;AACpC,MAAM,yBAAyB,EAAE,GAAG;AACpC,MAAM,uBAAuB,EAAE,GAAG;AAClC,MAAM,aAAa,EAAE,GAAG;AACxB,MAAM,aAAa,EAAE,GAAG;AACxB,MAAM,aAAa,EAAE,GAAG;AACxB,MAAM,aAAa,EAAE,GAAG;AACxB,MAAM,aAAa,EAAE,GAAG;AACxB,MAAM,aAAa,EAAE,GAAG;AACxB,MAAM,aAAa,EAAE,GAAG;AACxB,MAAM,aAAa,EAAE,GAAG;AACxB,MAAM,aAAa,EAAE,GAAG;AACxB,MAAM,aAAa,EAAE,GAAG;AACxB,MAAM,aAAa,EAAE,GAAG;AACxB,MAAM,aAAa,EAAE,GAAG;AACxB,MAAM,aAAa,EAAE,GAAG;AACxB,MAAM,aAAa,EAAE,GAAG;AACxB,MAAM,aAAa,EAAE,GAAG;AACxB,MAAM,aAAa,EAAE,GAAG;AACxB,MAAM,aAAa,EAAE,GAAG;AACxB,MAAM,aAAa,EAAE,GAAG;AACxB,MAAM,WAAW,EAAE,GAAG;AACtB,MAAM,mBAAmB,EAAE,GAAG;AAC9B,MAAM,YAAY,EAAE,GAAG;AACvB,MAAM,WAAW,EAAE,GAAG;AACtB,MAAM,WAAW,EAAE,GAAG;AACtB,MAAM,UAAU,EAAE,GAAG;AACrB,MAAM,UAAU,EAAE,GAAG;AACrB,MAAM,UAAU,EAAE,GAAG;AACrB;AACA,KAAK,CAAC;AACN;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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AI,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,IAAI,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,EAAE;AACzE,QAAQ,MAAM,IAAI,UAAU,CAAC,iEAAiE,CAAC,CAAC;AAChG,OAAO;AACP;AACA,MAAM,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,IAAI;AACxC,QAAQ,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;AAChC,QAAQ,IAAI,EAAE,KAAK,IAAI,CAAC,IAAI,KAAK,IAAI,GAAG,CAAC,EAAE;AAC3C,UAAU,MAAM,IAAI,UAAU,CAAC,gDAAgD,CAAC,CAAC;AACjF,SAAS;AACT,OAAO,CAAC,CAAC;AACT;AACA,MAAM,IAAI,CAAC,OAAO,EAAE,OAAO,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;AACxC;AACA,KAAK;AACL;AACA;AACA,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;AACxE,IAAI,OAAO,IAAI,CAAC;AAChB;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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,MAAM,CAAC;AACzB,QAAQ,OAAO,CAAC,QAAQ,GAAG,QAAQ,CAAC;AACpC,QAAQ,IAAI,OAAO,CAAC,QAAQ,KAAK,KAAK,EAAE,OAAO,CAAC,QAAQ,GAAG,YAAY,CAAC,oBAAoB,CAAC;AAC7F,OAAO;AACP;AACA,KAAK;AACL;AACA,IAAI,IAAI,OAAO,CAAC,QAAQ,IAAI,SAAS,EAAE,OAAO,CAAC,QAAQ,GAAG,YAAY,CAAC,oBAAoB,CAAC;AAC5F;AACA,IAAI,SAAS,CAAC,gBAAgB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,EAAE,IAAI;AAC/D,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,WAAW,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AACnD,KAAK,CAAC,CAAC;AACP;AACA,IAAI,OAAO,IAAI,CAAC;AAChB;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,QAAQ,CAAC,IAAI,EAAE,OAAO,EAAE;AAC1B,IAAI,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AAC3C,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,QAAQ,CAAC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CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,YAAY,SAAS,YAAY,CAAC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,WAAW,CAAC,KAAK,EAAE,MAAM,EAAE;AAC7B;AACA,IAAI,KAAK,EAAE,CAAC;AACZ;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;AACxB;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;AAC1B;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,CAAC,4BAA4B,GAAG,IAAI,CAAC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,CAAC,UAAU,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACjD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,EAAE,OAAO,GAAG;AACZ,IAAI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;AACvB,IAAI,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;AACxB,IAAI,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;AAC3B,IAAI,IAAI,CAAC,WAAW,GAA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AAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;AAC1C,UAAU,KAAK;AACf,SAAS,CAAC;AACV,OAAO,MAAM;AACb,QAAQ,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;AAC9B,QAAQ,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;AAC7B,OAAO;AACP;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,sBAAsB,CAAC,UAAU,EAAE;AACrC;AACA,IAAI,OAAO,UAAU,KAAK,CAAC;AAC3B,MAAM,UAAU,KAAK,EAAE;AACvB,MAAM,UAAU,KAAK,EAAE;AACvB,MAAM,UAAU,KAAK,EAAE;AACvB,MAAM,UAAU,KAAK,EAAE;AACvB,MAAM,UAAU,KAAK,EAAE;AACvB,MAAM,UAAU,KAAK,GAAG;AACxB,MAAM,UAAU,KAAK,GAAG,CAAC;AACzB;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,EAAE,6BAA6B,CAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC,EAAE;AAC7D;AACA,IAAI,IAAI,GAAG,IAAI,KAAK,MAAM,GAAG,MAAM,GAAG,KAAK,CAAC;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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CA,IAAI,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AACjC;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,MAAM,KAAK,GAAG;AAChB;AACA;AACA;AACA,IAAI,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AACvD;AACA,IAAI,IAAI;AACR,MAAM,MAAM,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;AACpC,KAAK,CAAC,OAAO,GAAG,EAAE;AAClB,MAAM,OAAO,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AACjC,KAAK;AACL;AACA,IAAI,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AACjC;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,EAAE,sBAAsB,GAAG;AAC3B,IAAI,IAAI,EAAE,CAAC,UAAU,EAAE;AACvB,MAAM,OAAO,CAAC,IAAI;AAClB,QAAQ,gFAAgF;AACxF,OAAO,CAAC;AACR,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,WAAW,CAAC,KAAK,EAAE,QAAQ,EAAE,OAAO,GAAG,EAAE,EAAE;AAC7C;AACA,IAAI,IAAI,EAAE,CAAC,UAAU,EAAE;AACvB;AACA;AACA,MAAM,IAAI,OAAO,OAAO,KAAK,UAAU,EAAE;AACzC,QAAQ,IAAI,QAAQ,GAAG,CAAC,QAAQ,IAAI,SAAS,IAAI,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,SAAS,CAAC;AACjF,QAAQ,QAAQ,GAAG,OAAO,CAAC;AAC3B,QAAQ,OAAO,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;AACvC,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA,IAAI,IAAI,YAAY,CAAC,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;AACrD;AACA;AACA,MAAM,IAAI,OAAO,CAAC,QAAQ,KAAK,SAAS,EAAE,OAAO,CAAC,QAAQ,GAAG,YAAY,CAAC,oBAAoB,CAAC;AAC/F;AACA,MAAM,IAAI,SAAS,GAAG,EAAE,CAAC;AACzB;AACA,MAAM,SAAS,CAAC,gBAAgB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,EAAE,IAAI;AACjE,QAAQ,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,WAAW,CAAC,KAAK,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC;AAChF,OAAO,CAAC,CAAC;AACT;AACA,MAAM,OAAO,SAAS,CAAC;AACvB;AACA,KAAK,MAAM;AACX;AACA,MAAM,OAAO,KAAK,CAAC,WAAW,CAAC,KAAK,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;AACzD;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,kBAAkB,CAAC,KAAK,EAAE,QAAQ,EAAE,OAAO,GAAG,EAAE,EAAE;AACpD,IAAI,OAAO,CAAC,SAAS,GAAG,CAAC,CAAC;AAC1B,IAAI,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;AACtD,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,EAAE,CAAC,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE;AACxC,IAAI,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;AAC/D,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,WAAW,CAAC,KAAK,EAAE,QAAQ,EAAE,OAAO,GAAG,EAAE,EAAE;AAC7C;AACA,IAAI,IAAI,EAAE,CAAC,UAAU,EAAE;AACvB;AACA;A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;AACA;AACA,IAAI,IAAI,CAAC,oBAAoB,GAAG,EAAE,CAAC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;AAChC;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;AAC3B;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,MAAM,MAAM,CAAC,OAAO,GAAG,EAAE,EAAE,MAAM,GAAG,KAAK,EAAE;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,SAAS,CAAC,MAAM,EAAE;AAC1B;AACA;AACA;AACA,MAAM,IAAI;AACV,QAAQ,MAAM,CAAC,SAAS,CAAC;AACzB,OAAO,CAAC,OAAO,GAAG,EAAE;AACpB,QAAQ,IAAI,GAAG,GAAG,MAAM,MAAM,CAAC,cAAc,CAAC,iBAAiB,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC;AAChF;AACA;AACA,QAAQ,CAAC,CAAC,EAAE,CAAC;AACb,QAAQ,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,MAAM,CAAC,SAAS,GAAG,EAAE,CAAC;AACrD,QAAQ,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;AAC7C,OAAO;AACP;AACA;AACA;AACA,MAAM,IAAI;AACV,QAAQ,WAAW,CAAC;AACpB,OAAO,CAAC,OAAO,GAAG,EAAE;AACpB,QAAQ,MAAM,C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","x_google_ignoreList":[0]}