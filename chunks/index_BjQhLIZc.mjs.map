{"version":3,"file":"index_BjQhLIZc.mjs","sources":["../../../packages/csound/project.csd?raw","../../../packages/csound/presets.orc?raw","../../../packages/csound/index.mjs"],"sourcesContent":["export default \"<CsoundSynthesizer>\\n<CsInstruments>\\n\\nsr=48000\\nksmps=64\\nnchnls=2\\n0dbfs=1\\n\\n</CsInstruments>\\n</CsoundSynthesizer>\"","export default \"; returns value of given key in given \\\"string map\\\"\\n; keymap(\\\"freq\\\", \\\"note/c3/freq/220/gain/0.5\\\")\\n; yields \\\"220\\\"\\nopcode keymap, S, SS\\n  Skey, Smap xin\\n  idelimiter = strindex(Smap, strcat(Skey, \\\"/\\\"))\\n  ifrom = idelimiter + strlen(Skey) + 1\\n  Svalue = strsub(Smap, ifrom, strlen(Smap))\\n  Svalue = strsub(Svalue, 0, strindex(Svalue, \\\"/\\\"))\\n  xout Svalue\\nendop\\n\\n; TODO add incredibly dope synths\\ninstr organ\\n    iduration = p3\\n    ifreq = p4\\n    igain = p5\\n    ioct = octcps(ifreq)\\n\\n    asig = vco2(igain, ifreq, 12, .5) ; my edit\\n    kpwm = oscili(.1, 5)\\n    asig = vco2(igain, ifreq, 4, .5 + kpwm)\\n    asig += vco2(igain/4, ifreq * 2)\\n\\n    ; filter\\n    ; idepth = 2\\n    ; acut = transegr:a(0, .005, 0, idepth, .06, -4.2, 0.001, .01, -4.2, 0) ; filter envelope\\n    ; asig = zdf_2pole(asig, cpsoct(ioct + acut), 0.5)\\n\\n    ; amp envelope\\n    iattack = .001\\n    irelease = .05\\n    asig *= linsegr:a(0, iattack, 1, iduration, 1, irelease, 0)\\n\\n    out(asig, asig)\\n\\nendin\\n\\ninstr triangle\\n  iduration = p3\\n  ifreq = p4\\n  igain = p5\\n  ioct = octcps(ifreq)\\n  \\n  asig = vco2(igain, ifreq, 12, .5)\\n  \\n  ; amp envelope\\n  iattack = .001\\n  irelease = .05\\n  asig *= linsegr:a(0, iattack, 1, iduration, 1, irelease, 0)\\n  \\n  out(asig, asig)\\nendin\\n\\ninstr pad\\n    iduration = p3\\n    ifreq = p4\\n    igain = p5\\n    ioct = octcps(ifreq)\\n\\n    asig = vco2(igain, ifreq, 0)\\n\\n    ; amp envelope\\n    iattack = .5\\n    irelease = .1\\n    asig *= linsegr:a(0, iattack, 1, iduration, 1, irelease, 0)\\n    \\n    idepth = 2\\n    acut = transegr:a(0, .005, 0, idepth, .06, -4.2, 0.001, .01, -4.2, 0)\\n    asig = zdf_2pole(asig, 1000, 2)\\n\\n    out(asig, asig)\\nendin\\n\\n\\ngisine\\tftgen\\t0, 0, 4096, 10, 1\\n\\ninstr bow\\n    kpres = 2\\n    krat = 0.16\\n    kvibf = 6.12723\\n    \\n    kvib  linseg 0, 0.5, 0, 1, 1, p3-0.5, 1\\t\\n    kvamp = kvib * 0.01\\n    asig  wgbow .7, p4, kpres, krat, kvibf, kvamp, gisine\\n    asig = asig*p5\\n    outs asig, asig\\nendin\\n\\n\\ninstr Meta\\n    Smap = strget(p6)\\n    Sinstrument = keymap(\\\"s\\\", Smap)\\n    schedule(Sinstrument, 0, p3, p4, p5)\\n    ; TODO find a way to pipe Sinstrument through effects\\nendin\"","import { getFrequency, logger, register } from '@strudel/core';\nimport { getAudioContext } from '@strudel/webaudio';\nimport csd from './project.csd?raw';\n// import livecodeOrc from './livecode.orc?raw';\nimport presetsOrc from './presets.orc?raw';\n\nlet csoundLoader, _csound;\n\n// initializes csound + can be used to reevaluate given instrument code\nexport async function loadCSound(code = '') {\n  await init();\n  if (code) {\n    code = `${code}`;\n    //     ^       ^\n    // wrapping in backticks makes sure it works when calling as templated function\n    await _csound?.evalCode(code);\n  }\n}\nexport const loadcsound = loadCSound;\nexport const loadCsound = loadCSound;\n\nexport const csound = register('csound', (instrument, pat) => {\n  instrument = instrument || 'triangle';\n  init(); // not async to support csound inside other patterns + to be able to call pattern methods after it\n  // TODO: find a alternative way to wait for csound to load (to wait with first time playback)\n  return pat.onTrigger((time, hap) => {\n    if (!_csound) {\n      logger('[csound] not loaded yet', 'warning');\n      return;\n    }\n    hap.ensureObjectValue();\n    let { gain = 0.8 } = hap.value;\n    gain *= 0.2;\n\n    const freq = Math.round(getFrequency(hap));\n    const controls = Object.entries({ ...hap.value, freq })\n      .flat()\n      .join('/');\n    // TODO: find out how to send a precise ctx based time\n    // http://www.csounds.com/manual/html/i.html\n    const params = [\n      `\"${instrument}\"`, // p1: instrument name\n      time - getAudioContext().currentTime, //.toFixed(precision), // p2: starting time in arbitrary unit called beats\n      hap.duration + 0, // p3: duration in beats\n      // instrument specific params:\n      freq, //.toFixed(precision), // p4: frequency\n      gain, // p5: gain\n      `\"${controls}\"`, // p6 controls as string (like superdirt osc message)\n    ];\n    const msg = `i ${params.join(' ')}`;\n    _csound.inputMessage(msg);\n  });\n});\n\nfunction eventLogger(type, args) {\n  const [msg] = args;\n  if (\n    type === 'message' &&\n    (['[commit: HEAD]'].includes(msg) ||\n      msg.startsWith('--Csound version') ||\n      msg.startsWith('libsndfile') ||\n      msg.startsWith('sr =') ||\n      msg.startsWith('0dBFS') ||\n      msg.startsWith('audio buffered') ||\n      msg.startsWith('writing') ||\n      msg.startsWith('SECTION 1:'))\n  ) {\n    // ignore\n    return;\n  }\n  let logType = 'info';\n  if (msg.startsWith('error:')) {\n    logType = 'error';\n  }\n  logger(`[csound] ${msg || ''}`, logType);\n}\n\nasync function load() {\n  if (window.__csound__) {\n    // Allows using some other csound instance.\n    // In that case, the external Csound is responsible\n    // for compiling an orchestra and starting to perform.\n    logger('[load] Using external Csound', 'warning');\n    _csound = window.__csound__;\n    return _csound;\n  } else {\n    const { Csound } = await import('@csound/browser');\n    _csound = await Csound({ audioContext: getAudioContext() });\n    _csound.removeAllListeners('message');\n    ['message'].forEach((k) => _csound.on(k, (...args) => eventLogger(k, args)));\n    await _csound.setOption('-m0d'); // see -m flag https://csound.com/docs/manual/CommandFlags.html\n    await _csound.setOption('--sample-accurate');\n    await _csound.setOption('-odac');\n    await _csound.compileCsdText(csd);\n    // await _csound.compileOrc(livecodeOrc);\n    await _csound.compileOrc(presetsOrc);\n    await _csound.start();\n    return _csound;\n  }\n}\n\nasync function init() {\n  csoundLoader = csoundLoader || load();\n  return csoundLoader;\n}\n\nlet orcCache = {};\nexport async function loadOrc(url) {\n  await init();\n  if (typeof url !== 'string') {\n    throw new Error('loadOrc: expected url string');\n  }\n  if (url.startsWith('github:')) {\n    const [_, path] = url.split('github:');\n    url = `https://raw.githubusercontent.com/${path}`;\n  }\n  if (!orcCache[url]) {\n    orcCache[url] = fetch(url)\n      .then((res) => res.text())\n      .then((code) => _csound.compileOrc(code));\n  }\n  await orcCache[url];\n}\n\n/**\n * Sends notes to Csound for rendering with MIDI semantics. The hap value is\n * translated to these Csound pfields:\n *\n *  p1 -- Csound instrument either as a number (1-based, can be a fraction),\n *        or as a string name.\n *  p2 -- time in beats (usually seconds) from start of performance.\n *  p3 -- duration in beats (usually seconds).\n *  p4 -- MIDI key number (as a real number, not an integer but in [0, 127].\n *  p5 -- MIDI velocity (as a real number, not an integer but in [0, 127].\n *  p6 -- Strudel controls, as a string.\n */\nexport const csoundm = register('csoundm', (instrument, pat) => {\n  let p1 = instrument;\n  if (typeof instrument === 'string') {\n    p1 = `\"${instrument}\"`;\n  }\n  init(); // not async to support csound inside other patterns + to be able to call pattern methods after it\n  return pat.onTrigger((tidal_time, hap) => {\n    if (!_csound) {\n      logger('[csound] not loaded yet', 'warning');\n      return;\n    }\n    if (typeof hap.value !== 'object') {\n      throw new Error('csound only support objects as hap values');\n    }\n    // Time in seconds counting from now.\n    const p2 = tidal_time - getAudioContext().currentTime;\n    const p3 = hap.duration.valueOf() + 0;\n    const frequency = getFrequency(hap);\n    let { gain = 1, velocity = 0.9 } = hap.value;\n    velocity = gain * velocity;\n    // Translate frequency to MIDI key number _without_ rounding.\n    const C4 = 261.62558;\n    let octave = Math.log(frequency / C4) / Math.log(2.0) + 8.0;\n    const p4 = octave * 12.0 - 36.0;\n    // We prefer floating point precision, but over the MIDI range [0, 127].\n    const p5 = 127 * velocity;\n    // The Strudel controls as a string.\n    const p6 = Object.entries({ ...hap.value, frequency })\n      .flat()\n      .join('/');\n    const i_statement = `i ${p1} ${p2} ${p3} ${p4} ${p5}`;\n    console.log('[csoundm]:', i_statement);\n    _csound.inputMessage(i_statement);\n  });\n});\n"],"names":[],"mappings":"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"}