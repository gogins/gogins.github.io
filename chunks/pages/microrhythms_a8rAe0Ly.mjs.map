{"version":3,"file":"microrhythms_a8rAe0Ly.mjs","sources":["../../../src/pages/recipes/microrhythms.mdx"],"sourcesContent":["---\ntitle: Microrhythms\nlayout: ../../layouts/MainLayout.astro\n---\n\nimport { MiniRepl } from '../../docs/MiniRepl';\n\nsee https://strudel.cc/?zMEo5kowGrFc\n\n# Microrhythms\n\nInspired by this [Mini-Lecture on Microrhythm Notation](https://www.youtube.com/watch?v=or7B6vI3jOo), let's look at how we can express microrhythms with Strudel.\n\nThe timestamps of the first rhythm are `0 1/5 1/2 2/3 1`. We could naively express this with a stack:\n\n<MiniRepl\n  client:idle\n  tune={`s(\"hh\").struct(\n  stack(\n    \"x\", // 0\n    \"~ x ~@3\", // 1/5\n    \"~ x\", // 1/2\n    \"~@2 x\" // 2/3\n))`}\n/>\n\nWhile this works, it has two problems:\n\n- it is not very compact\n- the durations are wrong, e.g. the first note takes up the whole cycle\n\nIn the video, the duration of a timestamp is calculated by subtracting it from the next timestamp:\n\n- 1/5 - 0 = 1/5 = 6/30\n- 1/2 - 1/5 = 3/10 = 9/30\n- 2/3 - 1/2 = 1/6 = 5/30\n- 1 - 2/3 = 1/3 = 10/30\n\nUsing those, we can now express the rhythm much shorter:\n\n<MiniRepl client:idle tune={`s(\"hh\").struct(\"x@6 x@9 x@5 x@10\")`} />\n\nThe problems of the first notation are now fixed: it is much shorter and the durations are correct.\nStill, this notation involved calculating the durations by hand, which could be automated:\n\n<MiniRepl\n  client:idle\n  tune={`Pattern.prototype.micro = function (...timestamps) {\n  const durations = timestamps.map((x, i, a) => {\n    const next = i < a.length-1 ? a[i+1] : 1;\n    return next - a[i]\n  })\n  return this.struct(timeCat(...durations.map(d => [d, 1]))).late(timestamps[0])\n}\ns('hh').micro(0, 1/5, 1/2, 2/3)`}\n/>\n\nThis notation is even shorter and it allows directly filling in the timestamps!\n\nThis is the second example of the video:\n\n<MiniRepl\n  client:idle\n  tune={`Pattern.prototype.micro = function (...timestamps) {\n  const durations = timestamps.map((x, i, a) => {\n    const next = i < a.length-1 ? a[i+1] : 1;\n    return next - a[i]\n  })\n  return this.struct(timeCat(...durations.map(d => [d, 1]))).late(timestamps[0])\n}\ns('hh').micro(0, 1/6, 2/5, 2/3, 3/4)`}\n/>\n\nwith bass: https://strudel.cc/?sTglgJJCPIeY\n"],"names":["_jsxs","_Fragment","children","_components","p","_jsx","a","href","tabindex","span","class","code","MiniRepl","tune","ul","li"],"mappings":"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"}