{"version":3,"file":"mini-notation_xABFYcBx.mjs","sources":["../../../src/pages/learn/mini-notation.mdx"],"sourcesContent":["---\ntitle: Mini Notation\nlayout: ../../layouts/MainLayout.astro\n---\n\nimport { MiniRepl } from '../../docs/MiniRepl';\nimport { JsDoc } from '../../docs/JsDoc';\n\n# Mini-notation\n\nJust like [Tidal Cycles](https://tidalcycles.org/), Strudel uses a so called \"Mini-Notation\", which is a custom language that is designed for writing rhythmic patterns using little amounts of text.\n\n## Note\n\nThis page just explains the entirety of the Mini-Notation syntax.\nIf you are just getting started with Strudel, you can learn the basics of the Mini-Notation in a more practical manner in the [workshop](/workshop/first-sounds).\nAfter that, you can come back here if you want to understand every little detail.\n\n## Example\n\nBefore diving deeper into the details, here is a flavour of how the Mini-Notation looks like:\n\n<MiniRepl\n  client:idle\n  tune={`note(\\`<\n[e5 [b4 c5] d5 [c5 b4]]\n[a4 [a4 c5] e5 [d5 c5]]\n[b4 [~ c5] d5 e5]\n[c5 a4 a4 ~]\n[[~ d5] [~ f5] a5 [g5 f5]]\n[e5 [~ c5] e5 [d5 c5]]\n[b4 [b4 c5] d5 e5]\n[c5 a4 a4 ~]\n,\n[[e2 e3]*4]\n[[a2 a3]*4]\n[[g#2 g#3]*2 [e2 e3]*2]\n[a2 a3 a2 a3 a2 a3 b1 c2]\n[[d2 d3]*4]\n[[c2 c3]*4]\n[[b1 b2]*2 [e2 e3]*2]\n[[a1 a2]*4]\n>\\`)`}\n/>\n\n## Mini Notation Format\n\nThe snippet above is enclosed in backticks (`), which allows you to write multi-line strings.\n\nYou can also use regular double quotes (`\"`) for single line mini-notation, as we have done already.\n\nIf you do just want to get a regular string that is _not_ parsed as mini-notation, use single quotes (`'`).\n\n## Sequences of events in a cycle\n\nWe can play more notes by separating them with spaces:\n\n<MiniRepl client:idle tune={`note(\"c e g b\")`} punchcard />\n\nHere, those four notes are squashed into one cycle, so each note is a quarter second long.\nTry adding or removing notes and notice how the tempo changes!\n\n<MiniRepl client:idle tune={`note(\"c d e f g a b\")`} punchcard />\n\nNote that the overall duration of time does not change, and instead each note length decreases.\nThis is a key idea, as it illustrates the 'Cycle' in TidalCycles!\n\nEach space-separated note in this sequence is an _event_.\nThe time duration of each event is based on the speed or tempo of the cycle, and how many events are present.\nTaking the two examples above, we have four and eight events respectively, and since they have the same cycle duration, they each have to fit their events inside the same amount of time.\n\nThis is perhaps counter-intuitive if you are used to adding notes in a sequencer or piano roll and the overall length increasing.\nBut, it will begin to make sense as we go through more elements of mini-notation.\n\n## Multiplication\n\nA sequence can be sped up by multiplying it by a number using the asterisk symbol (`*`):\n\n<MiniRepl client:idle tune={`note(\"[e5 b4 d5 c5]*2\")`} punchcard />\n\nThe multiplication by two here means that the sequence will play twice per cycle.\n\nMultiplications can also be decimal (`*2.75`):\n\n<MiniRepl client:idle tune={`note(\"[e5 b4 d5 c5]*2.75\")`} punchcard />\n\n## Division\n\nContrary to multiplication, division can slow the sequence down by enclosing it in brackets and dividing it by a number (`/2`):\n\n<MiniRepl client:idle tune={`note(\"[e5 b4 d5 c5]/2\")`} punchcard />\n\nThe division by two means that the sequence will be played over the course of two cycles.\nYou can also use decimal numbers for any tempo you like (`/2.75`).\n\n<MiniRepl client:idle tune={`note(\"[e5 b4 d5 c5]/2.75\")`} punchcard />\n\n## Angle Brackets\n\nUsing angle brackets `<>`, we can define the sequence length based on the number of events:\n\n<MiniRepl client:idle tune={`note(\"<e5 b4 d5 c5>\")`} punchcard />\n\nThe above snippet is the same as:\n\n<MiniRepl client:idle tune={`note(\"[e5 b4 d5 c5]/4\")`} punchcard />\n\nThe advantage of the angle brackets, is that we can add more events without needing to change the number at the end.\n\n<MiniRepl client:idle tune={`note(\"<e5 b4 d5 c5 e5>\")`} punchcard />\n\n<MiniRepl client:idle tune={`note(\"<e5 b4 d5 c5 e5 b4>\")`} punchcard />\n\nThis is more similar to traditional music sequencers and piano rolls, where adding a note increases the perceived overall duration.\nWe can also play a certain number of notes per cycle by using angle brackets with multiplication:\n\n<MiniRepl client:idle tune={`note(\"<e5 b4 d5 c5 a4 c5>*8\")`} punchcard />\n\nNow we are playing 8 notes per cycle!\n\n## Subdividing time with bracket nesting\n\nTo create more interesting rhythms, you can _nest_ or _enclose_ sequences (put sequences inside sequences) with brackets `[]`, like this:\n\nCompare the difference between the following:\n\n<MiniRepl client:idle tune={`note(\"e5 b4 c5 d5 c5 b4\")`} />\n<MiniRepl client:idle tune={`note(\"e5 [b4 c5] d5 c5 b4\")`} />\n<MiniRepl client:idle tune={`note(\"e5 [b4 c5] d5 [c5 b4]\")`} />\n<MiniRepl client:idle tune={`note(\"e5 [b4 c5] d5 [c5 b4 d5 e5]\")`} />\n<MiniRepl client:idle tune={`note(\"e5 [b4 c5] d5 [c5 b4 [d5 e5]]\")`} />\n\nWhat's going on here? When we nest/enclose multiple events inside brackets (`[]`), their duration becomes the length of one event in the outer sequence.\n\nThis is a very simple change to make, but it has profound consequences.\nRemember what we said earlier about how the cycles in tidal stay the same length, and the individual event lengths are divided up in this cycle?\nWell, what this means is that in TidalCycles, not only can you divide time any way you want, and you can also subdivide time any way you want!\n\n## Rests\n\nThe \"~\" represents a rest, and will create silence between other events:\n\n<MiniRepl client:idle tune={`note(\"[b4 [~ c5] d5 e5]\")`} punchcard />\n\n## Parallel / polyphony\n\nUsing commas, we can play chords.\nThe following are the same:\n\n<MiniRepl client:idle tune={`note(\"[g3,b3,e4]\")`} />\n<MiniRepl client:idle tune={`note(\"g3,b3,e4\")`} punchcard canvasHeight={80} />\n\nBut to play multiple chords in a sequence, we have to wrap them in brackets:\n\n<MiniRepl client:idle tune={`note(\"<[g3,b3,e4] [a3,c3,e4] [b3,d3,f#4] [b3,e4,g4]>*2\")`} punchcard />\n\n## Elongation\n\nWith the \"@\" symbol, we can specify temporal \"weight\" of a sequence child:\n\n<MiniRepl client:idle tune={`note(\"<[g3,b3,e4]@2 [a3,c3,e4] [b3,d3,f#4]>*2\")`} punchcard />\n\nHere, the first chord has a weight of 2, making it twice the length of the other chords. The default weight is 1.\n\n## Replication\n\nUsing \"!\" we can repeat without speeding up:\n\n<MiniRepl client:idle tune={`note(\"<[g3,b3,e4]!2 [a3,c3,e4] [b3,d3,f#4]>*2\")`} punchcard />\n\n## Mini-notation review\n\nTo recap what we've learned so far, compare the following patterns:\n\n<MiniRepl client:idle tune={`note(\"<g3 b3 e4 [a3,c3,e4] [b3,d3,f#4]>*2\")`} />\n<MiniRepl client:idle tune={`note(\"<[g3,b3,e4] [a3,c3,e4] [b3,d3,f#4]>*2\")`} />\n<MiniRepl client:idle tune={`note(\"<[g3,b3,e4]/2 [a3,c3,e4] [b3,d3,f#4]>*2\")`} />\n<MiniRepl client:idle tune={`note(\"<[g3,b3,e4]*2 [a3,c3,e4] [b3,d3,f#4]>*2\")`} />\n<MiniRepl client:idle tune={`note(\"<[g3,b3,e4] _ [a3,c3,e4] [b3,d3,f#4]>*2\")`} />\n<MiniRepl client:idle tune={`note(\"<[g3,b3,e4]@2 [a3,c3,e4] [b3,d3,f#4]>*2\")`} />\n<MiniRepl client:idle tune={`note(\"<[g3,b3,e4]!2 [a3,c3,e4] [b3,d3,f#4]>*2\")`} />\n\n## Euclidian rhythms\n\nUsing round brackets after an event, we can create rhythmical sub-divisions based on three parameters: `beats`, `segments` and `offset`.\nThis algorithm can be found in many different types of music software, and is often referred to as a [Euclidean rhythm](https://en.wikipedia.org/wiki/Euclidean_rhythm) sequencer, after computer scientist Godfriend Toussaint.\nWhy is it interesting? Well, consider the following simple example:\n\n<MiniRepl client:idle tune={`s(\"bd(3,8,0)\")`} punchcard canvasHeight={50} />\n\nSound familiar?\nThis is a popular Euclidian rhythm going by various names, such as \"Pop Clave\".\nThese rhythms can be found in all musical cultures, and the Euclidian rhythm algorithm allows us to express them extremely easily.\nWriting this rhythm out in full require describing:\n\n<MiniRepl client:idle tune={`s(\"bd ~ ~ bd ~ ~ bd ~\")`} punchcard canvasHeight={50} />\n\nBut using the Euclidian rhythm notation, we only need to express \"3 beats over 8 segments, starting on position 1\".\n\nThis makes it easy to write patterns with interesting rhythmic structures and variations that still sound familiar:\n\n<MiniRepl client:idle tune={`note(\"e5(2,8) b4(3,8) d5(2,8) c5(3,8)\").slow(2)`} punchcard canvasHeight={50} />\n\nNote that since the example above does not use the third `offset` parameter, it can be written simply as `\"(3,8)\"`.\n\n<MiniRepl client:idle tune={`s(\"bd(3,8)\")`} punchcard canvasHeight={50} />\n\nLet's look at those three parameters in detail.\n\n### Beats\n\n`beats`: the first parameter controls how may beats will be played.\nCompare these:\n\n<MiniRepl client:idle tune={`s(\"bd(2,8)\")`} punchcard canvasHeight={50} />\n<MiniRepl client:idle tune={`s(\"bd(5,8)\")`} punchcard canvasHeight={50} />\n<MiniRepl client:idle tune={`s(\"bd(7,8)\")`} punchcard canvasHeight={50} />\n\n### Segments\n\n`segments`: the second parameter controls the total amount of segments the beats will be distributed over:\n\n<MiniRepl client:idle tune={`s(\"bd(3,4)\")`} punchcard canvasHeight={50} />\n<MiniRepl client:idle tune={`s(\"bd(3,8)\")`} punchcard canvasHeight={50} />\n<MiniRepl client:idle tune={`s(\"bd(3,13)\")`} punchcard canvasHeight={50} />\n\n### Offsets\n\n`offset`: the third (optional) parameter controls the starting position for distributing the beats.\nWe need a secondary rhythm to hear the difference:\n\n<MiniRepl client:idle tune={`s(\"bd(3,8,0), hh cp\")`} punchcard />\n<MiniRepl client:idle tune={`s(\"bd(3,8,3), hh cp\")`} punchcard />\n<MiniRepl client:idle tune={`s(\"bd(3,8,5), hh cp\")`} punchcard />\n\n## Mini-notation exercise\n\nThe most fun thing about the mini-notation, is that everything you have just learned can be combined in various ways!\n\nStarting with this one `n`, can you make a _pattern string_ that uses every single mini-notation element above?\n\n<MiniRepl client:idle tune={`n(\"60\")`} />\n\n<br />\n\nNext: How do [Samples](/learn/samples) play into this?\n"],"names":["_jsx","_components","a","tabindex","href","children","span","class","_jsxs","p","h2","id","MiniRepl","tune","code","punchcard","em","canvasHeight","h3"],"mappings":"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"}