{"version":3,"file":"patterns_BQOtjYwD.mjs","sources":["../../../src/pages/technical-manual/patterns.mdx"],"sourcesContent":["---\ntitle: Patterns\nlayout: ../../layouts/MainLayout.astro\n---\n\nimport { MiniRepl } from '../../docs/MiniRepl';\nimport { JsDoc } from '../../docs/JsDoc';\n\n# Patterns\n\nPatterns are the essence of Tidal. Its patterns are abstract entities that represent flows of time as functions, adapting a technique called pure functional reactive programming. Taking a time span as its input, a Pattern can output a set of events that happen within that time span. It depends on the structure of the Pattern how the events are located in time.\nFrom now on, this process of generating events from a time span will be called **querying**.\nExample:\n\n<MiniRepl\n  client:idle\n  tune={`const pattern = sequence(\"c3\", [\"e3\", \"g3\"])\nconst events = pattern.queryArc(0, 1)\nconsole.log(events.map((e) => e.show()))\nsilence`}\n/>\n\nIn this example, we create a pattern using the `sequence` function and **query** it for the time span from `0` to `1`.\nThose numbers represent units of time called **cycles**. The length of one cycle depends on the tempo, which defaults to one cycle per second.\nThe resulting events are:\n\n```js\n[\n  '[ 0/1 -> 1/2 | c3 ]', //\n  '[ 1/2 -> 3/4 | e3 ]',\n  '[ 3/4 -> 1/1 | g3 ]',\n];\n```\n\nEach event has a value, a begin time and an end time, where time is represented as a fraction. In the above case, the events are placed in sequential order, where c3 takes the first half, and e3 and g3 together take the second half. This temporal placement is the result of the `sequence` function, which divides its arguments equally over one cycle. If an argument is an array, the same rule applies to that part of the cycle. In the example, e3 and g3 are divided equally over the second half of the whole cycle.\n\nNote that the query function is not just a way to access a pattern, but true to the principles of functional programming, is the pattern itself. This means that in theory there is no way to change a pattern, it is opaque as a pure function. In practice though, Strudel and Tidal are all about transforming patterns, so how is this done? The answer is, by replacing the pattern with a new one, that calls the old one. This new one is only able to manipulate the query before passing it to the old pattern, and manipulate the results from it before returning them to caller. But, this is enough to support all the temporal and structural manipulations provided by Strudel (and Tidal's) extensive library of functions.\n\nThe above examples do not represent how Strudel is used in practice. In the live coding editor, the user only has to type in the pattern itself, the querying will be handled by the scheduler. The scheduler will repeatedly query the pattern for events, which are then scheduled as sound synthesis or other event triggers.\n\nCan we [align](/technical-manual/alignment) patterns?\n"],"names":["_jsx","_components","a","tabindex","href","children","span","class","_jsxs","p","strong","MiniRepl","tune","code","pre","style"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iBAIE,UAEFA,EAAAA,WAAA,CAAAC,WAAA,CAAAC,CAAA,EAAA;QAAA,aAAA,EAAA,MAAA;AAAAC,QAAAA,QAAA,EAAA,IAAA;AAAAC,QAAAA,IAAA,EAAA,sCAAA;AAAAC,QAAAA,QAAA,EAAAL,WAAA,CAAAC,WAAA,CAAAK,IAAA,EAAA;AAAAC,UAAAA,KAAA,EAAA,gBAAA;SAAA,CAAA;AAAA,OAAA,CAAA,CAAA;AAAA,QAAA,IAAAC,EAAAA,WAAA,CAAAP,WAAA,CAAAQ,CAAA,EAAA;AAAAJ,MAAAA,QAAA,GAAA,6bAAAL,EAAAA,WAAA,CAAAC,WAAA,CAAAS,MAAA,EAAA;AAAAL,QAAAA,QAAA,EACiF,UAAA;AAAA,OADjF,CAC2F,EAAA,aAAA,CAAA;AAAA,KAD3F,CAMS,EAAA,IAAA,EAAAL,WAAA,CAAAW,QAAA,EAAA;AAAA,MAAA,aAAA,EAAA,IAAA;AAAAC,MAAAA,IAAA,EAAA,CAAA;AAAA;AAAA;AAAA,OAAA,CAAA;AAAA,MAAA,uBAAA,EAAA,gEAAA;AAAA,MAAA,yBAAA,EAAA,UAAA;AAAA,MAAA,4BAAA,EAAA,IAAA;AAAA;iBAMT,iDAA+CZ,EAAAA,WAAA,CAAAC,WAAA,CAAAY,IAAA,EAAA;AAAAR,QAAAA,QAAA,EAAA,UAAA;AAAA,OAAA,GAAU;kBAAgB,OAAA;AAAA,UAAO,6BAAAL,EAAAA,WAAA,CAAAC,WAAA,CAAAY,IAAA,EAAA;AAAAR,QAAAA,QAAA,EAA2B,GAAA;AAAA,OAA3B,GAA8B,MAAIL,EAAAA,WAAA,CAAAC,WAAA,CAAAY,IAAA,EAAA;AAAAR,QAAAA,QAAA,EAAA,GAAA;AAAA,OAAA,GAAG;kBACtE,QAAA;AAAA,QAAQ,EAAA,oHAAA,CAAA;AAAA,QAAA,IAAAL,EAAAA,WAAA,CAAAC,WAAA,CAAAa,GAAA,EAAA;AAAAP,MAAAA,KAAA,EAAA,wBAAA;AAAAQ,MAAAA,KAAA,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWvD,aAAA;AAAAV,YAAAA,QAAA,EAAA,IAAA;;AAAA,YAAA,IAAAL,EAAAA,WAAA,CAAAC,WAAA,CAAAK,IAAA,EAAA;AAAAC,UAAAA,KAAA,EAAA,MAAA;AAAA,SAAA,CAAA,CAAA;;AAAA,KAXuD,GAWvD,IAAAC,EAAAA,WAAA,CAAAP,WAAA,CAAAQ,CAAA,EAAA;AAAAJ,MAAAA,QAAA,GAAA,wRAAAL,EAAAA,WAAA,CAAAC,WAAA,CAAAY,IAAA,EAAA;AAAAR,QAAAA,QAAA,EAAsR,UAAA;AAAA,OAAtR,CAAgS,EAAA,oOAAA,CAAA;AAAA,KAAhS,GAAgS,IAAAL,EAAAA,WAAA,CAAAC,WAAA,CAAAQ,CAAA,EAAA;AAAAJ,MAAAA,QAAA,EAEhS,ktBAAA;AAAA,KAFgS,GAIhS,IAAAL,EAAAA,WAAA,CAAAC,WAAA,CAAAQ,CAAA,EAAA;AAAAJ,MAAAA,QAAA,EAAA,kUAAA;AAAA,KAAA,GAAA,IAAAG,EAAAA,WAAA,CAAAP,WAAA,CAAAQ,CAAA,EAAA;AAAAJ,MAAAA,QAAA,GAEA;;kBAAQ,OAAA;AAAA,QAAmC,EAAA,YAAA,CAAA;AAAA,KAF3C,CAE2C,CAAA;AAAA,GAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;"}