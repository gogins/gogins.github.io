{"version":3,"file":"recipes_rvmI-lR2.mjs","sources":["../../../src/pages/recipes/recipes.mdx"],"sourcesContent":["---\ntitle: Recipes\nlayout: ../../layouts/MainLayout.astro\n---\n\nimport { MiniRepl } from '../../docs/MiniRepl';\n\n# Recipes\n\nThis page shows possible ways to achieve common (or not so common) musical goals.\nThere are often many ways to do a thing and there is no right or wrong.\nThe fun part is that each representation will give you different impulses when improvising.\n\n## Arpeggios\n\nAn arpeggio is when the notes of a chord are played in sequence.\nWe can either write the notes by hand:\n\n<MiniRepl\n  client:visible\n  tune={`note(\"c eb g c4\")\n.clip(2).s(\"gm_electric_guitar_clean\")`}\n  punchcard\n/>\n\n...or use scales:\n\n<MiniRepl\n  client:visible\n  tune={`n(\"0 2 4 7\").scale(\"C:minor\")\n.clip(2).s(\"gm_electric_guitar_clean\")`}\n  punchcard\n/>\n\n...or chord symbols:\n\n<MiniRepl\n  client:visible\n  tune={`n(\"0 1 2 3\").chord(\"Cm\").mode(\"above:c3\").voicing()\n.clip(2).s(\"gm_electric_guitar_clean\")`}\n  punchcard\n/>\n\n...using off:\n\n<MiniRepl\n  client:visible\n  tune={`\"0\"\n  .off(1/3, add(2))\n  .off(1/2, add(4))\n  .n()\n  .scale(\"C:minor\")\n  .s(\"gm_electric_guitar_clean\")`}\n  punchcard\n/>\n\n## Chopping Breaks\n\nA sample can be looped and chopped like this:\n\n<MiniRepl\n  client:visible\n  tune={`samples('github:yaxu/clean-breaks')\ns(\"amen/4\").fit().chop(32)`}\n  punchcard\n/>\n\nThis fits the break into 8 cycles + chops it in 16 pieces.\nThe chops are not audible yet, because we're not doing any manipulation.\nLet's add randmized doubling + reversing:\n\n<MiniRepl\n  client:visible\n  tune={`samples('github:yaxu/clean-breaks')\ns(\"amen/4\").fit().chop(16).cut(1)\n.sometimesBy(.5, ply(\"2\"))\n.sometimesBy(.25, mul(speed(\"-1\")))`}\n  punchcard\n/>\n\nIf we want to specify the order of samples, we can replace `chop` with `slice`:\n\n<MiniRepl\n  client:visible\n  tune={`samples('github:yaxu/clean-breaks')\ns(\"amen/4\").fit()\n  .slice(8, \"<0 1 2 3 4*2 5 6 [6 7]>*2\")\n  .cut(1).rarely(ply(\"2\"))`}\n  punchcard\n/>\n\nIf we use `splice` instead of `slice`, the speed adjusts to the duration of the event:\n\n<MiniRepl\n  client:visible\n  tune={`samples('github:yaxu/clean-breaks')\ns(\"amen\")\n  .splice(8, \"<0 1 2 3 4*2 5 6 [6 7]>*2\")\n  .cut(1).rarely(ply(\"2\"))`}\n  punchcard\n/>\n\nNote that we don't need `fit`, because `splice` will do that by itself.\n\n## Filter Envelopes\n\nUsing `lpenv`, we can make the filter move:\n\n<MiniRepl\n  client:visible\n  tune={`note(\"g1 bb1 <c2 eb2> d2\")\n  .s(\"sawtooth\")\n  .lpf(400).lpenv(4)\n  .scope()`}\n/>\n\nThe type of envelope depends on the methods you're setting. Let's set `lpa`:\n\n<MiniRepl\n  client:visible\n  tune={`note(\"g1 bb1 <c2 eb2> d2\")\n  .s(\"sawtooth\").lpq(8)\n  .lpf(400).lpa(.2).lpenv(4)\n  .scope()`}\n/>\n\nNow the filter is attacking, rather than decaying as before (decay is the default). We can also do both\n\n<MiniRepl\n  client:visible\n  tune={`note(\"g1 bb1 <c2 eb2> d2\")\n  .s(\"sawtooth\").lpq(8)\n  .lpf(400).lpa(.1).lpd(.1).lpenv(4)\n  .scope()`}\n/>\n\nYou can play around with `lpa` | `lpd` | `lps` | `lpd` to see what the filter envelope will do.\n\n## Layering Sounds\n\nWe can layer sounds by separating them with \",\":\n\n<MiniRepl\n  client:visible\n  tune={`note(\"<g1 bb1 d2 f1>\")\n.s(\"sawtooth, square\") // <------\n.scope()`}\n/>\n\nWe can control the gain of individual sounds like this:\n\n<MiniRepl\n  client:visible\n  tune={`note(\"<g1 bb1 d2 f1>\")\n.s(\"sawtooth, square:0:.5\") // <--- \"name:number:gain\"\n.scope()`}\n/>\n\nFor more control over each voice, we can use `layer`:\n\n<MiniRepl\n  client:visible\n  tune={`note(\"<g1 bb1 d2 f1>\").layer(\n  x=>x.s(\"sawtooth\").vib(4),\n  x=>x.s(\"square\").add(note(12))\n).scope()`}\n/>\n\nHere, we give the sawtooth a vibrato and the square is moved an octave up.\nWith `layer`, you can use any pattern method available on each voice, so sky is the limit..\n\n## Oscillator Detune\n\nWe can fatten a sound by adding a detuned version to itself:\n\n<MiniRepl\n  client:visible\n  tune={`note(\"<g1 bb1 d2 f1>\")\n.add(note(\"0,.1\")) // <------ chorus\n.s(\"sawtooth\").scope()`}\n  punchcard\n/>\n\nTry out different values, or add another voice!\n\n## Polyrhythms\n\nHere is a simple example of a polyrhythm:\n\n<MiniRepl client:visible tune={`s(\"bd*2,hh*3\")`} punchcard />\n\nA polyrhythm is when 2 different tempos happen at the same time.\n\n## Polymeter\n\nThis is a polymeter:\n\n<MiniRepl client:visible tune={`s(\"<bd rim, hh hh oh>*4\")`} punchcard />\n\nA polymeter is when 2 different bar lengths play at the same tempo.\n\n## Phasing\n\nThis is a phasing:\n\n<MiniRepl client:visible tune={`note(\"<C D G A Bb D C A G D Bb A>*[6,6.1]\").piano()`} punchcard />\n\nPhasing happens when the same sequence plays at slightly different tempos.\n\n## Running through samples\n\nUsing `run` with `n`, we can rush through a sample bank:\n\n<MiniRepl\n  client:visible\n  tune={`samples('bubo:fox')\nn(run(8)).s(\"ftabla\")`}\n  punchcard\n/>\n\nThis works great with sample banks that contain similar sounds, like in this case different recordings of a tabla.\nOften times, you'll hear the beginning of the phrase not where the pattern begins.\nIn this case, I hear the beginning at the third sample, which can be accounted for with `early`.\n\n<MiniRepl\n  client:visible\n  tune={`samples('bubo:fox')\nn(run(8)).s(\"ftabla\").early(2/8)`}\n/>\n\nLet's add some randomness:\n\n<MiniRepl\n  client:visible\n  tune={`samples('bubo:fox')\nn(run(8)).s(\"ftabla\").early(2/8)\n.sometimes(mul(speed(\"1.5\")))`}\n/>\n\n## Tape Warble\n\nWe can emulate a pitch warbling effect like this:\n\n<MiniRepl\n  client:visible\n  tune={`note(\"<c4 bb f eb>*8\")\n.add(note(perlin.range(0,.5))) // <------ warble\n.clip(2).s(\"gm_electric_guitar_clean\")`}\n/>\n\n## Sound Duration\n\nThere are a number of ways to change the sound duration. Using clip:\n\n<MiniRepl\n  client:visible\n  tune={`note(\"f ab bb c\")\n.clip(\"<2 1 .5 .25>\")`}\n/>\n\nThe value of clip is relative to the duration of each event.\nWe can also create overlaps using release:\n\n<MiniRepl\n  client:visible\n  tune={`note(\"f ab bb c\")\n.release(\"<2 1 .5 .25>\")`}\n/>\n\nThis will smoothly fade out each sound for the given number of seconds.\nWe could also make the notes shorter by using a decay envelope:\n\n<MiniRepl\n  client:visible\n  tune={`note(\"f ab bb c\")\n.decay(\"<2 1 .5 .25>\")`}\n/>\n\nWhen using samples, we also have `.end` to cut relative to the sample length:\n\n<MiniRepl client:visible tune={`s(\"oh*4\").end(\"<1 .5 .25 .1>\")`} />\n\nCompare that to clip:\n\n<MiniRepl client:visible tune={`s(\"oh*4\").clip(\"<1 .5 .25 .1>\")`} />\n\nor decay:\n\n<MiniRepl client:visible tune={`s(\"oh*4\").decay(\"<1 .5 .25 .1>\")`} />\n\n## Wavetable Synthesis\n\nYou can loop a sample with `loop` / `loopEnd`:\n\n<MiniRepl client:visible tune={`note(\"<c eb g f>\").s(\"bd\").loop(1).loopEnd(.05).gain(.2)`} />\n\nThis allows us to play the first 5% of the bass drum as a synth!\nTo simplify loading wavetables, any sample that starts with `wt_` will be looped automatically:\n\n<MiniRepl\n  client:visible\n  tune={`samples('github:bubobubobubobubo/dough-waveforms')\nnote(\"c eb g bb\").s(\"wt_dbass\").clip(2)`}\n/>\n\nRunning through different wavetables can also give interesting variations:\n\n<MiniRepl\n  client:visible\n  tune={`samples('github:bubobubobubobubo/dough-waveforms')\nnote(\"c2*8\").s(\"wt_dbass\").n(run(8))`}\n/>\n\n...adding a filter envelope + reverb:\n\n<MiniRepl\n  client:visible\n  tune={`samples('github:bubobubobubobubo/dough-waveforms')\nnote(\"c2*8\").s(\"wt_dbass\").n(run(8))\n.lpf(perlin.range(200,2000).slow(8))\n.lpenv(-3).lpa(.1).room(.5)`}\n/>\n"],"names":["_jsx","_components","a","tabindex","href","children","span","class","p","_jsxs","h2","id","MiniRepl","tune","punchcard","code"],"mappings":"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"}