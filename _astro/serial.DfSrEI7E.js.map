{"version":3,"file":"serial.DfSrEI7E.js","sources":["../../../packages/serial/serial.mjs"],"sourcesContent":["/*\nserial.mjs - <short description TODO>\nCopyright (C) 2022 Strudel contributors - see <https://github.com/tidalcycles/strudel/blob/main/packages/serial/serial.mjs>\nThis program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport { Pattern, isPattern } from '@strudel/core';\n\nvar writeMessagers = {};\nvar choosing = false;\n\nexport async function getWriter(name, br) {\n  if (choosing) {\n    return;\n  }\n  choosing = true;\n  if (name in writeMessagers) {\n    return writeMessagers[name];\n  }\n  if ('serial' in navigator) {\n    const port = await navigator.serial.requestPort();\n    await port.open({ baudRate: br });\n    const encoder = new TextEncoder();\n    const writer = port.writable.getWriter();\n    writeMessagers[name] = function (message, chk) {\n      const encoded = encoder.encode(message);\n      if (!chk) {\n        writer.write(encoded);\n      } else {\n        const bytes = new Uint8Array(4);\n        bytes[0] = 124; // | symbol\n        bytes[1] = (chk >> 8) & 0xff;\n        bytes[2] = chk & 0xff;\n        bytes[3] = 59; // semicolon\n        const withchk = new Uint8Array(encoded.length + 4);\n        withchk.set(encoded);\n        withchk.set(bytes, encoded.length);\n        writer.write(withchk);\n      }\n    };\n  } else {\n    throw 'Webserial is not available in this browser.';\n  }\n}\n\nconst latency = 0.1;\n\n// crc16 (CCITT-FALSE) https://gist.github.com/tijnkooijmans/10981093\nfunction crc16(data) {\n  const length = data.length;\n  if (length == 0) {\n    return 0;\n  }\n\n  var crc = 0xffff;\n  for (var i = 0; i < length; ++i) {\n    crc ^= data.charCodeAt(i) << 8;\n    for (var j = 0; j < 8; ++j) {\n      crc = (crc & 0x8000) > 0 ? (crc << 1) ^ 0x1021 : crc << 1;\n    }\n  }\n\n  return crc & 0xffff;\n}\n\nPattern.prototype.serial = function (br = 115200, sendcrc = false, singlecharids = false, name = 'default') {\n  return this.withHap((hap) => {\n    if (!(name in writeMessagers)) {\n      getWriter(name, br);\n    }\n    const onTrigger = (time, hap, currentTime) => {\n      var message = '';\n      var chk = 0;\n      if (typeof hap.value === 'object') {\n        if ('action' in hap.value) {\n          var action = hap.value['action'];\n          if (singlecharids) {\n            action = action.charAt(0);\n          }\n          message += action + '(';\n          var first = true;\n          for (var [key, val] of Object.entries(hap.value)) {\n            if (key === 'action') {\n              continue;\n            }\n            if (first) {\n              first = false;\n            } else {\n              message += ',';\n            }\n            if (singlecharids) {\n              key = key.charAt(0);\n            }\n            message += key + ':' + val;\n          }\n          message += ')';\n          if (sendcrc) {\n            chk = crc16(message);\n          }\n        } else {\n          for (const [key, val] of Object.entries(hap.value)) {\n            message += `${key}:${val}`;\n          }\n        }\n      } else {\n        message = hap.value;\n      }\n      const offset = (time - currentTime + latency) * 1000;\n\n      window.setTimeout(function () {\n        writeMessagers[name](message, chk);\n      }, offset);\n    };\n    return hap.setContext({ ...hap.context, onTrigger, dominantTrigger: true });\n  });\n};\n"],"names":["writeMessagers","choosing","getWriter","name","br","port","encoder","writer","message","chk","encoded","bytes","withchk","latency","crc16","data","length","crc","i","j","Pattern","sendcrc","singlecharids","hap","onTrigger","time","currentTime","action","first","key","val","offset"],"mappings":"wCAQA,IAAIA,EAAiB,CAAA,EACjBC,EAAW,GAER,eAAeC,EAAUC,EAAMC,EAAI,CACxC,GAAI,CAAAH,EAIJ,IADAA,EAAW,GACPE,KAAQH,EACV,OAAOA,EAAeG,CAAI,EAE5B,GAAI,WAAY,UAAW,CACzB,MAAME,EAAO,MAAM,UAAU,OAAO,YAAW,EAC/C,MAAMA,EAAK,KAAK,CAAE,SAAUD,CAAI,CAAA,EAChC,MAAME,EAAU,IAAI,YACdC,EAASF,EAAK,SAAS,UAAS,EACtCL,EAAeG,CAAI,EAAI,SAAUK,EAASC,EAAK,CAC7C,MAAMC,EAAUJ,EAAQ,OAAOE,CAAO,EACtC,GAAI,CAACC,EACHF,EAAO,MAAMG,CAAO,MACf,CACL,MAAMC,EAAQ,IAAI,WAAW,CAAC,EAC9BA,EAAM,CAAC,EAAI,IACXA,EAAM,CAAC,EAAKF,GAAO,EAAK,IACxBE,EAAM,CAAC,EAAIF,EAAM,IACjBE,EAAM,CAAC,EAAI,GACX,MAAMC,EAAU,IAAI,WAAWF,EAAQ,OAAS,CAAC,EACjDE,EAAQ,IAAIF,CAAO,EACnBE,EAAQ,IAAID,EAAOD,EAAQ,MAAM,EACjCH,EAAO,MAAMK,CAAO,CACrB,CACP,CACA,KACI,MAAM,8CAEV,CAEA,MAAMC,EAAU,GAGhB,SAASC,EAAMC,EAAM,CACnB,MAAMC,EAASD,EAAK,OACpB,GAAIC,GAAU,EACZ,MAAO,GAIT,QADIC,EAAM,MACDC,EAAI,EAAGA,EAAIF,EAAQ,EAAEE,EAAG,CAC/BD,GAAOF,EAAK,WAAWG,CAAC,GAAK,EAC7B,QAASC,EAAI,EAAGA,EAAI,EAAG,EAAEA,EACvBF,GAAOA,EAAM,OAAU,EAAKA,GAAO,EAAK,KAASA,GAAO,CAE3D,CAED,OAAOA,EAAM,KACf,CAEAG,EAAQ,UAAU,OAAS,SAAUhB,EAAK,OAAQiB,EAAU,GAAOC,EAAgB,GAAOnB,EAAO,UAAW,CAC1G,OAAO,KAAK,QAASoB,GAAQ,CACrBpB,KAAQH,GACZE,EAAUC,EAAMC,CAAE,EAEpB,MAAMoB,EAAY,CAACC,EAAMF,EAAKG,IAAgB,CAC5C,IAAIlB,EAAU,GACVC,EAAM,EACV,GAAI,OAAOc,EAAI,OAAU,SACvB,GAAI,WAAYA,EAAI,MAAO,CACzB,IAAII,EAASJ,EAAI,MAAM,OACnBD,IACFK,EAASA,EAAO,OAAO,CAAC,GAE1BnB,GAAWmB,EAAS,IACpB,IAAIC,EAAQ,GACZ,OAAS,CAACC,EAAKC,CAAG,IAAK,OAAO,QAAQP,EAAI,KAAK,EACzCM,IAAQ,WAGRD,EACFA,EAAQ,GAERpB,GAAW,IAETc,IACFO,EAAMA,EAAI,OAAO,CAAC,GAEpBrB,GAAWqB,EAAM,IAAMC,GAEzBtB,GAAW,IACPa,IACFZ,EAAMK,EAAMN,CAAO,EAE/B,KACU,UAAW,CAACqB,EAAKC,CAAG,IAAK,OAAO,QAAQP,EAAI,KAAK,EAC/Cf,GAAW,GAAGqB,CAAG,IAAIC,CAAG,QAI5BtB,EAAUe,EAAI,MAEhB,MAAMQ,GAAUN,EAAOC,EAAcb,GAAW,IAEhD,OAAO,WAAW,UAAY,CAC5Bb,EAAeG,CAAI,EAAEK,EAASC,CAAG,CAClC,EAAEsB,CAAM,CACf,EACI,OAAOR,EAAI,WAAW,CAAE,GAAGA,EAAI,QAAS,UAAAC,EAAW,gBAAiB,EAAI,CAAE,CAC9E,CAAG,CACH"}