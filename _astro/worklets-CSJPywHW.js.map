{"version":3,"file":"worklets-CSJPywHW.js","sources":["../../packages/superdough/ola-processor.js","../../packages/superdough/fft.js","../../packages/superdough/worklets.mjs"],"sourcesContent":["'use strict';\n\n// sourced from https://github.com/olvb/phaze/tree/master?tab=readme-ov-file\nconst WEBAUDIO_BLOCK_SIZE = 128;\n\n/** Overlap-Add Node */\nclass OLAProcessor extends AudioWorkletProcessor {\n  constructor(options) {\n    super(options);\n    this.started = false;\n    this.nbInputs = options.numberOfInputs;\n    this.nbOutputs = options.numberOfOutputs;\n\n    this.blockSize = options.processorOptions.blockSize;\n    // TODO for now, the only support hop size is the size of a web audio block\n    this.hopSize = WEBAUDIO_BLOCK_SIZE;\n\n    this.nbOverlaps = this.blockSize / this.hopSize;\n\n    // pre-allocate input buffers (will be reallocated if needed)\n    this.inputBuffers = new Array(this.nbInputs);\n    this.inputBuffersHead = new Array(this.nbInputs);\n    this.inputBuffersToSend = new Array(this.nbInputs);\n    // default to 1 channel per input until we know more\n    for (let i = 0; i < this.nbInputs; i++) {\n      this.allocateInputChannels(i, 1);\n    }\n    // pre-allocate input buffers (will be reallocated if needed)\n    this.outputBuffers = new Array(this.nbOutputs);\n    this.outputBuffersToRetrieve = new Array(this.nbOutputs);\n    // default to 1 channel per output until we know more\n    for (let i = 0; i < this.nbOutputs; i++) {\n      this.allocateOutputChannels(i, 1);\n    }\n  }\n\n  /** Handles dynamic reallocation of input/output channels buffer\n     (channel numbers may lety during lifecycle) **/\n  reallocateChannelsIfNeeded(inputs, outputs) {\n    for (let i = 0; i < this.nbInputs; i++) {\n      let nbChannels = inputs[i].length;\n      if (nbChannels != this.inputBuffers[i].length) {\n        this.allocateInputChannels(i, nbChannels);\n      }\n    }\n\n    for (let i = 0; i < this.nbOutputs; i++) {\n      let nbChannels = outputs[i].length;\n      if (nbChannels != this.outputBuffers[i].length) {\n        this.allocateOutputChannels(i, nbChannels);\n      }\n    }\n  }\n\n  allocateInputChannels(inputIndex, nbChannels) {\n    // allocate input buffers\n\n    this.inputBuffers[inputIndex] = new Array(nbChannels);\n    for (let i = 0; i < nbChannels; i++) {\n      this.inputBuffers[inputIndex][i] = new Float32Array(this.blockSize + WEBAUDIO_BLOCK_SIZE);\n      this.inputBuffers[inputIndex][i].fill(0);\n    }\n\n    // allocate input buffers to send and head pointers to copy from\n    // (cannot directly send a pointer/subarray because input may be modified)\n    this.inputBuffersHead[inputIndex] = new Array(nbChannels);\n    this.inputBuffersToSend[inputIndex] = new Array(nbChannels);\n    for (let i = 0; i < nbChannels; i++) {\n      this.inputBuffersHead[inputIndex][i] = this.inputBuffers[inputIndex][i].subarray(0, this.blockSize);\n      this.inputBuffersToSend[inputIndex][i] = new Float32Array(this.blockSize);\n    }\n  }\n\n  allocateOutputChannels(outputIndex, nbChannels) {\n    // allocate output buffers\n    this.outputBuffers[outputIndex] = new Array(nbChannels);\n    for (let i = 0; i < nbChannels; i++) {\n      this.outputBuffers[outputIndex][i] = new Float32Array(this.blockSize);\n      this.outputBuffers[outputIndex][i].fill(0);\n    }\n\n    // allocate output buffers to retrieve\n    // (cannot send a pointer/subarray because new output has to be add to exising output)\n    this.outputBuffersToRetrieve[outputIndex] = new Array(nbChannels);\n    for (let i = 0; i < nbChannels; i++) {\n      this.outputBuffersToRetrieve[outputIndex][i] = new Float32Array(this.blockSize);\n      this.outputBuffersToRetrieve[outputIndex][i].fill(0);\n    }\n  }\n\n  /** Read next web audio block to input buffers **/\n  readInputs(inputs) {\n    // when playback is paused, we may stop receiving new samples\n    if (inputs[0].length && inputs[0][0].length == 0) {\n      for (let i = 0; i < this.nbInputs; i++) {\n        for (let j = 0; j < this.inputBuffers[i].length; j++) {\n          this.inputBuffers[i][j].fill(0, this.blockSize);\n        }\n      }\n      return;\n    }\n\n    for (let i = 0; i < this.nbInputs; i++) {\n      for (let j = 0; j < this.inputBuffers[i].length; j++) {\n        let webAudioBlock = inputs[i][j];\n        this.inputBuffers[i][j].set(webAudioBlock, this.blockSize);\n      }\n    }\n  }\n\n  /** Write next web audio block from output buffers **/\n  writeOutputs(outputs) {\n    for (let i = 0; i < this.nbInputs; i++) {\n      for (let j = 0; j < this.inputBuffers[i].length; j++) {\n        let webAudioBlock = this.outputBuffers[i][j].subarray(0, WEBAUDIO_BLOCK_SIZE);\n        outputs[i][j].set(webAudioBlock);\n      }\n    }\n  }\n\n  /** Shift left content of input buffers to receive new web audio block **/\n  shiftInputBuffers() {\n    for (let i = 0; i < this.nbInputs; i++) {\n      for (let j = 0; j < this.inputBuffers[i].length; j++) {\n        this.inputBuffers[i][j].copyWithin(0, WEBAUDIO_BLOCK_SIZE);\n      }\n    }\n  }\n\n  /** Shift left content of output buffers to receive new web audio block **/\n  shiftOutputBuffers() {\n    for (let i = 0; i < this.nbOutputs; i++) {\n      for (let j = 0; j < this.outputBuffers[i].length; j++) {\n        this.outputBuffers[i][j].copyWithin(0, WEBAUDIO_BLOCK_SIZE);\n        this.outputBuffers[i][j].subarray(this.blockSize - WEBAUDIO_BLOCK_SIZE).fill(0);\n      }\n    }\n  }\n\n  /** Copy contents of input buffers to buffer actually sent to process **/\n  prepareInputBuffersToSend() {\n    for (let i = 0; i < this.nbInputs; i++) {\n      for (let j = 0; j < this.inputBuffers[i].length; j++) {\n        this.inputBuffersToSend[i][j].set(this.inputBuffersHead[i][j]);\n      }\n    }\n  }\n\n  /** Add contents of output buffers just processed to output buffers **/\n  handleOutputBuffersToRetrieve() {\n    for (let i = 0; i < this.nbOutputs; i++) {\n      for (let j = 0; j < this.outputBuffers[i].length; j++) {\n        for (let k = 0; k < this.blockSize; k++) {\n          this.outputBuffers[i][j][k] += this.outputBuffersToRetrieve[i][j][k] / this.nbOverlaps;\n        }\n      }\n    }\n  }\n\n  process(inputs, outputs, params) {\n    const input = inputs[0];\n    const hasInput = !(input[0] === undefined);\n    if (this.started && !hasInput) {\n      return false;\n    }\n    this.started = hasInput;\n    this.reallocateChannelsIfNeeded(inputs, outputs);\n\n    this.readInputs(inputs);\n    this.shiftInputBuffers();\n    this.prepareInputBuffersToSend();\n    this.processOLA(this.inputBuffersToSend, this.outputBuffersToRetrieve, params);\n    this.handleOutputBuffersToRetrieve();\n    this.writeOutputs(outputs);\n    this.shiftOutputBuffers();\n\n    return true;\n  }\n\n  processOLA(inputs, outputs, params) {\n    console.assert(false, 'Not overriden');\n  }\n}\n\nexport default OLAProcessor;\n","'use strict';\n// sourced from https://github.com/indutny/fft.js/\n// LICENSE\n// This software is licensed under the MIT License.\n// Copyright Fedor Indutny, 2017.\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport default class FFT {\n  constructor(size) {\n    this.size = size | 0;\n    if (this.size <= 1 || (this.size & (this.size - 1)) !== 0)\n      throw new Error('FFT size must be a power of two and bigger than 1');\n\n    this._csize = size << 1;\n\n    // NOTE: Use of `var` is intentional for old V8 versions\n    var table = new Array(this.size * 2);\n    for (var i = 0; i < table.length; i += 2) {\n      const angle = (Math.PI * i) / this.size;\n      table[i] = Math.cos(angle);\n      table[i + 1] = -Math.sin(angle);\n    }\n    this.table = table;\n\n    // Find size's power of two\n    var power = 0;\n    for (var t = 1; this.size > t; t <<= 1) power++;\n\n    // Calculate initial step's width:\n    //   * If we are full radix-4 - it is 2x smaller to give inital len=8\n    //   * Otherwise it is the same as `power` to give len=4\n    this._width = power % 2 === 0 ? power - 1 : power;\n\n    // Pre-compute bit-reversal patterns\n    this._bitrev = new Array(1 << this._width);\n    for (var j = 0; j < this._bitrev.length; j++) {\n      this._bitrev[j] = 0;\n      for (var shift = 0; shift < this._width; shift += 2) {\n        var revShift = this._width - shift - 2;\n        this._bitrev[j] |= ((j >>> shift) & 3) << revShift;\n      }\n    }\n\n    this._out = null;\n    this._data = null;\n    this._inv = 0;\n  }\n  fromComplexArray(complex, storage) {\n    var res = storage || new Array(complex.length >>> 1);\n    for (var i = 0; i < complex.length; i += 2) res[i >>> 1] = complex[i];\n    return res;\n  }\n  createComplexArray() {\n    const res = new Array(this._csize);\n    for (var i = 0; i < res.length; i++) res[i] = 0;\n    return res;\n  }\n  toComplexArray(input, storage) {\n    var res = storage || this.createComplexArray();\n    for (var i = 0; i < res.length; i += 2) {\n      res[i] = input[i >>> 1];\n      res[i + 1] = 0;\n    }\n    return res;\n  }\n  completeSpectrum(spectrum) {\n    var size = this._csize;\n    var half = size >>> 1;\n    for (var i = 2; i < half; i += 2) {\n      spectrum[size - i] = spectrum[i];\n      spectrum[size - i + 1] = -spectrum[i + 1];\n    }\n  }\n  transform(out, data) {\n    if (out === data) throw new Error('Input and output buffers must be different');\n\n    this._out = out;\n    this._data = data;\n    this._inv = 0;\n    this._transform4();\n    this._out = null;\n    this._data = null;\n  }\n  realTransform(out, data) {\n    if (out === data) throw new Error('Input and output buffers must be different');\n\n    this._out = out;\n    this._data = data;\n    this._inv = 0;\n    this._realTransform4();\n    this._out = null;\n    this._data = null;\n  }\n  inverseTransform(out, data) {\n    if (out === data) throw new Error('Input and output buffers must be different');\n\n    this._out = out;\n    this._data = data;\n    this._inv = 1;\n    this._transform4();\n    for (var i = 0; i < out.length; i++) out[i] /= this.size;\n    this._out = null;\n    this._data = null;\n  }\n  // radix-4 implementation\n  //\n  // NOTE: Uses of `var` are intentional for older V8 version that do not\n  // support both `let compound assignments` and `const phi`\n  _transform4() {\n    var out = this._out;\n    var size = this._csize;\n\n    // Initial step (permute and transform)\n    var width = this._width;\n    var step = 1 << width;\n    var len = (size / step) << 1;\n\n    var outOff;\n    var t;\n    var bitrev = this._bitrev;\n    if (len === 4) {\n      for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n        const off = bitrev[t];\n        this._singleTransform2(outOff, off, step);\n      }\n    } else {\n      // len === 8\n      for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n        const off = bitrev[t];\n        this._singleTransform4(outOff, off, step);\n      }\n    }\n\n    // Loop through steps in decreasing order\n    var inv = this._inv ? -1 : 1;\n    var table = this.table;\n    for (step >>= 2; step >= 2; step >>= 2) {\n      len = (size / step) << 1;\n      var quarterLen = len >>> 2;\n\n      // Loop through offsets in the data\n      for (outOff = 0; outOff < size; outOff += len) {\n        // Full case\n        var limit = outOff + quarterLen;\n        for (var i = outOff, k = 0; i < limit; i += 2, k += step) {\n          const A = i;\n          const B = A + quarterLen;\n          const C = B + quarterLen;\n          const D = C + quarterLen;\n\n          // Original values\n          const Ar = out[A];\n          const Ai = out[A + 1];\n          const Br = out[B];\n          const Bi = out[B + 1];\n          const Cr = out[C];\n          const Ci = out[C + 1];\n          const Dr = out[D];\n          const Di = out[D + 1];\n\n          // Middle values\n          const MAr = Ar;\n          const MAi = Ai;\n\n          const tableBr = table[k];\n          const tableBi = inv * table[k + 1];\n          const MBr = Br * tableBr - Bi * tableBi;\n          const MBi = Br * tableBi + Bi * tableBr;\n\n          const tableCr = table[2 * k];\n          const tableCi = inv * table[2 * k + 1];\n          const MCr = Cr * tableCr - Ci * tableCi;\n          const MCi = Cr * tableCi + Ci * tableCr;\n\n          const tableDr = table[3 * k];\n          const tableDi = inv * table[3 * k + 1];\n          const MDr = Dr * tableDr - Di * tableDi;\n          const MDi = Dr * tableDi + Di * tableDr;\n\n          // Pre-Final values\n          const T0r = MAr + MCr;\n          const T0i = MAi + MCi;\n          const T1r = MAr - MCr;\n          const T1i = MAi - MCi;\n          const T2r = MBr + MDr;\n          const T2i = MBi + MDi;\n          const T3r = inv * (MBr - MDr);\n          const T3i = inv * (MBi - MDi);\n\n          // Final values\n          const FAr = T0r + T2r;\n          const FAi = T0i + T2i;\n\n          const FCr = T0r - T2r;\n          const FCi = T0i - T2i;\n\n          const FBr = T1r + T3i;\n          const FBi = T1i - T3r;\n\n          const FDr = T1r - T3i;\n          const FDi = T1i + T3r;\n\n          out[A] = FAr;\n          out[A + 1] = FAi;\n          out[B] = FBr;\n          out[B + 1] = FBi;\n          out[C] = FCr;\n          out[C + 1] = FCi;\n          out[D] = FDr;\n          out[D + 1] = FDi;\n        }\n      }\n    }\n  }\n  // radix-2 implementation\n  //\n  // NOTE: Only called for len=4\n  _singleTransform2(outOff, off, step) {\n    const out = this._out;\n    const data = this._data;\n\n    const evenR = data[off];\n    const evenI = data[off + 1];\n    const oddR = data[off + step];\n    const oddI = data[off + step + 1];\n\n    const leftR = evenR + oddR;\n    const leftI = evenI + oddI;\n    const rightR = evenR - oddR;\n    const rightI = evenI - oddI;\n\n    out[outOff] = leftR;\n    out[outOff + 1] = leftI;\n    out[outOff + 2] = rightR;\n    out[outOff + 3] = rightI;\n  }\n  // radix-4\n  //\n  // NOTE: Only called for len=8\n  _singleTransform4(outOff, off, step) {\n    const out = this._out;\n    const data = this._data;\n    const inv = this._inv ? -1 : 1;\n    const step2 = step * 2;\n    const step3 = step * 3;\n\n    // Original values\n    const Ar = data[off];\n    const Ai = data[off + 1];\n    const Br = data[off + step];\n    const Bi = data[off + step + 1];\n    const Cr = data[off + step2];\n    const Ci = data[off + step2 + 1];\n    const Dr = data[off + step3];\n    const Di = data[off + step3 + 1];\n\n    // Pre-Final values\n    const T0r = Ar + Cr;\n    const T0i = Ai + Ci;\n    const T1r = Ar - Cr;\n    const T1i = Ai - Ci;\n    const T2r = Br + Dr;\n    const T2i = Bi + Di;\n    const T3r = inv * (Br - Dr);\n    const T3i = inv * (Bi - Di);\n\n    // Final values\n    const FAr = T0r + T2r;\n    const FAi = T0i + T2i;\n\n    const FBr = T1r + T3i;\n    const FBi = T1i - T3r;\n\n    const FCr = T0r - T2r;\n    const FCi = T0i - T2i;\n\n    const FDr = T1r - T3i;\n    const FDi = T1i + T3r;\n\n    out[outOff] = FAr;\n    out[outOff + 1] = FAi;\n    out[outOff + 2] = FBr;\n    out[outOff + 3] = FBi;\n    out[outOff + 4] = FCr;\n    out[outOff + 5] = FCi;\n    out[outOff + 6] = FDr;\n    out[outOff + 7] = FDi;\n  }\n  // Real input radix-4 implementation\n  _realTransform4() {\n    var out = this._out;\n    var size = this._csize;\n\n    // Initial step (permute and transform)\n    var width = this._width;\n    var step = 1 << width;\n    var len = (size / step) << 1;\n\n    var outOff;\n    var t;\n    var bitrev = this._bitrev;\n    if (len === 4) {\n      for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n        const off = bitrev[t];\n        this._singleRealTransform2(outOff, off >>> 1, step >>> 1);\n      }\n    } else {\n      // len === 8\n      for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n        const off = bitrev[t];\n        this._singleRealTransform4(outOff, off >>> 1, step >>> 1);\n      }\n    }\n\n    // Loop through steps in decreasing order\n    var inv = this._inv ? -1 : 1;\n    var table = this.table;\n    for (step >>= 2; step >= 2; step >>= 2) {\n      len = (size / step) << 1;\n      var halfLen = len >>> 1;\n      var quarterLen = halfLen >>> 1;\n      var hquarterLen = quarterLen >>> 1;\n\n      // Loop through offsets in the data\n      for (outOff = 0; outOff < size; outOff += len) {\n        for (var i = 0, k = 0; i <= hquarterLen; i += 2, k += step) {\n          var A = outOff + i;\n          var B = A + quarterLen;\n          var C = B + quarterLen;\n          var D = C + quarterLen;\n\n          // Original values\n          var Ar = out[A];\n          var Ai = out[A + 1];\n          var Br = out[B];\n          var Bi = out[B + 1];\n          var Cr = out[C];\n          var Ci = out[C + 1];\n          var Dr = out[D];\n          var Di = out[D + 1];\n\n          // Middle values\n          var MAr = Ar;\n          var MAi = Ai;\n\n          var tableBr = table[k];\n          var tableBi = inv * table[k + 1];\n          var MBr = Br * tableBr - Bi * tableBi;\n          var MBi = Br * tableBi + Bi * tableBr;\n\n          var tableCr = table[2 * k];\n          var tableCi = inv * table[2 * k + 1];\n          var MCr = Cr * tableCr - Ci * tableCi;\n          var MCi = Cr * tableCi + Ci * tableCr;\n\n          var tableDr = table[3 * k];\n          var tableDi = inv * table[3 * k + 1];\n          var MDr = Dr * tableDr - Di * tableDi;\n          var MDi = Dr * tableDi + Di * tableDr;\n\n          // Pre-Final values\n          var T0r = MAr + MCr;\n          var T0i = MAi + MCi;\n          var T1r = MAr - MCr;\n          var T1i = MAi - MCi;\n          var T2r = MBr + MDr;\n          var T2i = MBi + MDi;\n          var T3r = inv * (MBr - MDr);\n          var T3i = inv * (MBi - MDi);\n\n          // Final values\n          var FAr = T0r + T2r;\n          var FAi = T0i + T2i;\n\n          var FBr = T1r + T3i;\n          var FBi = T1i - T3r;\n\n          out[A] = FAr;\n          out[A + 1] = FAi;\n          out[B] = FBr;\n          out[B + 1] = FBi;\n\n          // Output final middle point\n          if (i === 0) {\n            var FCr = T0r - T2r;\n            var FCi = T0i - T2i;\n            out[C] = FCr;\n            out[C + 1] = FCi;\n            continue;\n          }\n\n          // Do not overwrite ourselves\n          if (i === hquarterLen) continue;\n\n          // In the flipped case:\n          // MAi = -MAi\n          // MBr=-MBi, MBi=-MBr\n          // MCr=-MCr\n          // MDr=MDi, MDi=MDr\n          var ST0r = T1r;\n          var ST0i = -T1i;\n          var ST1r = T0r;\n          var ST1i = -T0i;\n          var ST2r = -inv * T3i;\n          var ST2i = -inv * T3r;\n          var ST3r = -inv * T2i;\n          var ST3i = -inv * T2r;\n\n          var SFAr = ST0r + ST2r;\n          var SFAi = ST0i + ST2i;\n\n          var SFBr = ST1r + ST3i;\n          var SFBi = ST1i - ST3r;\n\n          var SA = outOff + quarterLen - i;\n          var SB = outOff + halfLen - i;\n\n          out[SA] = SFAr;\n          out[SA + 1] = SFAi;\n          out[SB] = SFBr;\n          out[SB + 1] = SFBi;\n        }\n      }\n    }\n  }\n  // radix-2 implementation\n  //\n  // NOTE: Only called for len=4\n  _singleRealTransform2(outOff, off, step) {\n    const out = this._out;\n    const data = this._data;\n\n    const evenR = data[off];\n    const oddR = data[off + step];\n\n    const leftR = evenR + oddR;\n    const rightR = evenR - oddR;\n\n    out[outOff] = leftR;\n    out[outOff + 1] = 0;\n    out[outOff + 2] = rightR;\n    out[outOff + 3] = 0;\n  }\n  // radix-4\n  //\n  // NOTE: Only called for len=8\n  _singleRealTransform4(outOff, off, step) {\n    const out = this._out;\n    const data = this._data;\n    const inv = this._inv ? -1 : 1;\n    const step2 = step * 2;\n    const step3 = step * 3;\n\n    // Original values\n    const Ar = data[off];\n    const Br = data[off + step];\n    const Cr = data[off + step2];\n    const Dr = data[off + step3];\n\n    // Pre-Final values\n    const T0r = Ar + Cr;\n    const T1r = Ar - Cr;\n    const T2r = Br + Dr;\n    const T3r = inv * (Br - Dr);\n\n    // Final values\n    const FAr = T0r + T2r;\n\n    const FBr = T1r;\n    const FBi = -T3r;\n\n    const FCr = T0r - T2r;\n\n    const FDr = T1r;\n    const FDi = T3r;\n\n    out[outOff] = FAr;\n    out[outOff + 1] = 0;\n    out[outOff + 2] = FBr;\n    out[outOff + 3] = FBi;\n    out[outOff + 4] = FCr;\n    out[outOff + 5] = 0;\n    out[outOff + 6] = FDr;\n    out[outOff + 7] = FDi;\n  }\n}\n","// coarse, crush, and shape processors adapted from dktr0's webdirt: https://github.com/dktr0/WebDirt/blob/5ce3d698362c54d6e1b68acc47eb2955ac62c793/dist/AudioWorklets.js\n// LICENSE GNU General Public License v3.0 see https://github.com/dktr0/WebDirt/blob/main/LICENSE\n// TOFIX: THIS FILE DOES NOT SUPPORT IMPORTS ON DEPOLYMENT\n\nimport OLAProcessor from './ola-processor';\nimport FFT from './fft.js';\n\nconst clamp = (num, min, max) => Math.min(Math.max(num, min), max);\nconst _mod = (n, m) => ((n % m) + m) % m;\n\nconst blockSize = 128;\n// adjust waveshape to remove frequencies above nyquist to prevent aliasing\n// referenced from https://www.kvraudio.com/forum/viewtopic.php?t=375517\nfunction polyBlep(phase, dt) {\n  // 0 <= phase < 1\n  if (phase < dt) {\n    phase /= dt;\n    // 2 * (phase - phase^2/2 - 0.5)\n    return phase + phase - phase * phase - 1;\n  }\n\n  // -1 < phase < 0\n  else if (phase > 1 - dt) {\n    phase = (phase - 1) / dt;\n    // 2 * (phase^2/2 + phase + 0.5)\n    return phase * phase + phase + phase + 1;\n  }\n\n  // 0 otherwise\n  else {\n    return 0;\n  }\n}\n\nconst waveshapes = {\n  tri(phase, skew = 0.5) {\n    const x = 1 - skew;\n    if (phase >= skew) {\n      return 1 / x - phase / x;\n    }\n    return phase / skew;\n  },\n  sine(phase) {\n    return Math.sin(Math.PI * 2 * phase) * 0.5 + 0.5;\n  },\n  ramp(phase) {\n    return phase;\n  },\n  saw(phase) {\n    return 1 - phase;\n  },\n\n  square(phase, skew = 0.5) {\n    if (phase >= skew) {\n      return 0;\n    }\n    return 1;\n  },\n  custom(phase, values = [0, 1]) {\n    const numParts = values.length - 1;\n    const currPart = Math.floor(phase * numParts);\n\n    const partLength = 1 / numParts;\n    const startVal = clamp(values[currPart], 0, 1);\n    const endVal = clamp(values[currPart + 1], 0, 1);\n    const y2 = endVal;\n    const y1 = startVal;\n    const x1 = 0;\n    const x2 = partLength;\n    const slope = (y2 - y1) / (x2 - x1);\n    return slope * (phase - partLength * currPart) + startVal;\n  },\n  sawblep(phase, dt) {\n    const v = 2 * phase - 1;\n    return v - polyBlep(phase, dt);\n  },\n};\n\nconst waveShapeNames = Object.keys(waveshapes);\nclass LFOProcessor extends AudioWorkletProcessor {\n  static get parameterDescriptors() {\n    return [\n      { name: 'time', defaultValue: 0 },\n      { name: 'end', defaultValue: 0 },\n      { name: 'frequency', defaultValue: 0.5 },\n      { name: 'skew', defaultValue: 0.5 },\n      { name: 'depth', defaultValue: 1 },\n      { name: 'phaseoffset', defaultValue: 0 },\n      { name: 'shape', defaultValue: 0 },\n      { name: 'dcoffset', defaultValue: 0 },\n    ];\n  }\n\n  constructor() {\n    super();\n    this.phase;\n  }\n\n  incrementPhase(dt) {\n    this.phase += dt;\n    if (this.phase > 1.0) {\n      this.phase = this.phase - 1;\n    }\n  }\n\n  process(inputs, outputs, parameters) {\n    // eslint-disable-next-line no-undef\n    if (currentTime >= parameters.end[0]) {\n      return false;\n    }\n\n    const output = outputs[0];\n    const frequency = parameters['frequency'][0];\n\n    const time = parameters['time'][0];\n    const depth = parameters['depth'][0];\n    const skew = parameters['skew'][0];\n    const phaseoffset = parameters['phaseoffset'][0];\n\n    const dcoffset = parameters['dcoffset'][0];\n    const shape = waveShapeNames[parameters['shape'][0]];\n\n    const blockSize = output[0].length ?? 0;\n\n    if (this.phase == null) {\n      this.phase = _mod(time * frequency + phaseoffset, 1);\n    }\n    // eslint-disable-next-line no-undef\n    const dt = frequency / sampleRate;\n    for (let n = 0; n < blockSize; n++) {\n      for (let i = 0; i < output.length; i++) {\n        const modval = (waveshapes[shape](this.phase, skew) + dcoffset) * depth;\n        output[i][n] = modval;\n      }\n      this.incrementPhase(dt);\n    }\n\n    return true;\n  }\n}\nregisterProcessor('lfo-processor', LFOProcessor);\n\nclass CoarseProcessor extends AudioWorkletProcessor {\n  static get parameterDescriptors() {\n    return [{ name: 'coarse', defaultValue: 1 }];\n  }\n\n  constructor() {\n    super();\n    this.started = false;\n  }\n\n  process(inputs, outputs, parameters) {\n    const input = inputs[0];\n    const output = outputs[0];\n\n    const hasInput = !(input[0] === undefined);\n    if (this.started && !hasInput) {\n      return false;\n    }\n    this.started = hasInput;\n\n    let coarse = parameters.coarse[0] ?? 0;\n    coarse = Math.max(1, coarse);\n    for (let n = 0; n < blockSize; n++) {\n      for (let i = 0; i < input.length; i++) {\n        output[i][n] = n % coarse === 0 ? input[i][n] : output[i][n - 1];\n      }\n    }\n    return true;\n  }\n}\nregisterProcessor('coarse-processor', CoarseProcessor);\n\nclass CrushProcessor extends AudioWorkletProcessor {\n  static get parameterDescriptors() {\n    return [{ name: 'crush', defaultValue: 0 }];\n  }\n\n  constructor() {\n    super();\n    this.started = false;\n  }\n\n  process(inputs, outputs, parameters) {\n    const input = inputs[0];\n    const output = outputs[0];\n\n    const hasInput = !(input[0] === undefined);\n    if (this.started && !hasInput) {\n      return false;\n    }\n    this.started = hasInput;\n\n    let crush = parameters.crush[0] ?? 8;\n    crush = Math.max(1, crush);\n\n    for (let n = 0; n < blockSize; n++) {\n      for (let i = 0; i < input.length; i++) {\n        const x = Math.pow(2, crush - 1);\n        output[i][n] = Math.round(input[i][n] * x) / x;\n      }\n    }\n    return true;\n  }\n}\nregisterProcessor('crush-processor', CrushProcessor);\n\nclass ShapeProcessor extends AudioWorkletProcessor {\n  static get parameterDescriptors() {\n    return [\n      { name: 'shape', defaultValue: 0 },\n      { name: 'postgain', defaultValue: 1 },\n    ];\n  }\n\n  constructor() {\n    super();\n    this.started = false;\n  }\n\n  process(inputs, outputs, parameters) {\n    const input = inputs[0];\n    const output = outputs[0];\n\n    const hasInput = !(input[0] === undefined);\n    if (this.started && !hasInput) {\n      return false;\n    }\n    this.started = hasInput;\n\n    let shape = parameters.shape[0];\n    shape = shape < 1 ? shape : 1.0 - 4e-10;\n    shape = (2.0 * shape) / (1.0 - shape);\n    const postgain = Math.max(0.001, Math.min(1, parameters.postgain[0]));\n\n    for (let n = 0; n < blockSize; n++) {\n      for (let i = 0; i < input.length; i++) {\n        output[i][n] = (((1 + shape) * input[i][n]) / (1 + shape * Math.abs(input[i][n]))) * postgain;\n      }\n    }\n    return true;\n  }\n}\nregisterProcessor('shape-processor', ShapeProcessor);\n\nfunction fast_tanh(x) {\n  const x2 = x * x;\n  return (x * (27.0 + x2)) / (27.0 + 9.0 * x2);\n}\nconst _PI = 3.14159265359;\n//adapted from https://github.com/TheBouteillacBear/webaudioworklet-wasm?tab=MIT-1-ov-file\nclass LadderProcessor extends AudioWorkletProcessor {\n  static get parameterDescriptors() {\n    return [\n      { name: 'frequency', defaultValue: 500 },\n      { name: 'q', defaultValue: 1 },\n      { name: 'drive', defaultValue: 0.69 },\n    ];\n  }\n\n  constructor() {\n    super();\n    this.started = false;\n    this.p0 = [0, 0];\n    this.p1 = [0, 0];\n    this.p2 = [0, 0];\n    this.p3 = [0, 0];\n    this.p32 = [0, 0];\n    this.p33 = [0, 0];\n    this.p34 = [0, 0];\n  }\n\n  process(inputs, outputs, parameters) {\n    const input = inputs[0];\n    const output = outputs[0];\n\n    const hasInput = !(input[0] === undefined);\n    if (this.started && !hasInput) {\n      return false;\n    }\n\n    this.started = hasInput;\n\n    const resonance = parameters.q[0];\n    const drive = clamp(Math.exp(parameters.drive[0]), 0.1, 2000);\n\n    let cutoff = parameters.frequency[0];\n    // eslint-disable-next-line no-undef\n    cutoff = (cutoff * 2 * _PI) / sampleRate;\n    cutoff = cutoff > 1 ? 1 : cutoff;\n\n    const k = Math.min(8, resonance * 0.4);\n    //               drive makeup  * resonance volume loss makeup\n    let makeupgain = (1 / drive) * Math.min(1.75, 1 + k);\n\n    for (let n = 0; n < blockSize; n++) {\n      for (let i = 0; i < input.length; i++) {\n        const out = this.p3[i] * 0.360891 + this.p32[i] * 0.41729 + this.p33[i] * 0.177896 + this.p34[i] * 0.0439725;\n\n        this.p34[i] = this.p33[i];\n        this.p33[i] = this.p32[i];\n        this.p32[i] = this.p3[i];\n\n        this.p0[i] += (fast_tanh(input[i][n] * drive - k * out) - fast_tanh(this.p0[i])) * cutoff;\n        this.p1[i] += (fast_tanh(this.p0[i]) - fast_tanh(this.p1[i])) * cutoff;\n        this.p2[i] += (fast_tanh(this.p1[i]) - fast_tanh(this.p2[i])) * cutoff;\n        this.p3[i] += (fast_tanh(this.p2[i]) - fast_tanh(this.p3[i])) * cutoff;\n\n        output[i][n] = out * makeupgain;\n      }\n    }\n    return true;\n  }\n}\nregisterProcessor('ladder-processor', LadderProcessor);\n\nclass DistortProcessor extends AudioWorkletProcessor {\n  static get parameterDescriptors() {\n    return [\n      { name: 'distort', defaultValue: 0 },\n      { name: 'postgain', defaultValue: 1 },\n    ];\n  }\n\n  constructor() {\n    super();\n    this.started = false;\n  }\n\n  process(inputs, outputs, parameters) {\n    const input = inputs[0];\n    const output = outputs[0];\n\n    const hasInput = !(input[0] === undefined);\n    if (this.started && !hasInput) {\n      return false;\n    }\n    this.started = hasInput;\n\n    const shape = Math.expm1(parameters.distort[0]);\n    const postgain = Math.max(0.001, Math.min(1, parameters.postgain[0]));\n\n    for (let n = 0; n < blockSize; n++) {\n      for (let i = 0; i < input.length; i++) {\n        output[i][n] = (((1 + shape) * input[i][n]) / (1 + shape * Math.abs(input[i][n]))) * postgain;\n      }\n    }\n    return true;\n  }\n}\nregisterProcessor('distort-processor', DistortProcessor);\n\n// SUPERSAW\nfunction lerp(a, b, n) {\n  return n * (b - a) + a;\n}\n\nfunction getUnisonDetune(unison, detune, voiceIndex) {\n  if (unison < 2) {\n    return 0;\n  }\n  return lerp(-detune * 0.5, detune * 0.5, voiceIndex / (unison - 1));\n}\nclass SuperSawOscillatorProcessor extends AudioWorkletProcessor {\n  constructor() {\n    super();\n    this.phase = [];\n  }\n  static get parameterDescriptors() {\n    return [\n      {\n        name: 'begin',\n        defaultValue: 0,\n        max: Number.POSITIVE_INFINITY,\n        min: 0,\n      },\n\n      {\n        name: 'end',\n        defaultValue: 0,\n        max: Number.POSITIVE_INFINITY,\n        min: 0,\n      },\n\n      {\n        name: 'frequency',\n        defaultValue: 440,\n        min: Number.EPSILON,\n      },\n\n      {\n        name: 'panspread',\n        defaultValue: 0.4,\n        min: 0,\n        max: 1,\n      },\n      {\n        name: 'freqspread',\n        defaultValue: 0.2,\n        min: 0,\n      },\n      {\n        name: 'detune',\n        defaultValue: 0,\n        min: 0,\n      },\n\n      {\n        name: 'voices',\n        defaultValue: 5,\n        min: 1,\n      },\n    ];\n  }\n  process(input, outputs, params) {\n    // eslint-disable-next-line no-undef\n    if (currentTime <= params.begin[0]) {\n      return true;\n    }\n    // eslint-disable-next-line no-undef\n    if (currentTime >= params.end[0]) {\n      // this.port.postMessage({ type: 'onended' });\n      return false;\n    }\n    let frequency = params.frequency[0];\n    //apply detune in cents\n    frequency = frequency * Math.pow(2, params.detune[0] / 1200);\n\n    const output = outputs[0];\n    const voices = params.voices[0];\n    const freqspread = params.freqspread[0];\n    const panspread = params.panspread[0] * 0.5 + 0.5;\n    const gain1 = Math.sqrt(1 - panspread);\n    const gain2 = Math.sqrt(panspread);\n\n    for (let n = 0; n < voices; n++) {\n      const isOdd = (n & 1) == 1;\n\n      //applies unison \"spread\" detune in semitones\n      const freq = frequency * Math.pow(2, getUnisonDetune(voices, freqspread, n) / 12);\n      let gainL = gain1;\n      let gainR = gain2;\n      // invert right and left gain\n      if (isOdd) {\n        gainL = gain2;\n        gainR = gain1;\n      }\n      // eslint-disable-next-line no-undef\n      const dt = freq / sampleRate;\n\n      for (let i = 0; i < output[0].length; i++) {\n        this.phase[n] = this.phase[n] ?? Math.random();\n        const v = waveshapes.sawblep(this.phase[n], dt);\n\n        output[0][i] = output[0][i] + v * gainL;\n        output[1][i] = output[1][i] + v * gainR;\n\n        this.phase[n] += dt;\n\n        if (this.phase[n] > 1.0) {\n          this.phase[n] = this.phase[n] - 1;\n        }\n      }\n    }\n    return true;\n  }\n}\n\nregisterProcessor('supersaw-oscillator', SuperSawOscillatorProcessor);\n\n// Phase Vocoder sourced from // sourced from https://github.com/olvb/phaze/tree/master?tab=readme-ov-file\nconst BUFFERED_BLOCK_SIZE = 2048;\n\nfunction genHannWindow(length) {\n  let win = new Float32Array(length);\n  for (var i = 0; i < length; i++) {\n    win[i] = 0.5 * (1 - Math.cos((2 * Math.PI * i) / length));\n  }\n  return win;\n}\n\nclass PhaseVocoderProcessor extends OLAProcessor {\n  static get parameterDescriptors() {\n    return [\n      {\n        name: 'pitchFactor',\n        defaultValue: 1.0,\n      },\n    ];\n  }\n\n  constructor(options) {\n    options.processorOptions = {\n      blockSize: BUFFERED_BLOCK_SIZE,\n    };\n    super(options);\n\n    this.fftSize = this.blockSize;\n    this.timeCursor = 0;\n\n    this.hannWindow = genHannWindow(this.blockSize);\n    // prepare FFT and pre-allocate buffers\n    this.fft = new FFT(this.fftSize);\n    this.freqComplexBuffer = this.fft.createComplexArray();\n    this.freqComplexBufferShifted = this.fft.createComplexArray();\n    this.timeComplexBuffer = this.fft.createComplexArray();\n    this.magnitudes = new Float32Array(this.fftSize / 2 + 1);\n    this.peakIndexes = new Int32Array(this.magnitudes.length);\n    this.nbPeaks = 0;\n  }\n\n  processOLA(inputs, outputs, parameters) {\n    // no automation, take last value\n\n    let pitchFactor = parameters.pitchFactor[parameters.pitchFactor.length - 1];\n\n    if (pitchFactor < 0) {\n      pitchFactor = pitchFactor * 0.25;\n    }\n    pitchFactor = Math.max(0, pitchFactor + 1);\n\n    for (var i = 0; i < this.nbInputs; i++) {\n      for (var j = 0; j < inputs[i].length; j++) {\n        // big assumption here: output is symetric to input\n        var input = inputs[i][j];\n        var output = outputs[i][j];\n\n        this.applyHannWindow(input);\n\n        this.fft.realTransform(this.freqComplexBuffer, input);\n\n        this.computeMagnitudes();\n        this.findPeaks();\n        this.shiftPeaks(pitchFactor);\n\n        this.fft.completeSpectrum(this.freqComplexBufferShifted);\n        this.fft.inverseTransform(this.timeComplexBuffer, this.freqComplexBufferShifted);\n        this.fft.fromComplexArray(this.timeComplexBuffer, output);\n        this.applyHannWindow(output);\n      }\n    }\n\n    this.timeCursor += this.hopSize;\n  }\n\n  /** Apply Hann window in-place */\n  applyHannWindow(input) {\n    for (var i = 0; i < this.blockSize; i++) {\n      input[i] = input[i] * this.hannWindow[i] * 1.62;\n    }\n  }\n\n  /** Compute squared magnitudes for peak finding **/\n  computeMagnitudes() {\n    var i = 0,\n      j = 0;\n    while (i < this.magnitudes.length) {\n      let real = this.freqComplexBuffer[j];\n      let imag = this.freqComplexBuffer[j + 1];\n      // no need to sqrt for peak finding\n      this.magnitudes[i] = real ** 2 + imag ** 2;\n      i += 1;\n      j += 2;\n    }\n  }\n\n  /** Find peaks in spectrum magnitudes **/\n  findPeaks() {\n    this.nbPeaks = 0;\n    var i = 2;\n    let end = this.magnitudes.length - 2;\n\n    while (i < end) {\n      let mag = this.magnitudes[i];\n\n      if (this.magnitudes[i - 1] >= mag || this.magnitudes[i - 2] >= mag) {\n        i++;\n        continue;\n      }\n      if (this.magnitudes[i + 1] >= mag || this.magnitudes[i + 2] >= mag) {\n        i++;\n        continue;\n      }\n\n      this.peakIndexes[this.nbPeaks] = i;\n      this.nbPeaks++;\n      i += 2;\n    }\n  }\n\n  /** Shift peaks and regions of influence by pitchFactor into new specturm */\n  shiftPeaks(pitchFactor) {\n    // zero-fill new spectrum\n    this.freqComplexBufferShifted.fill(0);\n\n    for (var i = 0; i < this.nbPeaks; i++) {\n      let peakIndex = this.peakIndexes[i];\n      let peakIndexShifted = Math.round(peakIndex * pitchFactor);\n\n      if (peakIndexShifted > this.magnitudes.length) {\n        break;\n      }\n\n      // find region of influence\n      var startIndex = 0;\n      var endIndex = this.fftSize;\n      if (i > 0) {\n        let peakIndexBefore = this.peakIndexes[i - 1];\n        startIndex = peakIndex - Math.floor((peakIndex - peakIndexBefore) / 2);\n      }\n      if (i < this.nbPeaks - 1) {\n        let peakIndexAfter = this.peakIndexes[i + 1];\n        endIndex = peakIndex + Math.ceil((peakIndexAfter - peakIndex) / 2);\n      }\n\n      // shift whole region of influence around peak to shifted peak\n      let startOffset = startIndex - peakIndex;\n      let endOffset = endIndex - peakIndex;\n      for (var j = startOffset; j < endOffset; j++) {\n        let binIndex = peakIndex + j;\n        let binIndexShifted = peakIndexShifted + j;\n\n        if (binIndexShifted >= this.magnitudes.length) {\n          break;\n        }\n\n        // apply phase correction\n        let omegaDelta = (2 * Math.PI * (binIndexShifted - binIndex)) / this.fftSize;\n        let phaseShiftReal = Math.cos(omegaDelta * this.timeCursor);\n        let phaseShiftImag = Math.sin(omegaDelta * this.timeCursor);\n\n        let indexReal = binIndex * 2;\n        let indexImag = indexReal + 1;\n        let valueReal = this.freqComplexBuffer[indexReal];\n        let valueImag = this.freqComplexBuffer[indexImag];\n\n        let valueShiftedReal = valueReal * phaseShiftReal - valueImag * phaseShiftImag;\n        let valueShiftedImag = valueReal * phaseShiftImag + valueImag * phaseShiftReal;\n\n        let indexShiftedReal = binIndexShifted * 2;\n        let indexShiftedImag = indexShiftedReal + 1;\n        this.freqComplexBufferShifted[indexShiftedReal] += valueShiftedReal;\n        this.freqComplexBufferShifted[indexShiftedImag] += valueShiftedImag;\n      }\n    }\n  }\n}\n\nregisterProcessor('phase-vocoder-processor', PhaseVocoderProcessor);\n"],"names":[],"mappings":"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"}