{"version":3,"mappings":"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","names":["noiseCache","getNoiseBuffer","type","ac","getAudioContext","bufferSize","noiseBuffer","output","lastOut","b0","b1","b2","b3","b4","b5","b6","i","white","getNoiseOscillator","t","o","time","getNoiseMix","inputNode","wet","noiseOscillator","drywet","mod","freq","range","ctx","osc","g","fm","harmonicityRatio","modulationIndex","wave","modfreq","modgain","waveforms","noises","registerSynthSounds","s","registerSound","value","onended","attack","decay","sustain","release","sound","getOscillator","stop","triggerRelease","gainNode","envelope","releaseEnvelope","getEnvelope","releaseTime","end","waveformN","partials","real","imag","amplitudes","n","note","vib","vibmod","noise","fmHarmonicity","fmModulationIndex","fmEnvelopeType","fmAttack","fmDecay","fmSustain","fmRelease","fmVelocity","fmWaveform","noteToMidi","midiToFreq","stopFm","fmEnvelope","modulator","v","getExpEnvelope","vibratoOscillator","gain","noiseMix","buildSamples","volume","randomness","frequency","shape","shapeCurve","slide","deltaSlide","pitchJump","pitchJumpTime","repeatTime","modulation","bitCrush","delay","sustainVolume","tremolo","PI2","sampleRate","sign","startSlide","startFrequency","b","tm","j","r","c","f","length","getZZFX","zrand","curve","lfo","znoise","zmod","zcrush","zdelay","duration","zzfx","sustainTime","samples","context","buffer","source","registerZZFXSounds","maxPan","panwidth","pan","width","Pattern","midi","valueToMidi","TAURI","BaseDirectory","readDir","readBinaryFile","writeTextFile","readTextFile","exists","dir","prefix","hasStrudelJson","subpath","loadStrudelJson","contents","sampleMap","processSampleMap","key","hapValue","onTriggerSample","fileResolver","writeStrudelJson","children","tree","count","walkFileTree","entry","parent","json","filepath","registerSamplesPrefix","path","node","fn","isAudioFile","filename","uint8ArrayToDataURL","uint8Array","blob","loadCache","resolveFileURL","url","playFile","bufferSource","loadBuffer","prebake","__vitePreload","registerSoundfonts"],"sources":["../../../packages/superdough/noise.mjs","../../../packages/superdough/synth.mjs","../../../packages/superdough/zzfx_fork.mjs","../../../packages/superdough/zzfx.mjs","../../src/repl/piano.mjs","../../src/repl/files.mjs","../../src/repl/prebake.mjs"],"sourcesContent":["import { drywet } from './helpers.mjs';\nimport { getAudioContext } from './superdough.mjs';\n\nlet noiseCache = {};\n\n// lazy generates noise buffers and keeps them forever\nfunction getNoiseBuffer(type) {\n  const ac = getAudioContext();\n  if (noiseCache[type]) {\n    return noiseCache[type];\n  }\n  const bufferSize = 2 * ac.sampleRate;\n  const noiseBuffer = ac.createBuffer(1, bufferSize, ac.sampleRate);\n  const output = noiseBuffer.getChannelData(0);\n  let lastOut = 0;\n  let b0, b1, b2, b3, b4, b5, b6;\n  b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\n\n  for (let i = 0; i < bufferSize; i++) {\n    if (type === 'white') {\n      output[i] = Math.random() * 2 - 1;\n    } else if (type === 'brown') {\n      let white = Math.random() * 2 - 1;\n      output[i] = (lastOut + 0.02 * white) / 1.02;\n      lastOut = output[i];\n    } else if (type === 'pink') {\n      let white = Math.random() * 2 - 1;\n      b0 = 0.99886 * b0 + white * 0.0555179;\n      b1 = 0.99332 * b1 + white * 0.0750759;\n      b2 = 0.969 * b2 + white * 0.153852;\n      b3 = 0.8665 * b3 + white * 0.3104856;\n      b4 = 0.55 * b4 + white * 0.5329522;\n      b5 = -0.7616 * b5 - white * 0.016898;\n      output[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n      output[i] *= 0.11;\n      b6 = white * 0.115926;\n    }\n  }\n  noiseCache[type] = noiseBuffer;\n  return noiseBuffer;\n}\n\n// expects one of noises as type\nexport function getNoiseOscillator(type = 'white', t) {\n  const ac = getAudioContext();\n  const o = ac.createBufferSource();\n  o.buffer = getNoiseBuffer(type);\n  o.loop = true;\n  o.start(t);\n  return {\n    node: o,\n    stop: (time) => o.stop(time),\n  };\n}\n\nexport function getNoiseMix(inputNode, wet, t) {\n  const noiseOscillator = getNoiseOscillator('pink', t);\n  const noiseMix = drywet(inputNode, noiseOscillator.node, wet);\n  return {\n    node: noiseMix,\n    stop: (time) => noiseOscillator?.stop(time),\n  };\n}\n","import { midiToFreq, noteToMidi } from './util.mjs';\nimport { registerSound, getAudioContext } from './superdough.mjs';\nimport { gainNode, getEnvelope, getExpEnvelope } from './helpers.mjs';\nimport { getNoiseMix, getNoiseOscillator } from './noise.mjs';\n\nconst mod = (freq, range = 1, type = 'sine') => {\n  const ctx = getAudioContext();\n  const osc = ctx.createOscillator();\n  osc.type = type;\n  osc.frequency.value = freq;\n  osc.start();\n  const g = new GainNode(ctx, { gain: range });\n  osc.connect(g); // -range, range\n  return { node: g, stop: (t) => osc.stop(t) };\n};\n\nconst fm = (osc, harmonicityRatio, modulationIndex, wave = 'sine') => {\n  const carrfreq = osc.frequency.value;\n  const modfreq = carrfreq * harmonicityRatio;\n  const modgain = modfreq * modulationIndex;\n  return mod(modfreq, modgain, wave);\n};\n\nconst waveforms = ['sine', 'square', 'triangle', 'sawtooth'];\nconst noises = ['pink', 'white', 'brown'];\n\nexport function registerSynthSounds() {\n  [...waveforms, ...noises].forEach((s) => {\n    registerSound(\n      s,\n      (t, value, onended) => {\n        // destructure adsr here, because the default should be different for synths and samples\n        let { attack = 0.001, decay = 0.05, sustain = 0.6, release = 0.01 } = value;\n\n        let sound;\n        if (waveforms.includes(s)) {\n          sound = getOscillator(s, t, value);\n        } else {\n          sound = getNoiseOscillator(s, t);\n        }\n\n        let { node: o, stop, triggerRelease } = sound;\n\n        // turn down\n        const g = gainNode(0.3);\n\n        // gain envelope\n        const { node: envelope, stop: releaseEnvelope } = getEnvelope(attack, decay, sustain, release, 1, t);\n\n        o.onended = () => {\n          o.disconnect();\n          g.disconnect();\n          onended();\n        };\n        return {\n          node: o.connect(g).connect(envelope),\n          stop: (releaseTime) => {\n            releaseEnvelope(releaseTime);\n            triggerRelease?.(releaseTime);\n            let end = releaseTime + release;\n            stop(end);\n          },\n        };\n      },\n      { type: 'synth', prebake: true },\n    );\n  });\n}\n\nexport function waveformN(partials, type) {\n  const real = new Float32Array(partials + 1);\n  const imag = new Float32Array(partials + 1);\n  const ac = getAudioContext();\n  const osc = ac.createOscillator();\n\n  const amplitudes = {\n    sawtooth: (n) => 1 / n,\n    square: (n) => (n % 2 === 0 ? 0 : 1 / n),\n    triangle: (n) => (n % 2 === 0 ? 0 : 1 / (n * n)),\n  };\n\n  if (!amplitudes[type]) {\n    throw new Error(`unknown wave type ${type}`);\n  }\n\n  real[0] = 0; // dc offset\n  imag[0] = 0;\n  let n = 1;\n  while (n <= partials) {\n    real[n] = amplitudes[type](n);\n    imag[n] = 0;\n    n++;\n  }\n\n  const wave = ac.createPeriodicWave(real, imag);\n  osc.setPeriodicWave(wave);\n  return osc;\n}\n\n// expects one of waveforms as s\nexport function getOscillator(\n  s,\n  t,\n  {\n    n: partials,\n    note,\n    freq,\n    vib = 0,\n    vibmod = 0.5,\n    noise = 0,\n    // fm\n    fmh: fmHarmonicity = 1,\n    fmi: fmModulationIndex,\n    fmenv: fmEnvelopeType = 'lin',\n    fmattack: fmAttack,\n    fmdecay: fmDecay,\n    fmsustain: fmSustain,\n    fmrelease: fmRelease,\n    fmvelocity: fmVelocity,\n    fmwave: fmWaveform = 'sine',\n  },\n) {\n  let ac = getAudioContext();\n  let o;\n  // If no partials are given, use stock waveforms\n  if (!partials || s === 'sine') {\n    o = getAudioContext().createOscillator();\n    o.type = s || 'triangle';\n  }\n  // generate custom waveform if partials are given\n  else {\n    o = waveformN(partials, s);\n  }\n\n  // get frequency from note...\n  note = note || 36;\n  if (typeof note === 'string') {\n    note = noteToMidi(note); // e.g. c3 => 48\n  }\n  // get frequency\n  if (!freq && typeof note === 'number') {\n    freq = midiToFreq(note); // + 48);\n  }\n\n  // set frequency\n  o.frequency.value = Number(freq);\n  o.start(t);\n\n  // FM\n  let stopFm, fmEnvelope;\n  if (fmModulationIndex) {\n    const { node: modulator, stop } = fm(o, fmHarmonicity, fmModulationIndex, fmWaveform);\n    if (![fmAttack, fmDecay, fmSustain, fmRelease, fmVelocity].find((v) => v !== undefined)) {\n      // no envelope by default\n      modulator.connect(o.frequency);\n    } else {\n      fmAttack = fmAttack ?? 0.001;\n      fmDecay = fmDecay ?? 0.001;\n      fmSustain = fmSustain ?? 1;\n      fmRelease = fmRelease ?? 0.001;\n      fmVelocity = fmVelocity ?? 1;\n      fmEnvelope = getEnvelope(fmAttack, fmDecay, fmSustain, fmRelease, fmVelocity, t);\n      if (fmEnvelopeType === 'exp') {\n        fmEnvelope = getExpEnvelope(fmAttack, fmDecay, fmSustain, fmRelease, fmVelocity, t);\n        fmEnvelope.node.maxValue = fmModulationIndex * 2;\n        fmEnvelope.node.minValue = 0.00001;\n      }\n      modulator.connect(fmEnvelope.node);\n      fmEnvelope.node.connect(o.frequency);\n    }\n    stopFm = stop;\n  }\n\n  // Additional oscillator for vibrato effect\n  let vibratoOscillator;\n  if (vib > 0) {\n    vibratoOscillator = getAudioContext().createOscillator();\n    vibratoOscillator.frequency.value = vib;\n    const gain = getAudioContext().createGain();\n    // Vibmod is the amount of vibrato, in semitones\n    gain.gain.value = vibmod * 100;\n    vibratoOscillator.connect(gain);\n    gain.connect(o.detune);\n    vibratoOscillator.start(t);\n  }\n\n  let noiseMix;\n  if (noise) {\n    noiseMix = getNoiseMix(o, noise, t);\n  }\n\n  return {\n    node: noiseMix?.node || o,\n    stop: (time) => {\n      vibratoOscillator?.stop(time);\n      noiseMix?.stop(time);\n      stopFm?.(time);\n      o.stop(time);\n    },\n    triggerRelease: (time) => {\n      fmEnvelope?.stop(time);\n    },\n  };\n}\n","import { getAudioContext } from './superdough.mjs';\n\n// https://github.com/KilledByAPixel/ZzFX/blob/master/ZzFX.js#L85C5-L180C6\n// changes: replaced this.volume with 1 + using sampleRate from getAudioContext()\nexport function buildSamples(\n  volume = 1,\n  randomness = 0.05,\n  frequency = 220,\n  attack = 0,\n  sustain = 0,\n  release = 0.1,\n  shape = 0,\n  shapeCurve = 1,\n  slide = 0,\n  deltaSlide = 0,\n  pitchJump = 0,\n  pitchJumpTime = 0,\n  repeatTime = 0,\n  noise = 0,\n  modulation = 0,\n  bitCrush = 0,\n  delay = 0,\n  sustainVolume = 1,\n  decay = 0,\n  tremolo = 0,\n) {\n  // init parameters\n  let PI2 = Math.PI * 2,\n    sampleRate = getAudioContext().sampleRate,\n    sign = (v) => (v > 0 ? 1 : -1),\n    startSlide = (slide *= (500 * PI2) / sampleRate / sampleRate),\n    startFrequency = (frequency *= ((1 + randomness * 2 * Math.random() - randomness) * PI2) / sampleRate),\n    b = [],\n    t = 0,\n    tm = 0,\n    i = 0,\n    j = 1,\n    r = 0,\n    c = 0,\n    s = 0,\n    f,\n    length;\n\n  // scale by sample rate\n  attack = attack * sampleRate + 9; // minimum attack to prevent pop\n  decay *= sampleRate;\n  sustain *= sampleRate;\n  release *= sampleRate;\n  delay *= sampleRate;\n  deltaSlide *= (500 * PI2) / sampleRate ** 3;\n  modulation *= PI2 / sampleRate;\n  pitchJump *= PI2 / sampleRate;\n  pitchJumpTime *= sampleRate;\n  repeatTime = (repeatTime * sampleRate) | 0;\n\n  // generate waveform\n  for (length = (attack + decay + sustain + release + delay) | 0; i < length; b[i++] = s) {\n    if (!(++c % ((bitCrush * 100) | 0))) {\n      // bit crush\n      s = shape\n        ? shape > 1\n          ? shape > 2\n            ? shape > 3 // wave shape\n              ? Math.sin((t % PI2) ** 3) // 4 noise\n              : Math.max(Math.min(Math.tan(t), 1), -1) // 3 tan\n            : 1 - (((((2 * t) / PI2) % 2) + 2) % 2) // 2 saw\n          : 1 - 4 * Math.abs(Math.round(t / PI2) - t / PI2) // 1 triangle\n        : Math.sin(t); // 0 sin\n\n      s =\n        (repeatTime\n          ? 1 - tremolo + tremolo * Math.sin((PI2 * i) / repeatTime) // tremolo\n          : 1) *\n        sign(s) *\n        Math.abs(s) ** shapeCurve * // curve 0=square, 2=pointy\n        volume *\n        1 * // envelope\n        (i < attack\n          ? i / attack // attack\n          : i < attack + decay // decay\n          ? 1 - ((i - attack) / decay) * (1 - sustainVolume) // decay falloff\n          : i < attack + decay + sustain // sustain\n          ? sustainVolume // sustain volume\n          : i < length - delay // release\n          ? ((length - i - delay) / release) * // release falloff\n            sustainVolume // release volume\n          : 0); // post release\n\n      s = delay\n        ? s / 2 +\n          (delay > i\n            ? 0 // delay\n            : ((i < length - delay ? 1 : (length - i) / delay) * // release delay\n                b[(i - delay) | 0]) /\n              2)\n        : s; // sample delay\n    }\n\n    f =\n      (frequency += slide += deltaSlide) * // frequency\n      Math.cos(modulation * tm++); // modulation\n    t += f - f * noise * (1 - (((Math.sin(i) + 1) * 1e9) % 2)); // noise\n\n    if (j && ++j > pitchJumpTime) {\n      // pitch jump\n      frequency += pitchJump; // apply pitch jump\n      startFrequency += pitchJump; // also apply to start\n      j = 0; // stop pitch jump time\n    }\n\n    if (repeatTime && !(++r % repeatTime)) {\n      // repeat\n      frequency = startFrequency; // reset frequency\n      slide = startSlide; // reset slide\n      j ||= 1; // reset pitch jump time\n    }\n  }\n\n  return b;\n}\n","//import { ZZFX } from 'zzfx';\nimport { midiToFreq, noteToMidi } from './util.mjs';\nimport { registerSound, getAudioContext } from './superdough.mjs';\nimport { buildSamples } from './zzfx_fork.mjs';\n\nexport const getZZFX = (value, t) => {\n  let {\n    s,\n    note = 36,\n    freq,\n    //\n    zrand = 0,\n    attack = 0,\n    decay = 0,\n    sustain = 0.8,\n    release = 0.1,\n    curve = 1,\n    slide = 0,\n    deltaSlide = 0,\n    pitchJump = 0,\n    pitchJumpTime = 0,\n    lfo = 0,\n    znoise = 0,\n    zmod = 0,\n    zcrush = 0,\n    zdelay = 0,\n    tremolo = 0,\n    duration = 0.2,\n    zzfx,\n  } = value;\n  const sustainTime = Math.max(duration - attack - decay, 0);\n  if (typeof note === 'string') {\n    note = noteToMidi(note); // e.g. c3 => 48\n  }\n  // get frequency\n  if (!freq && typeof note === 'number') {\n    freq = midiToFreq(note);\n  }\n  s = s.replace('z_', '');\n  const shape = ['sine', 'triangle', 'sawtooth', 'tan', 'noise'].indexOf(s) || 0;\n  curve = s === 'square' ? 0 : curve;\n\n  const params = zzfx || [\n    0.25, // volume\n    zrand,\n    freq,\n    attack,\n    sustainTime,\n    release,\n    shape,\n    curve,\n    slide,\n    deltaSlide,\n    pitchJump,\n    pitchJumpTime,\n    lfo,\n    znoise,\n    zmod,\n    zcrush,\n    zdelay,\n    sustain, // sustain volume!\n    decay,\n    tremolo,\n  ];\n  // console.log(redableZZFX(params));\n\n  const samples = /* ZZFX. */ buildSamples(...params);\n  const context = getAudioContext();\n  const buffer = context.createBuffer(1, samples.length, context.sampleRate);\n  buffer.getChannelData(0).set(samples);\n  const source = getAudioContext().createBufferSource();\n  source.buffer = buffer;\n  source.start(t);\n  return {\n    node: source,\n  };\n};\n\nexport function registerZZFXSounds() {\n  ['zzfx', 'z_sine', 'z_sawtooth', 'z_triangle', 'z_square', 'z_tan', 'z_noise'].forEach((wave) => {\n    registerSound(\n      wave,\n      (t, value, onended) => {\n        const { node: o } = getZZFX({ s: wave, ...value }, t);\n        o.onended = () => {\n          o.disconnect();\n          onended();\n        };\n        return {\n          node: o,\n          stop: () => {},\n        };\n      },\n      { type: 'synth', prebake: true },\n    );\n  });\n}\n\n// just for debugging\nfunction redableZZFX(params) {\n  const paramOrder = [\n    'volume',\n    'zrand',\n    'frequency',\n    'attack',\n    'sustain',\n    'release',\n    'shape',\n    'curve',\n    'slide',\n    'deltaSlide',\n    'pitchJump',\n    'pitchJumpTime',\n    'lfo',\n    'noise',\n    'zmod',\n    'zcrush',\n    'zdelay',\n    'sustainVolume',\n    'decay',\n    'tremolo',\n  ];\n  return Object.fromEntries(paramOrder.map((param, i) => [param, params[i]]));\n}\n","import { Pattern, noteToMidi, valueToMidi } from '@strudel.cycles/core';\n\nconst maxPan = noteToMidi('C8');\nconst panwidth = (pan, width) => pan * width + (1 - width) / 2;\n\nPattern.prototype.piano = function () {\n  return this.clip(1)\n    .s('piano')\n    .release(0.1)\n    .fmap((value) => {\n      const midi = valueToMidi(value);\n      // pan by pitch\n      const pan = panwidth(Math.min(Math.round(midi) / maxPan, 1), 0.5);\n      return { ...value, pan: (value.pan || 1) * pan };\n    });\n};\n","import {\n  processSampleMap,\n  registerSamplesPrefix,\n  registerSound,\n  onTriggerSample,\n  getAudioContext,\n  loadBuffer,\n} from '@strudel.cycles/webaudio';\n\nlet TAURI;\nif (typeof window !== 'undefined') {\n  TAURI = window?.__TAURI__;\n}\nexport const { BaseDirectory, readDir, readBinaryFile, writeTextFile, readTextFile, exists } = TAURI?.fs || {};\n\nexport const dir = BaseDirectory?.Audio; // https://tauri.app/v1/api/js/path#audiodir\nconst prefix = '~/music/';\n\nasync function hasStrudelJson(subpath) {\n  return exists(subpath + '/strudel.json', { dir });\n}\n\nasync function loadStrudelJson(subpath) {\n  const contents = await readTextFile(subpath + '/strudel.json', { dir });\n  const sampleMap = JSON.parse(contents);\n  processSampleMap(sampleMap, (key, value) => {\n    registerSound(key, (t, hapValue, onended) => onTriggerSample(t, hapValue, onended, value, fileResolver(subpath)), {\n      type: 'sample',\n      samples: value,\n      fileSystem: true,\n      tag: 'local',\n    });\n  });\n}\n\nasync function writeStrudelJson(subpath) {\n  const children = await readDir(subpath, { dir, recursive: true });\n  const name = subpath.split('/').slice(-1)[0];\n  const tree = { name, children };\n\n  let samples = {};\n  let count = 0;\n  walkFileTree(tree, (entry, parent) => {\n    if (['wav', 'mp3'].includes(entry.name.split('.').slice(-1)[0])) {\n      samples[parent.name] = samples[parent.name] || [];\n      count += 1;\n      samples[parent.name].push(entry.subpath.slice(1).concat([entry.name]).join('/'));\n    }\n  });\n  const json = JSON.stringify(samples, null, 2);\n  const filepath = subpath + '/strudel.json';\n  await writeTextFile(filepath, json, { dir });\n  console.log(`wrote strudel.json with ${count} samples to ${subpath}!`);\n}\n\nregisterSamplesPrefix(prefix, async (path) => {\n  const subpath = path.replace(prefix, '');\n  const hasJson = await hasStrudelJson(subpath);\n  if (!hasJson) {\n    await writeStrudelJson(subpath);\n  }\n  return loadStrudelJson(subpath);\n});\n\nexport const walkFileTree = (node, fn) => {\n  if (!Array.isArray(node?.children)) {\n    return;\n  }\n  for (const entry of node.children) {\n    entry.subpath = (node.subpath || []).concat([node.name]);\n    fn(entry, node);\n    if (entry.children) {\n      walkFileTree(entry, fn);\n    }\n  }\n};\n\nexport const isAudioFile = (filename) => ['wav', 'mp3'].includes(filename.split('.').slice(-1)[0]);\n\nfunction uint8ArrayToDataURL(uint8Array) {\n  const blob = new Blob([uint8Array], { type: 'audio/*' });\n  const dataURL = URL.createObjectURL(blob);\n  return dataURL;\n}\n\nconst loadCache = {}; // caches local urls to data urls\nexport async function resolveFileURL(url) {\n  if (loadCache[url]) {\n    return loadCache[url];\n  }\n  loadCache[url] = (async () => {\n    const contents = await readBinaryFile(url, { dir });\n    return uint8ArrayToDataURL(contents);\n  })();\n  return loadCache[url];\n}\n\nconst fileResolver = (subpath) => (url) => resolveFileURL(subpath.endsWith('/') ? subpath + url : subpath + '/' + url);\n\nexport async function playFile(path) {\n  const url = await resolveFileURL(path);\n  const ac = getAudioContext();\n  const bufferSource = ac.createBufferSource();\n  bufferSource.buffer = await loadBuffer(url, ac);\n  bufferSource.connect(ac.destination);\n  bufferSource.start(ac.currentTime);\n}\n","import { Pattern, noteToMidi, valueToMidi } from '@strudel.cycles/core';\nimport { registerSynthSounds, registerZZFXSounds, samples } from '@strudel.cycles/webaudio';\nimport './piano.mjs';\nimport './files.mjs';\n\nexport async function prebake() {\n  // https://archive.org/details/SalamanderGrandPianoV3\n  // License: CC-by http://creativecommons.org/licenses/by/3.0/ Author: Alexander Holm\n  await Promise.all([\n    registerSynthSounds(),\n    registerZZFXSounds(),\n    //registerSoundfonts(),\n    // need dynamic import here, because importing @strudel.cycles/soundfonts fails on server:\n    // => getting \"window is not defined\", as soon as \"@strudel.cycles/soundfonts\" is imported statically\n    // seems to be a problem with soundfont2\n    import('@strudel.cycles/soundfonts').then(({ registerSoundfonts }) => registerSoundfonts()),\n    samples(`./piano.json`, `./piano/`, { prebake: true }),\n    // https://github.com/sgossner/VCSL/\n    // https://api.github.com/repositories/126427031/contents/\n    // LICENSE: CC0 general-purpose\n    samples(`./vcsl.json`, 'github:sgossner/VCSL/master/', { prebake: true }),\n    samples(`./tidal-drum-machines.json`, 'github:ritchse/tidal-drum-machines/main/machines/', {\n      prebake: true,\n      tag: 'drum-machines',\n    }),\n    samples(`./EmuSP12.json`, `./EmuSP12/`, { prebake: true, tag: 'drum-machines' }),\n    samples(\n      {\n        casio: ['casio/high.wav', 'casio/low.wav', 'casio/noise.wav'],\n        crow: ['crow/000_crow.wav', 'crow/001_crow2.wav', 'crow/002_crow3.wav', 'crow/003_crow4.wav'],\n        insect: [\n          'insect/000_everglades_conehead.wav',\n          'insect/001_robust_shieldback.wav',\n          'insect/002_seashore_meadow_katydid.wav',\n        ],\n        wind: [\n          'wind/000_wind1.wav',\n          'wind/001_wind10.wav',\n          'wind/002_wind2.wav',\n          'wind/003_wind3.wav',\n          'wind/004_wind4.wav',\n          'wind/005_wind5.wav',\n          'wind/006_wind6.wav',\n          'wind/007_wind7.wav',\n          'wind/008_wind8.wav',\n          'wind/009_wind9.wav',\n        ],\n        jazz: [\n          'jazz/000_BD.wav',\n          'jazz/001_CB.wav',\n          'jazz/002_FX.wav',\n          'jazz/003_HH.wav',\n          'jazz/004_OH.wav',\n          'jazz/005_P1.wav',\n          'jazz/006_P2.wav',\n          'jazz/007_SN.wav',\n        ],\n        metal: [\n          'metal/000_0.wav',\n          'metal/001_1.wav',\n          'metal/002_2.wav',\n          'metal/003_3.wav',\n          'metal/004_4.wav',\n          'metal/005_5.wav',\n          'metal/006_6.wav',\n          'metal/007_7.wav',\n          'metal/008_8.wav',\n          'metal/009_9.wav',\n        ],\n        east: [\n          'east/000_nipon_wood_block.wav',\n          'east/001_ohkawa_mute.wav',\n          'east/002_ohkawa_open.wav',\n          'east/003_shime_hi.wav',\n          'east/004_shime_hi_2.wav',\n          'east/005_shime_mute.wav',\n          'east/006_taiko_1.wav',\n          'east/007_taiko_2.wav',\n          'east/008_taiko_3.wav',\n        ],\n        space: [\n          'space/000_0.wav',\n          'space/001_1.wav',\n          'space/002_11.wav',\n          'space/003_12.wav',\n          'space/004_13.wav',\n          'space/005_14.wav',\n          'space/006_15.wav',\n          'space/007_16.wav',\n          'space/008_17.wav',\n          'space/009_18.wav',\n          'space/010_2.wav',\n          'space/011_3.wav',\n          'space/012_4.wav',\n          'space/013_5.wav',\n          'space/014_6.wav',\n          'space/015_7.wav',\n          'space/016_8.wav',\n          'space/017_9.wav',\n        ],\n        numbers: [\n          'numbers/0.wav',\n          'numbers/1.wav',\n          'numbers/2.wav',\n          'numbers/3.wav',\n          'numbers/4.wav',\n          'numbers/5.wav',\n          'numbers/6.wav',\n          'numbers/7.wav',\n          'numbers/8.wav',\n        ],\n      },\n      'github:tidalcycles/Dirt-Samples/master/',\n    ),\n  ]);\n  // await samples('github:tidalcycles/Dirt-Samples/master');\n}\n\nconst maxPan = noteToMidi('C8');\nconst panwidth = (pan, width) => pan * width + (1 - width) / 2;\n\nPattern.prototype.piano = function () {\n  return this.fmap((v) => ({ ...v, clip: v.clip ?? 1 })) // set clip if not already set..\n    .s('piano')\n    .release(0.1)\n    .fmap((value) => {\n      const midi = valueToMidi(value);\n      // pan by pitch\n      const pan = panwidth(Math.min(Math.round(midi) / maxPan, 1), 0.5);\n      return { ...value, pan: (value.pan || 1) * pan };\n    });\n};\n"],"file":"_astro/prebake.5a610a01.js"}