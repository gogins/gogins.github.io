(function(){"use strict";class ct extends AudioWorkletProcessor{constructor(t){super(t),this.started=!1,this.nbInputs=t.numberOfInputs,this.nbOutputs=t.numberOfOutputs,this.blockSize=t.processorOptions.blockSize,this.hopSize=128,this.nbOverlaps=this.blockSize/this.hopSize,this.inputBuffers=new Array(this.nbInputs),this.inputBuffersHead=new Array(this.nbInputs),this.inputBuffersToSend=new Array(this.nbInputs);for(let s=0;s<this.nbInputs;s++)this.allocateInputChannels(s,1);this.outputBuffers=new Array(this.nbOutputs),this.outputBuffersToRetrieve=new Array(this.nbOutputs);for(let s=0;s<this.nbOutputs;s++)this.allocateOutputChannels(s,1)}reallocateChannelsIfNeeded(t,s){for(let e=0;e<this.nbInputs;e++){let r=t[e].length;r!=this.inputBuffers[e].length&&this.allocateInputChannels(e,r)}for(let e=0;e<this.nbOutputs;e++){let r=s[e].length;r!=this.outputBuffers[e].length&&this.allocateOutputChannels(e,r)}}allocateInputChannels(t,s){this.inputBuffers[t]=new Array(s);for(let e=0;e<s;e++)this.inputBuffers[t][e]=new Float32Array(this.blockSize+128),this.inputBuffers[t][e].fill(0);this.inputBuffersHead[t]=new Array(s),this.inputBuffersToSend[t]=new Array(s);for(let e=0;e<s;e++)this.inputBuffersHead[t][e]=this.inputBuffers[t][e].subarray(0,this.blockSize),this.inputBuffersToSend[t][e]=new Float32Array(this.blockSize)}allocateOutputChannels(t,s){this.outputBuffers[t]=new Array(s);for(let e=0;e<s;e++)this.outputBuffers[t][e]=new Float32Array(this.blockSize),this.outputBuffers[t][e].fill(0);this.outputBuffersToRetrieve[t]=new Array(s);for(let e=0;e<s;e++)this.outputBuffersToRetrieve[t][e]=new Float32Array(this.blockSize),this.outputBuffersToRetrieve[t][e].fill(0)}readInputs(t){if(t[0].length&&t[0][0].length==0){for(let s=0;s<this.nbInputs;s++)for(let e=0;e<this.inputBuffers[s].length;e++)this.inputBuffers[s][e].fill(0,this.blockSize);return}for(let s=0;s<this.nbInputs;s++)for(let e=0;e<this.inputBuffers[s].length;e++){let r=t[s][e];this.inputBuffers[s][e].set(r,this.blockSize)}}writeOutputs(t){for(let s=0;s<this.nbInputs;s++)for(let e=0;e<this.inputBuffers[s].length;e++){let r=this.outputBuffers[s][e].subarray(0,128);t[s][e].set(r)}}shiftInputBuffers(){for(let t=0;t<this.nbInputs;t++)for(let s=0;s<this.inputBuffers[t].length;s++)this.inputBuffers[t][s].copyWithin(0,128)}shiftOutputBuffers(){for(let t=0;t<this.nbOutputs;t++)for(let s=0;s<this.outputBuffers[t].length;s++)this.outputBuffers[t][s].copyWithin(0,128),this.outputBuffers[t][s].subarray(this.blockSize-128).fill(0)}prepareInputBuffersToSend(){for(let t=0;t<this.nbInputs;t++)for(let s=0;s<this.inputBuffers[t].length;s++)this.inputBuffersToSend[t][s].set(this.inputBuffersHead[t][s])}handleOutputBuffersToRetrieve(){for(let t=0;t<this.nbOutputs;t++)for(let s=0;s<this.outputBuffers[t].length;s++)for(let e=0;e<this.blockSize;e++)this.outputBuffers[t][s][e]+=this.outputBuffersToRetrieve[t][s][e]/this.nbOverlaps}process(t,s,e){const i=t[0][0]!==void 0;return this.started&&!i?!1:(this.started=i,this.reallocateChannelsIfNeeded(t,s),this.readInputs(t),this.shiftInputBuffers(),this.prepareInputBuffersToSend(),this.processOLA(this.inputBuffersToSend,this.outputBuffersToRetrieve,e),this.handleOutputBuffersToRetrieve(),this.writeOutputs(s),this.shiftOutputBuffers(),!0)}processOLA(t,s,e){console.assert(!1,"Not overriden")}}class lt{constructor(t){if(this.size=t|0,this.size<=1||this.size&this.size-1)throw new Error("FFT size must be a power of two and bigger than 1");this._csize=t<<1;for(var s=new Array(this.size*2),e=0;e<s.length;e+=2){const o=Math.PI*e/this.size;s[e]=Math.cos(o),s[e+1]=-Math.sin(o)}this.table=s;for(var r=0,i=1;this.size>i;i<<=1)r++;this._width=r%2===0?r-1:r,this._bitrev=new Array(1<<this._width);for(var n=0;n<this._bitrev.length;n++){this._bitrev[n]=0;for(var a=0;a<this._width;a+=2){var c=this._width-a-2;this._bitrev[n]|=(n>>>a&3)<<c}}this._out=null,this._data=null,this._inv=0}fromComplexArray(t,s){for(var e=s||new Array(t.length>>>1),r=0;r<t.length;r+=2)e[r>>>1]=t[r];return e}createComplexArray(){const t=new Array(this._csize);for(var s=0;s<t.length;s++)t[s]=0;return t}toComplexArray(t,s){for(var e=s||this.createComplexArray(),r=0;r<e.length;r+=2)e[r]=t[r>>>1],e[r+1]=0;return e}completeSpectrum(t){for(var s=this._csize,e=s>>>1,r=2;r<e;r+=2)t[s-r]=t[r],t[s-r+1]=-t[r+1]}transform(t,s){if(t===s)throw new Error("Input and output buffers must be different");this._out=t,this._data=s,this._inv=0,this._transform4(),this._out=null,this._data=null}realTransform(t,s){if(t===s)throw new Error("Input and output buffers must be different");this._out=t,this._data=s,this._inv=0,this._realTransform4(),this._out=null,this._data=null}inverseTransform(t,s){if(t===s)throw new Error("Input and output buffers must be different");this._out=t,this._data=s,this._inv=1,this._transform4();for(var e=0;e<t.length;e++)t[e]/=this.size;this._out=null,this._data=null}_transform4(){var t=this._out,s=this._csize,e=this._width,r=1<<e,i=s/r<<1,n,a,c=this._bitrev;if(i===4)for(n=0,a=0;n<s;n+=i,a++){const d=c[a];this._singleTransform2(n,d,r)}else for(n=0,a=0;n<s;n+=i,a++){const d=c[a];this._singleTransform4(n,d,r)}var o=this._inv?-1:1,u=this.table;for(r>>=2;r>=2;r>>=2){i=s/r<<1;var f=i>>>2;for(n=0;n<s;n+=i)for(var v=n+f,l=n,p=0;l<v;l+=2,p+=r){const d=l,g=d+f,m=g+f,B=m+f,I=t[d],w=t[d+1],b=t[g],_=t[g+1],A=t[m],y=t[m+1],P=t[B],T=t[B+1],x=I,C=w,k=u[p],z=o*u[p+1],F=b*k-_*z,M=b*z+_*k,W=u[2*p],q=o*u[2*p+1],N=A*W-y*q,U=A*q+y*W,H=u[3*p],K=o*u[3*p+1],L=P*H-T*K,Z=P*K+T*H,Y=x+N,O=C+U,V=x-N,G=C-U,J=F+L,R=M+Z,D=o*(F-L),Q=o*(M-Z),X=Y+J,tt=O+R,st=Y-J,et=O-R,rt=V+Q,nt=G-D,it=V-Q,ot=G+D;t[d]=X,t[d+1]=tt,t[g]=rt,t[g+1]=nt,t[m]=st,t[m+1]=et,t[B]=it,t[B+1]=ot}}}_singleTransform2(t,s,e){const r=this._out,i=this._data,n=i[s],a=i[s+1],c=i[s+e],o=i[s+e+1],u=n+c,f=a+o,v=n-c,l=a-o;r[t]=u,r[t+1]=f,r[t+2]=v,r[t+3]=l}_singleTransform4(t,s,e){const r=this._out,i=this._data,n=this._inv?-1:1,a=e*2,c=e*3,o=i[s],u=i[s+1],f=i[s+e],v=i[s+e+1],l=i[s+a],p=i[s+a+1],d=i[s+c],g=i[s+c+1],m=o+l,B=u+p,I=o-l,w=u-p,b=f+d,_=v+g,A=n*(f-d),y=n*(v-g),P=m+b,T=B+_,x=I+y,C=w-A,k=m-b,z=B-_,F=I-y,M=w+A;r[t]=P,r[t+1]=T,r[t+2]=x,r[t+3]=C,r[t+4]=k,r[t+5]=z,r[t+6]=F,r[t+7]=M}_realTransform4(){var t=this._out,s=this._csize,e=this._width,r=1<<e,i=s/r<<1,n,a,c=this._bitrev;if(i===4)for(n=0,a=0;n<s;n+=i,a++){const at=c[a];this._singleRealTransform2(n,at>>>1,r>>>1)}else for(n=0,a=0;n<s;n+=i,a++){const at=c[a];this._singleRealTransform4(n,at>>>1,r>>>1)}var o=this._inv?-1:1,u=this.table;for(r>>=2;r>=2;r>>=2){i=s/r<<1;var f=i>>>1,v=f>>>1,l=v>>>1;for(n=0;n<s;n+=i)for(var p=0,d=0;p<=l;p+=2,d+=r){var g=n+p,m=g+v,B=m+v,I=B+v,w=t[g],b=t[g+1],_=t[m],A=t[m+1],y=t[B],P=t[B+1],T=t[I],x=t[I+1],C=w,k=b,z=u[d],F=o*u[d+1],M=_*z-A*F,W=_*F+A*z,q=u[2*d],N=o*u[2*d+1],U=y*q-P*N,H=y*N+P*q,K=u[3*d],L=o*u[3*d+1],Z=T*K-x*L,Y=T*L+x*K,O=C+U,V=k+H,G=C-U,J=k-H,R=M+Z,D=W+Y,Q=o*(M-Z),X=o*(W-Y),tt=O+R,st=V+D,et=G+X,rt=J-Q;if(t[g]=tt,t[g+1]=st,t[m]=et,t[m+1]=rt,p===0){var nt=O-R,it=V-D;t[B]=nt,t[B+1]=it;continue}if(p!==l){var ot=G,xt=-J,Ct=O,kt=-V,zt=-o*X,Ft=-o*Q,Mt=-o*D,Ot=-o*R,Vt=ot+zt,Rt=xt+Ft,Dt=Ct+Ot,Et=kt-Mt,ht=n+v-p,ut=n+f-p;t[ht]=Vt,t[ht+1]=Rt,t[ut]=Dt,t[ut+1]=Et}}}}_singleRealTransform2(t,s,e){const r=this._out,i=this._data,n=i[s],a=i[s+e],c=n+a,o=n-a;r[t]=c,r[t+1]=0,r[t+2]=o,r[t+3]=0}_singleRealTransform4(t,s,e){const r=this._out,i=this._data,n=this._inv?-1:1,a=e*2,c=e*3,o=i[s],u=i[s+e],f=i[s+a],v=i[s+c],l=o+f,p=o-f,d=u+v,g=n*(u-v),m=l+d,B=p,I=-g,w=l-d,b=p,_=g;r[t]=m,r[t+1]=0,r[t+2]=B,r[t+3]=I,r[t+4]=w,r[t+5]=0,r[t+6]=b,r[t+7]=_}}const $=(h,t,s)=>Math.min(Math.max(h,t),s),ft=(h,t)=>(h%t+t)%t,E=128;function pt(h,t){return h<t?(h/=t,h+h-h*h-1):h>1-t?(h=(h-1)/t,h*h+h+h+1):0}const j={tri(h,t=.5){const s=1-t;return h>=t?1/s-h/s:h/t},sine(h){return Math.sin(Math.PI*2*h)*.5+.5},ramp(h){return h},saw(h){return 1-h},square(h,t=.5){return h>=t?0:1},custom(h,t=[0,1]){const s=t.length-1,e=Math.floor(h*s),r=1/s,i=$(t[e],0,1),a=$(t[e+1],0,1),c=i,o=0,u=r;return(a-c)/(u-o)*(h-r*e)+i},sawblep(h,t){return 2*h-1-pt(h,t)}},dt=Object.keys(j);class vt extends AudioWorkletProcessor{static get parameterDescriptors(){return[{name:"time",defaultValue:0},{name:"end",defaultValue:0},{name:"frequency",defaultValue:.5},{name:"skew",defaultValue:.5},{name:"depth",defaultValue:1},{name:"phaseoffset",defaultValue:0},{name:"shape",defaultValue:0},{name:"dcoffset",defaultValue:0}]}constructor(){super(),this.phase}incrementPhase(t){this.phase+=t,this.phase>1&&(this.phase=this.phase-1)}process(t,s,e){if(currentTime>=e.end[0])return!1;const r=s[0],i=e.frequency[0],n=e.time[0],a=e.depth[0],c=e.skew[0],o=e.phaseoffset[0],u=e.dcoffset[0],f=dt[e.shape[0]],v=r[0].length??0;this.phase==null&&(this.phase=ft(n*i+o,1));const l=i/sampleRate;for(let p=0;p<v;p++){for(let d=0;d<r.length;d++){const g=(j[f](this.phase,c)+u)*a;r[d][p]=g}this.incrementPhase(l)}return!0}}registerProcessor("lfo-processor",vt);class mt extends AudioWorkletProcessor{static get parameterDescriptors(){return[{name:"coarse",defaultValue:1}]}constructor(){super(),this.started=!1}process(t,s,e){const r=t[0],i=s[0],n=r[0]!==void 0;if(this.started&&!n)return!1;this.started=n;let a=e.coarse[0]??0;a=Math.max(1,a);for(let c=0;c<E;c++)for(let o=0;o<r.length;o++)i[o][c]=c%a===0?r[o][c]:i[o][c-1];return!0}}registerProcessor("coarse-processor",mt);class gt extends AudioWorkletProcessor{static get parameterDescriptors(){return[{name:"crush",defaultValue:0}]}constructor(){super(),this.started=!1}process(t,s,e){const r=t[0],i=s[0],n=r[0]!==void 0;if(this.started&&!n)return!1;this.started=n;let a=e.crush[0]??8;a=Math.max(1,a);for(let c=0;c<E;c++)for(let o=0;o<r.length;o++){const u=Math.pow(2,a-1);i[o][c]=Math.round(r[o][c]*u)/u}return!0}}registerProcessor("crush-processor",gt);class Bt extends AudioWorkletProcessor{static get parameterDescriptors(){return[{name:"shape",defaultValue:0},{name:"postgain",defaultValue:1}]}constructor(){super(),this.started=!1}process(t,s,e){const r=t[0],i=s[0],n=r[0]!==void 0;if(this.started&&!n)return!1;this.started=n;let a=e.shape[0];a=a<1?a:1-4e-10,a=2*a/(1-a);const c=Math.max(.001,Math.min(1,e.postgain[0]));for(let o=0;o<E;o++)for(let u=0;u<r.length;u++)i[u][o]=(1+a)*r[u][o]/(1+a*Math.abs(r[u][o]))*c;return!0}}registerProcessor("shape-processor",Bt);function S(h){const t=h*h;return h*(27+t)/(27+9*t)}const bt=3.14159265359;class _t extends AudioWorkletProcessor{static get parameterDescriptors(){return[{name:"frequency",defaultValue:500},{name:"q",defaultValue:1},{name:"drive",defaultValue:.69}]}constructor(){super(),this.started=!1,this.p0=[0,0],this.p1=[0,0],this.p2=[0,0],this.p3=[0,0],this.p32=[0,0],this.p33=[0,0],this.p34=[0,0]}process(t,s,e){const r=t[0],i=s[0],n=r[0]!==void 0;if(this.started&&!n)return!1;this.started=n;const a=e.q[0],c=$(Math.exp(e.drive[0]),.1,2e3);let o=e.frequency[0];o=o*2*bt/sampleRate,o=o>1?1:o;const u=Math.min(8,a*.4);let f=1/c*Math.min(1.75,1+u);for(let v=0;v<E;v++)for(let l=0;l<r.length;l++){const p=this.p3[l]*.360891+this.p32[l]*.41729+this.p33[l]*.177896+this.p34[l]*.0439725;this.p34[l]=this.p33[l],this.p33[l]=this.p32[l],this.p32[l]=this.p3[l],this.p0[l]+=(S(r[l][v]*c-u*p)-S(this.p0[l]))*o,this.p1[l]+=(S(this.p0[l])-S(this.p1[l]))*o,this.p2[l]+=(S(this.p1[l])-S(this.p2[l]))*o,this.p3[l]+=(S(this.p2[l])-S(this.p3[l]))*o,i[l][v]=p*f}return!0}}registerProcessor("ladder-processor",_t);class It extends AudioWorkletProcessor{static get parameterDescriptors(){return[{name:"distort",defaultValue:0},{name:"postgain",defaultValue:1}]}constructor(){super(),this.started=!1}process(t,s,e){const r=t[0],i=s[0],n=r[0]!==void 0;if(this.started&&!n)return!1;this.started=n;const a=Math.expm1(e.distort[0]),c=Math.max(.001,Math.min(1,e.postgain[0]));for(let o=0;o<E;o++)for(let u=0;u<r.length;u++)i[u][o]=(1+a)*r[u][o]/(1+a*Math.abs(r[u][o]))*c;return!0}}registerProcessor("distort-processor",It);function wt(h,t,s){return s*(t-h)+h}function St(h,t,s){return h<2?0:wt(-t*.5,t*.5,s/(h-1))}class At extends AudioWorkletProcessor{constructor(){super(),this.phase=[]}static get parameterDescriptors(){return[{name:"begin",defaultValue:0,max:Number.POSITIVE_INFINITY,min:0},{name:"end",defaultValue:0,max:Number.POSITIVE_INFINITY,min:0},{name:"frequency",defaultValue:440,min:Number.EPSILON},{name:"panspread",defaultValue:.4,min:0,max:1},{name:"freqspread",defaultValue:.2,min:0},{name:"detune",defaultValue:0,min:0},{name:"voices",defaultValue:5,min:1}]}process(t,s,e){if(currentTime<=e.begin[0])return!0;if(currentTime>=e.end[0])return!1;let r=e.frequency[0];r=r*Math.pow(2,e.detune[0]/1200);const i=s[0],n=e.voices[0],a=e.freqspread[0],c=e.panspread[0]*.5+.5,o=Math.sqrt(1-c),u=Math.sqrt(c);for(let f=0;f<n;f++){const v=(f&1)==1,l=r*Math.pow(2,St(n,a,f)/12);let p=o,d=u;v&&(p=u,d=o);const g=l/sampleRate;for(let m=0;m<i[0].length;m++){this.phase[f]=this.phase[f]??Math.random();const B=j.sawblep(this.phase[f],g);i[0][m]=i[0][m]+B*p,i[1][m]=i[1][m]+B*d,this.phase[f]+=g,this.phase[f]>1&&(this.phase[f]=this.phase[f]-1)}}return!0}}registerProcessor("supersaw-oscillator",At);const yt=2048;function Pt(h){let t=new Float32Array(h);for(var s=0;s<h;s++)t[s]=.5*(1-Math.cos(2*Math.PI*s/h));return t}class Tt extends ct{static get parameterDescriptors(){return[{name:"pitchFactor",defaultValue:1}]}constructor(t){t.processorOptions={blockSize:yt},super(t),this.fftSize=this.blockSize,this.timeCursor=0,this.hannWindow=Pt(this.blockSize),this.fft=new lt(this.fftSize),this.freqComplexBuffer=this.fft.createComplexArray(),this.freqComplexBufferShifted=this.fft.createComplexArray(),this.timeComplexBuffer=this.fft.createComplexArray(),this.magnitudes=new Float32Array(this.fftSize/2+1),this.peakIndexes=new Int32Array(this.magnitudes.length),this.nbPeaks=0}processOLA(t,s,e){let r=e.pitchFactor[e.pitchFactor.length-1];r<0&&(r=r*.25),r=Math.max(0,r+1);for(var i=0;i<this.nbInputs;i++)for(var n=0;n<t[i].length;n++){var a=t[i][n],c=s[i][n];this.applyHannWindow(a),this.fft.realTransform(this.freqComplexBuffer,a),this.computeMagnitudes(),this.findPeaks(),this.shiftPeaks(r),this.fft.completeSpectrum(this.freqComplexBufferShifted),this.fft.inverseTransform(this.timeComplexBuffer,this.freqComplexBufferShifted),this.fft.fromComplexArray(this.timeComplexBuffer,c),this.applyHannWindow(c)}this.timeCursor+=this.hopSize}applyHannWindow(t){for(var s=0;s<this.blockSize;s++)t[s]=t[s]*this.hannWindow[s]*1.62}computeMagnitudes(){for(var t=0,s=0;t<this.magnitudes.length;){let e=this.freqComplexBuffer[s],r=this.freqComplexBuffer[s+1];this.magnitudes[t]=e**2+r**2,t+=1,s+=2}}findPeaks(){this.nbPeaks=0;var t=2;let s=this.magnitudes.length-2;for(;t<s;){let e=this.magnitudes[t];if(this.magnitudes[t-1]>=e||this.magnitudes[t-2]>=e){t++;continue}if(this.magnitudes[t+1]>=e||this.magnitudes[t+2]>=e){t++;continue}this.peakIndexes[this.nbPeaks]=t,this.nbPeaks++,t+=2}}shiftPeaks(t){this.freqComplexBufferShifted.fill(0);for(var s=0;s<this.nbPeaks;s++){let n=this.peakIndexes[s],a=Math.round(n*t);if(a>this.magnitudes.length)break;var e=0,r=this.fftSize;if(s>0){let u=this.peakIndexes[s-1];e=n-Math.floor((n-u)/2)}if(s<this.nbPeaks-1){let u=this.peakIndexes[s+1];r=n+Math.ceil((u-n)/2)}let c=e-n,o=r-n;for(var i=c;i<o;i++){let u=n+i,f=a+i;if(f>=this.magnitudes.length)break;let v=2*Math.PI*(f-u)/this.fftSize,l=Math.cos(v*this.timeCursor),p=Math.sin(v*this.timeCursor),d=u*2,g=d+1,m=this.freqComplexBuffer[d],B=this.freqComplexBuffer[g],I=m*l-B*p,w=m*p+B*l,b=f*2,_=b+1;this.freqComplexBufferShifted[b]+=I,this.freqComplexBufferShifted[_]+=w}}}}registerProcessor("phase-vocoder-processor",Tt)})();
//# sourceMappingURL=worklets-C2vj9UQA.js.map
