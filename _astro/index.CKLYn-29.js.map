{"version":3,"mappings":"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","names":["csd","presetsOrc","csoundLoader","_csound","loadCSound","code","init","loadcsound","loadCsound","csound","register","instrument","pat","time_deprecate","hap","currentTime","_cps","targetTime","logger","gain","freq","getFrequency","controls","timeOffset","msg","eventLogger","type","args","logType","load","Csound","__vitePreload","getAudioContext","k","orcCache","loadOrc","url","_","path","res","csoundm","p1","tidal_time","p2","p3","frequency","velocity","p4","p5","i_statement"],"ignoreList":[],"sources":["../../../packages/csound/project.csd?raw","../../../packages/csound/presets.orc?raw","../../../packages/csound/index.mjs"],"sourcesContent":["export default \"<CsoundSynthesizer>\\n<CsInstruments>\\n\\nsr=48000\\nksmps=64\\nnchnls=2\\n0dbfs=1\\n\\n</CsInstruments>\\n</CsoundSynthesizer>\"","export default \"; returns value of given key in given \\\"string map\\\"\\n; keymap(\\\"freq\\\", \\\"note/c3/freq/220/gain/0.5\\\")\\n; yields \\\"220\\\"\\nopcode keymap, S, SS\\n  Skey, Smap xin\\n  idelimiter = strindex(Smap, strcat(Skey, \\\"/\\\"))\\n  ifrom = idelimiter + strlen(Skey) + 1\\n  Svalue = strsub(Smap, ifrom, strlen(Smap))\\n  Svalue = strsub(Svalue, 0, strindex(Svalue, \\\"/\\\"))\\n  xout Svalue\\nendop\\n\\n; TODO add incredibly dope synths\\ninstr organ\\n    iduration = p3\\n    ifreq = p4\\n    igain = p5\\n    ioct = octcps(ifreq)\\n\\n    asig = vco2(igain, ifreq, 12, .5) ; my edit\\n    kpwm = oscili(.1, 5)\\n    asig = vco2(igain, ifreq, 4, .5 + kpwm)\\n    asig += vco2(igain/4, ifreq * 2)\\n\\n    ; filter\\n    ; idepth = 2\\n    ; acut = transegr:a(0, .005, 0, idepth, .06, -4.2, 0.001, .01, -4.2, 0) ; filter envelope\\n    ; asig = zdf_2pole(asig, cpsoct(ioct + acut), 0.5)\\n\\n    ; amp envelope\\n    iattack = .001\\n    irelease = .05\\n    asig *= linsegr:a(0, iattack, 1, iduration, 1, irelease, 0)\\n\\n    out(asig, asig)\\n\\nendin\\n\\ninstr triangle\\n  iduration = p3\\n  ifreq = p4\\n  igain = p5\\n  ioct = octcps(ifreq)\\n  \\n  asig = vco2(igain, ifreq, 12, .5)\\n  \\n  ; amp envelope\\n  iattack = .001\\n  irelease = .05\\n  asig *= linsegr:a(0, iattack, 1, iduration, 1, irelease, 0)\\n  \\n  out(asig, asig)\\nendin\\n\\ninstr pad\\n    iduration = p3\\n    ifreq = p4\\n    igain = p5\\n    ioct = octcps(ifreq)\\n\\n    asig = vco2(igain, ifreq, 0)\\n\\n    ; amp envelope\\n    iattack = .5\\n    irelease = .1\\n    asig *= linsegr:a(0, iattack, 1, iduration, 1, irelease, 0)\\n    \\n    idepth = 2\\n    acut = transegr:a(0, .005, 0, idepth, .06, -4.2, 0.001, .01, -4.2, 0)\\n    asig = zdf_2pole(asig, 1000, 2)\\n\\n    out(asig, asig)\\nendin\\n\\n\\ngisine\\tftgen\\t0, 0, 4096, 10, 1\\n\\ninstr bow\\n    kpres = 2\\n    krat = 0.16\\n    kvibf = 6.12723\\n    \\n    kvib  linseg 0, 0.5, 0, 1, 1, p3-0.5, 1\\t\\n    kvamp = kvib * 0.01\\n    asig  wgbow .7, p4, kpres, krat, kvibf, kvamp, gisine\\n    asig = asig*p5\\n    outs asig, asig\\nendin\\n\\n\\ninstr Meta\\n    Smap = strget(p6)\\n    Sinstrument = keymap(\\\"s\\\", Smap)\\n    schedule(Sinstrument, 0, p3, p4, p5)\\n    ; TODO find a way to pipe Sinstrument through effects\\nendin\"","import { getFrequency, logger, register } from '@strudel/core';\nimport { getAudioContext } from '@strudel/webaudio';\nimport csd from './project.csd?raw';\n// import livecodeOrc from './livecode.orc?raw';\nimport presetsOrc from './presets.orc?raw';\n\nlet csoundLoader, _csound;\n\n// initializes csound + can be used to reevaluate given instrument code\nexport async function loadCSound(code = '') {\n  await init();\n  if (code) {\n    code = `${code}`;\n    //     ^       ^\n    // wrapping in backticks makes sure it works when calling as templated function\n    await _csound?.evalCode(code);\n  }\n}\nexport const loadcsound = loadCSound;\nexport const loadCsound = loadCSound;\n\nexport const csound = register('csound', (instrument, pat) => {\n  instrument = instrument || 'triangle';\n  init(); // not async to support csound inside other patterns + to be able to call pattern methods after it\n  // TODO: find a alternative way to wait for csound to load (to wait with first time playback)\n  return pat.onTrigger((time_deprecate, hap, currentTime, _cps, targetTime) => {\n    if (!_csound) {\n      logger('[csound] not loaded yet', 'warning');\n      return;\n    }\n    hap.ensureObjectValue();\n    let { gain = 0.8 } = hap.value;\n    gain *= 0.2;\n\n    const freq = Math.round(getFrequency(hap));\n    const controls = Object.entries({ ...hap.value, freq })\n      .flat()\n      .join('/');\n    // TODO: find out how to send a precise ctx based time\n    // http://www.csounds.com/manual/html/i.html\n    const timeOffset = targetTime - currentTime; // latency ?\n    //const timeOffset = time_deprecate - getAudioContext().currentTime\n    const params = [\n      `\"${instrument}\"`, // p1: instrument name\n      timeOffset, // p2: starting time in arbitrary unit called beats\n      hap.duration + 0, // p3: duration in beats\n      // instrument specific params:\n      freq, //.toFixed(precision), // p4: frequency\n      gain, // p5: gain\n      `\"${controls}\"`, // p6 controls as string (like superdirt osc message)\n    ];\n    const msg = `i ${params.join(' ')}`;\n    _csound.inputMessage(msg);\n  });\n});\n\nfunction eventLogger(type, args) {\n  const [msg] = args;\n  if (\n    type === 'message' &&\n    (['[commit: HEAD]'].includes(msg) ||\n      msg.startsWith('--Csound version') ||\n      msg.startsWith('libsndfile') ||\n      msg.startsWith('sr =') ||\n      msg.startsWith('0dBFS') ||\n      msg.startsWith('audio buffered') ||\n      msg.startsWith('writing') ||\n      msg.startsWith('SECTION 1:'))\n  ) {\n    // ignore\n    return;\n  }\n  let logType = 'info';\n  if (msg.startsWith('error:')) {\n    logType = 'error';\n  }\n  logger(`[csound] ${msg || ''}`, logType);\n}\n\nasync function load() {\n  if (window.__csound__) {\n    // Allows using some other csound instance.\n    // In that case, the external Csound is responsible\n    // for compiling an orchestra and starting to perform.\n    logger('[load] Using external Csound', 'warning');\n    _csound = window.__csound__;\n    return _csound;\n  } else {\n    const { Csound } = await import('@csound/browser');\n    _csound = await Csound({ audioContext: getAudioContext() });\n    _csound.removeAllListeners('message');\n    ['message'].forEach((k) => _csound.on(k, (...args) => eventLogger(k, args)));\n    await _csound.setOption('-m0d'); // see -m flag https://csound.com/docs/manual/CommandFlags.html\n    await _csound.setOption('--sample-accurate');\n    await _csound.setOption('-odac');\n    await _csound.compileCsdText(csd);\n    // await _csound.compileOrc(livecodeOrc);\n    await _csound.compileOrc(presetsOrc);\n    await _csound.start();\n    return _csound;\n  }\n}\n\nasync function init() {\n  csoundLoader = csoundLoader || load();\n  return csoundLoader;\n}\n\nlet orcCache = {};\nexport async function loadOrc(url) {\n  await init();\n  if (typeof url !== 'string') {\n    throw new Error('loadOrc: expected url string');\n  }\n  if (url.startsWith('github:')) {\n    const [_, path] = url.split('github:');\n    url = `https://raw.githubusercontent.com/${path}`;\n  }\n  if (!orcCache[url]) {\n    orcCache[url] = fetch(url)\n      .then((res) => res.text())\n      .then((code) => _csound.compileOrc(code));\n  }\n  await orcCache[url];\n}\n\n/**\n * Sends notes to Csound for rendering with MIDI semantics. The hap value is\n * translated to these Csound pfields:\n *\n *  p1 -- Csound instrument either as a number (1-based, can be a fraction),\n *        or as a string name.\n *  p2 -- time in beats (usually seconds) from start of performance.\n *  p3 -- duration in beats (usually seconds).\n *  p4 -- MIDI key number (as a real number, not an integer but in [0, 127].\n *  p5 -- MIDI velocity (as a real number, not an integer but in [0, 127].\n *  p6 -- Strudel controls, as a string.\n */\nexport const csoundm = register('csoundm', (instrument, pat) => {\n  let p1 = instrument;\n  if (typeof instrument === 'string') {\n    p1 = `\"${instrument}\"`;\n  }\n  init(); // not async to support csound inside other patterns + to be able to call pattern methods after it\n  return pat.onTrigger((tidal_time, hap) => {\n    if (!_csound) {\n      logger('[csound] not loaded yet', 'warning');\n      return;\n    }\n    if (typeof hap.value !== 'object') {\n      throw new Error('csound only support objects as hap values');\n    }\n    // Time in seconds counting from now.\n    const p2 = tidal_time - getAudioContext().currentTime;\n    const p3 = hap.duration.valueOf() + 0;\n    const frequency = getFrequency(hap);\n    let { gain = 1, velocity = 0.9 } = hap.value;\n    velocity = gain * velocity;\n    // Translate frequency to MIDI key number _without_ rounding.\n    const C4 = 261.62558;\n    let octave = Math.log(frequency / C4) / Math.log(2.0) + 8.0;\n    const p4 = octave * 12.0 - 36.0;\n    // We prefer floating point precision, but over the MIDI range [0, 127].\n    const p5 = 127 * velocity;\n    // The Strudel controls as a string.\n    const p6 = Object.entries({ ...hap.value, frequency })\n      .flat()\n      .join('/');\n    const i_statement = `i ${p1} ${p2} ${p3} ${p4} ${p5}`;\n    console.log('[csoundm]:', i_statement);\n    _csound.inputMessage(i_statement);\n  });\n});\n"],"file":"_astro/index.CKLYn-29.js"}